*vim_faq.txt*	常见问题解答

Last updated on: 12 December 2019

	  VIM FAQ by: Christian Brabandt <cb@256bit.org>
				译者: Willis

常见问题解答						 *vim-faq* *Vim-FAQ*

本 Vim FAQ 创建自 vim@vim.org 用户邮件列表和 comp.editors 新闻组的问与答。在
Vim 中有几种解决问题的方法。本 FAQ 提供了若干可能性中的一种解决方案。可用本
FAQ 提供的信息和链接来探索其它的方法。本 FAQ 的答案归功于 Peppe、Benji、
Charles Campbell 和许多其他人士。本 FAQ 的线上版本可见
https://vimhelp.appspot.com/vim_faq.txt.html。
								*faq-index*
索引~
                                                *faq-general-information*
第一节 - 通用信息~
|faq-1.1|   什么是 Vim？
|faq-1.2|   谁编写了 Vim？
|faq-1.3|   Vim 是否和 Vi 兼容？
|faq-1.4|   Vim 在 Vi 之上有什么改进？
|faq-1.5|   Vim 是免费的吗？
                                                        *faq-resources*
第二节 - 资源~
|faq-2.1|   我去哪里可以学到更多关于 Vim 的知识？
|faq-2.2|   有没有可用的邮件列表？
|faq-2.3|   Vim 邮件列表有没有可用的归档？
|faq-2.4|   哪里可以找到 HTML/PDF/PS 格式的 Vim 用户手册？
|faq-2.5|   我有 Vim 上的 "xyz" (一些) 问题。如何判别是我个人设置的问题还是
	  Vim 的问题？
|faq-2.6|   我去哪里汇报漏洞？
|faq-2.7|   哪里能找到本 FAQ？
|faq-2.8|   在本 FAQ 找不到答案怎么办？
|faq-2.9|   我有实现 Vim 某功能的补丁。如何发送补丁？
|faq-2.10|  我有 Vim 的小窍门或开发了新的 Vim 语法/缩进/文件类型/编译器插件或
	  开发了新脚本或色彩方案。有没有公共网站可以上传这些？
                                                        *faq-availability*
第三节 - 如何获取~
|faq-3.1|   Vim 的最新版本是什么？
|faq-3.2|   哪里可以找到最新的 Vim 版本？
|faq-3.3|   它在什么平台上运行？
|faq-3.4|   哪里可以下载最新版本的 Vim 的运行时文件？
                                                                *faq-help*
第四节 - 帮助~
|faq-4.1|   如何使用帮助文件？
|faq-4.2|   如果在 Vim 帮助文件中搜索某关键字？
|faq-4.3|   我得到了错误信息 E123，我做错什么了？
|faq-4.4|   在哪里可以了解 Vim 的各种模式？
|faq-4.5|   加入新 Vim 帮助文件后，如何生成 Vim 帮助标签文件呢？
|faq-4.6|   可以用帮助文件的压缩版本吗？
                                                        *faq-editing-a-file*
第五节 - 编辑文件~
|faq-5.1|   如何在 Vim 中载入文件用于编辑？
|faq-5.2|   如何把当前文件丰用其它名字保存 (另存为) 并编辑新文件？
|faq-5.3|   如何改变当前目录为当前文件的目录？
|faq-5.4|   如何在写入文件时不在文件尾加上换行符 (EOL)？
|faq-5.5|   如何配置 Vim 打开文件时回到之前编辑所在的位置？
|faq-5.6|   在 Vim 中编辑文件时，文件被外部应用修改了，每次检测到改变发生时，
	  Vim 都会弹出警告窗口 (像确认对话框)。如果屏蔽此警告？
|faq-5.7|   如何编辑光标所在的文件名对应的文件？
|faq-5.8|   如何重载/重新编辑当前文件？
|faq-5.9|   如何周期性地自动保存文件？
|faq-5.10|  如何以只读方式打开文件？
|faq-5.11|  如何打开文件用于编辑而不保存当前文件的修改？
|faq-5.12|  如何减少 Vim 中超大文件的载入时间？
                                                *faq-editing-multiple-files*
第六节 - 编辑多个文件~
|faq-6.1|   在 Vim 里如何一次打开多个文件？
|faq-6.2|   在 Vim 里如何在多个文件/缓冲区间切换？
|faq-6.3|   在 Vim 里如何件在单独的窗口/标签页打开多个文件？
|faq-6.4|   如何配置 Vim 可以一次自动载入若干文件，类似于 "工作集" 或 "项目"？
|faq-6.5|   可以打开在单个 Vim 实例中打开多个顶层窗口，就像 Nedit 或 emacs 那
	  样吗？
|faq-6.6|   如何在 Vim 内浏览/探索目录？
|faq-6.7|   如何用 ftp/scp/rcp/http 通过网络编辑文件？
                                                                *faq-backup*
第七节 - 备份~
|faq-7.1|   我在编辑和保存文件的时候，Vim 创建了和原先文件名字相同但尾部附加了
	  "~" 字符的文件。我怎么能不让 Vim 建立这个文件 (或) 我怎样能关闭 Vim
	  的备份文件功能？
|faq-7.2|   我在编辑和保存文件的时候，Vim 创建了和原先文件名字相同但尾部附加了
	  ".un~" 扩展名的文件。我怎么能不让 Vim 建立这个文件 (或) 我怎样能关闭
	  Vim 的撤销文件功能？
|faq-7.3|   如果配置 Vim 在指定目录保存所有的备份文件？
|faq-7.4|   Vim 保存文件时，文件的权限被改变了。如果配置 Vim 在文件保存时不改
	  变文件权限？
                                                                *faq-buffers*
第八节 - 缓冲区~
|faq-8.1|   我在缓冲区上做了修改。如何才能编辑另一个缓冲区而无需保存修改过的缓
	  冲区也不会丢失我的改动？
|faq-8.2|   如何配置 Vim 在切换到其它缓冲区时自动保存修改过的缓冲区？
|faq-8.3|   如何用空缓冲区来替换当前窗口的缓冲区？
|faq-8.4|   有没有用缓冲区号载入缓冲区的快捷键？
|faq-8.5|   如何在不同的窗口分别打开当前所有的缓冲区？
|faq-8.6|   如何关闭 (删除) 缓冲区而不退出 Vim？
|faq-8.7|   用命令 `:%bd` 删除所有缓冲区时，不是所有的缓冲区都删除了。为什么？
|faq-8.8|   如何显示当前缓冲区/文件的缓冲区号？
|faq-8.9|   如何删除缓冲区而不关闭显示该缓冲区的窗口？
|faq-8.10|  如何映射 <Tab> 键来循环并打开所有缓冲区？
                                                                *faq-windows*
第九节 - 窗口~
|faq-9.1|   Vim 窗口和缓冲区的区别是什么？
|faq-9.2|   如何增加 Vim 窗口的宽度？
|faq-9.3|   如何放大或缩小窗口？
|faq-9.4|   如何在所有打开的缓冲区或打开的窗口或参数列表的所有文件上执行 ex 命
	  令？
                                                                *faq-motion*
第十节 - 动作~
|faq-10.1|  如何跳到文件的开头 (首行) 或尾部 (末行)？
|faq-10.2|  插入模式下，按 <Esc> 键回到命令模式时，光标向左移了一个字符 (除了
	  光标在行首以外)。可以改变此行为来保持光标在同一列上吗？
|faq-10.3|  如何配置 Vim 在用 <Page Up>、<Page Down> 等键滚动时保持水平光标位
	  置？
|faq-10.4|  文件中的有些行超过屏幕宽度而被回绕。用 j、k 键从一行移到下一行时光
	  标移动到文件的下一行而不是屏幕的下一行。如何才能移动到下一屏幕行？
|faq-10.5|  句子、段落和小节的定义是什么？
|faq-10.6|  如何跳转到句子、段落或小节的头部或尾部？
|faq-10.7|  我有延伸到屏幕右端之外的文件行。如何往右移动 Vim 视图来看到原来不
	  在屏幕上的文本？
|faq-10.8|  如何同时滚动两或多个缓冲区？
|faq-10.9|  用光标键时，Vim 改变了模式，在文档中插入奇怪的字符，但不正确地移动
	  光标。怎么啦？
|faq-10.10| 如何配置 Vim 当光标在行首而按左键时，移动光标到前行的行尾？
|faq-10.11| 如何配置 Vim 只留在插入模式 (无模式编辑)？
|faq-10.12| 滚动文本时如何显示若干上下文？
|faq-10.13| 如何回到之前的光标位置？
                                                        *faq-searching-text*
第十一节 - 搜索文本~
|faq-11.1|  用模式搜索文本后，所有匹配的文本保持高亮。如何临时/永久关闭高亮？
|faq-11.2|  如何在搜索模式中输入回车字符？
|faq-11.3|  如何搜索字符 "^M"？
|faq-11.4|  如何搜索/替代显示为 "~R"、"~S" 等的字符？
|faq-11.5|  如何高亮文件中所有的不可打印字符？
|faq-11.6|  如何在文件中搜索整词？
|faq-11.7|  如何搜索光标下的当前单词？
|faq-11.8|  如何在搜索单词时忽略大小写？
|faq-11.9|  如何搜索连续两次出现的单词？
|faq-11.10| 如何统计缓冲区中特定单词出现的次数？
|faq-11.11| 如何在搜索模式时把光标放置在匹配单词的尾部？
|faq-11.12| 如何搜索空行？
|faq-11.13| 如何搜索只有一个字符的行？
|faq-11.14| 如何搜索和替代多个文件中的字符串？
|faq-11.15| 我在映射中使用了 `:s` 替代命令。如果模式的搜索失败，映射被终止。我
	  想要即使替代命令失败时，映射还继续处理下个命令。该如何做呢？
|faq-11.16| 如何搜索一行中某字符的第 n 次出现？
|faq-11.17| 如何用硬回车 (换行) 字符来替代制表符 (或任何字符)？
|faq-11.18| 如何用字符的 ASCII 值来搜索字符？
|faq-11.19| 如何搜索长行？
|faq-11.20| 如何在当前缓冲区中显示包含特定模式的所有行？
|faq-11.21| 如何搜索跨越多行的文本字符串？
|faq-11.22| 如何只在缓冲区中给定行范围内搜索模式？
|faq-11.23| 如何清除前次搜索模式？
|faq-11.24| 为什么模式 "a.\{-}p\@!" 不能匹配？
|faq-11.25| 如何在模式中使用 "/" 时不用对它转义？
|faq-11.26| 如何操作搜索的匹配？
                                                        *faq-changing-text*
第十二节 - 修改文本~
|faq-12.1|  如何删除文件中所有行的拖尾空白字符 (空格和制表)？
|faq-12.2|  如何把所有的多个连续出现的空格字符替代把单个空格？
|faq-12.3|  如何把一串空行缩减成一行？
|faq-12.4|  如何删除文件中的全部空行？如何删除全部只有空白字符的行？
|faq-12.5|  如何复制/抽出当前单词？
|faq-12.6|  如何从一行中抽出一个位置到另一个位置的文本而不是抽出整行？
|faq-12.7|  抽出文本到寄存器时，如何附加文本到当前寄存器的内容上？
|faq-12.8|  如何抽出跨越多行的完整句子？
|faq-12.9|  如何抽出所有包含一个模式的行到一个缓冲区？
|faq-12.10| 如何删除文件中所有不包含特定模式的行？
|faq-12.11| 如何在每个带 "pattern" 的行之前加上一行？
|faq-12.12| 有没有办法在前行包含指定模式的行上操作？
|faq-12.13| 如何在所有包含指定模式的行上执行命令？
|faq-12.14| 可以复制光标上方的字符到当前光标位置吗？
|faq-12.15| 如何在当前行上方/下方插入空行而无需进入插入模式？
|faq-12.16| 如何插入当前文件名到当前缓冲区？
|faq-12.17| 如何插入 Vim 寄存器的内容到当前缓冲区？
|faq-12.18| 如何移动光标跨过行尾并在行尾之后的列插入字符？
|faq-12.19| Vim 如何把光标所在的单词 (比如说: junk) 替代为 "foojunkbar"？
|faq-12.20| 如何对一个目录里所有文件里的特定文本进行替代？
|faq-12.21| 文件中有若干数值。如何为文件中的数值增量或减量？
|faq-12.22| 如何在 `:substitute` 命令中重用前次搜索模式？
|faq-12.23| 如何用 `:substitute` 改变字符串的大小写？
|faq-12.24| 如何键入键盘上没有的字符？
|faq-12.25| 有没有命令删除任何或所有的二合字母？
|faq-12.26| 插入模式下，按退格键时，只删除这次在插入模式中键入的字符。如何能用
	  退格键删除在之前的插入模式中键入的字符？
|faq-12.27| 文件有长于 72 字符的行，以 "+" 终止并回绕到下一行。如何快速连接这
	  些行？
|faq-12.28| 如何把抽出的面向字符的文本粘贴到单独的行上？
|faq-12.29| 如何改变单词或字符或文本块的大小写？
|faq-12.30| 如何键入键盘上没有的 ASCII 字符？
|faq-12.31| 如何替代文件中的不可打印字符？
|faq-12.32| 如何删除缓冲区中的重复行？
|faq-12.33| 如何给文件中的所有行加上对应行号前缀？
|faq-12.34| 如何交换两个字符或单词或行？
|faq-12.35| 如何改变用作单词定界的字符？
                                        *faq-completion-in-insert-mode*
SECTION 13 - COMPLETION IN INSERT MODE ~
|faq-13.1|  How do I complete words or lines in insert mode?
|faq-13.2|  How do I complete file names in insert mode?
|faq-13.3|  I am using CTRL-P/CTRL-N to complete words in insert mode. How do
	  I complete words that occur after the just completed word?
                                                        *faq-text-formatting*
SECTION 14 - TEXT FORMATTING ~
|faq-14.1|  How do I format a text paragraph so that a new line is inserted
	  at the end of each wrapped line?
|faq-14.2|  How do I format long lines in a file so that each line contains
	  less than "n" characters?
|faq-14.3|  How do I join short lines to the form a paragraph?
|faq-14.4|  How do I format bulleted and numbered lists?
|faq-14.5|  How do I indent lines in insert mode?
|faq-14.6|  How do I format/indent an entire file?
|faq-14.7|  How do I increase or decrease the indentation of the current
	  line?
|faq-14.8|  How do I indent a block/group of lines?
|faq-14.9|  When I indent lines using the > or < key, the standard 8-tabstops
	  are used instead of the current 'tabstop' setting. Why?
|faq-14.10| How do I turn off the automatic indentation of text?
|faq-14.11| How do I configure Vim to automatically set the 'textwidth'
	  option to a particular value when I edit mails?
|faq-14.12| Is there a way to make Vim auto-magically break lines?
|faq-14.13| I am seeing a lot of ^M symbols in my file. I tried setting the
	  'fileformat' option to 'dos' and then 'unix' and then 'mac'.
	  None of these helped. How can I hide these symbols?
|faq-14.14| When I paste some text into a Vim buffer from another
	  application, the alignment (indentation) of the new text is
	  messed up. How do I fix this?
|faq-14.15| When there is a very long wrapped line (wrap is "on") and a line
	  doesn't fit entirely on the screen it is not displayed at all.
	  There are blank lines beginning with "@" symbol instead of
	  wrapped line. If I scroll the screen to fit the line the "@"
	  symbols disappear and the line is displayed again. What Vim
	  setting control this behavior?
|faq-14.16| How do I convert all the tab characters in a file to space
	  characters?
|faq-14.17| What Vim options can I use to edit text that will later go to a
	  word processor?
|faq-14.18| How do I join lines without adding or removing any space
	  characters?
                                                        *faq-visual-mode*
SECTION 15 - VISUAL MODE ~
|faq-15.1|  How do I do rectangular block copying?
|faq-15.2|  How do I delete or change a column of text in a file?
|faq-15.3|  How do I apply an ex-command on a set of visually selected lines?
|faq-15.4|  How do I execute an ex command on a column of text selected in
	  Visual block mode?
|faq-15.5|  How do I select the entire file in visual mode?
|faq-15.6|  When I visually select a set of lines and press the > key to
	  indent the selected lines, the visual mode ends. How can I
	  reselect the region for further operation?  (or) How do I
	  re-select the last selected visual area again?
|faq-15.7|  How do I jump to the beginning/end of a visually selected region?
|faq-15.8|  When I select text with mouse and then press : to enter an ex
	  command, the selected text is replaced with the : character. How
	  do I execute an ex command on a text selected using the mouse
	  similar to the text selected using the visual mode?
|faq-15.9|  When I select a block of text using the mouse, Vim goes into
	  selection mode instead of Visual mode. Why?
                                                *faq-command-line-mode*
SECTION 16 - COMMAND-LINE MODE ~
|faq-16.1|  How do I use the name of the current file in the command mode or
	  an ex command line?
|faq-16.2|  How do I edit the text in the Vim command-line effectively?
|faq-16.3|  How do I switch from Vi mode to Ex mode?
|faq-16.4|  How do I copy the output from an ex-command into a buffer?
|faq-16.5|  When I press the <Tab> key to complete the name of a file in the
	  command mode, if there are more than one matching file names,
	  then Vim completes the first matching file name and displays a
	  list of all matching filenames. How do I configure Vim to only
	  display the list of all the matching filenames and not complete
	  the first one?
|faq-16.6|  How do I copy text from a buffer to the command line and from the
	  command line to a buffer?
|faq-16.7|  How do I put a command onto the command history without executing
	  it?
|faq-16.8|  How do I increase the height of the command-line?
                                                                *faq-viminfo*
SECTION 17 - VIMINFO ~
|faq-17.1|  When I invoke Vim, I get error messages about illegal characters
	  in the viminfo file. What should I do to get rid of these
	  messages?
|faq-17.2|  How do I disable the viminfo feature?
|faq-17.3|  How do I save and use Vim marks/commands across Vim sessions?
                                                        *faq-remote-editing*
SECTION 18 - REMOTE EDITING ~
|faq-18.1|  How do I open a file with existing instance of gvim? What
	  happened to the Vim 5.x OpenWithVim.exe and SendToVim.exe files?
|faq-18.2|  How do I send a command to a Vim server to write all buffers to
	  disk?
|faq-18.3|  Where can I get the documentation about the Vim remote server
	  functionality?
                                                                *faq-options*
SECTION 19 - OPTIONS ~
|faq-19.1|  How do I configure Vim in a simple way?
|faq-19.2|  How do I toggle the value of an option?
|faq-19.3|  How do I set an option that affects only the current
	  buffer/window?
|faq-19.4|  How do I use space characters for a Vim option value?
|faq-19.5|  Can I add (embed) Vim option settings to the contents of a file?
|faq-19.6|  How do I display the line numbers of all the lines in a file?
|faq-19.7|  How do I change the width of the line numbers displayed using the
	  'number' option?
|faq-19.8|  How do I display (view) all the invisible characters like space,
	  tabs and newlines in a file?
|faq-19.9|  How do I configure Vim to always display the current line and
	  column number?
|faq-19.10| How do I display the current Vim mode?
|faq-19.11| How do I configure Vim to show pending/partial commands on the
	  status line?
|faq-19.12| How do I configure the Vim status line to display different
	  settings/values?
|faq-19.13| How do I configure Vim to display status line always?
|faq-19.14| How do I make a Vim setting persistent across different Vim
	  invocations/instances/sessions?
|faq-19.15| Why do I hear a beep (why does my window flash) about 1 second
	  after I hit the Escape key?
|faq-19.16| How do I make the "c" and "s" commands display a "$" instead of
	  deleting the characters I'm changing?
|faq-19.17| How do I remove more than one flag using a single `:set` command
	  from a Vim option?
                                                        *faq-mapping-keys*
SECTION 20 - MAPPING KEYS ~
|faq-20.1|  How do I know what a key is mapped to?
|faq-20.2|  How do I list all the user-defined key mappings?
|faq-20.3|  How do I unmap a key?
|faq-20.4|  I am not able to create a mapping for the <xxx> key. What is
	  wrong?
|faq-20.5|  Why does mapping the <C-...> key not work?
|faq-20.6|  How do I map the numeric keypad keys?
|faq-20.7|  How do I create a mapping that works only in visual mode?
|faq-20.8|  How do I create a mapping that works only in normal and operator
	  pending mode (but not in visual mode)?
|faq-20.9|  In a Vim script, how do I know which keys to use for my mappings,
	  so that the mapped key will not collide with an already used key?
|faq-20.10| How do I map the escape key?
|faq-20.11| How do I map a key to perform nothing?
|faq-20.12| I want to use the <Tab> key to indent a block of text and
	  <Shift-Tab> key to unindent a block of text. How do I map the keys
	  to do this?  This behavior is similar to textpad, visual studio,
	  etc.
|faq-20.13| In my mappings the special characters like <CR> are not
	  recognized. How can I configure Vim to recognize special
	  characters?
|faq-20.14| How do I use the "|" to separate multiple commands in a map?
|faq-20.15| If I have a mapping/abbreviation whose ending is the beginning of
	  another mapping/abbreviation, how do I keep the first from
	  expanding into the second one?
|faq-20.16| Why does it take a second or more for Vim to process a key,
	  sometimes when I press a key?
|faq-20.17| How do I map a key to run an external command using a visually
	  selected text?
|faq-20.18| How do I map the CTRL-I key while still retaining the
	  functionality of the <Tab> key?
|faq-20.19| How do I define a map to accept a count?
|faq-20.20| How can I make my normal mode mapping work from within Insert
	  Mode?
                                                        *faq-abbreviations*
SECTION 21 - ABBREVIATIONS ~
|faq-21.1|  How do I auto correct misspelled words?
|faq-21.2|  How do I create multi-line abbreviations?
|faq-21.3|  When my abbreviations are expanded, an additional space character
	  is added at the end of the expanded text. How do I avoid this
	  character?
|faq-21.4|  How do I insert the current date/time stamp into the file?
|faq-21.5|  How do I prevent an abbreviation from expanding in insert mode?
                                                *faq-record-and-playback*
SECTION 22 - RECORD AND PLAYBACK ~
|faq-22.1|  How do I repeat an editing operation (insertion, deletion, paste,
	  etc)?
|faq-22.2|  How I record and repeat a set of key sequences?
|faq-22.3|  How do I edit/modify a recorded set of key sequences?
|faq-22.4|  How do I write recorded key sequences to a file?
|faq-22.5|  I am using register 0 to record my key sequences (i.e. q0 ....
	  q). In the recorded key sequences, I am yanking some text.  After
	  the first replay of the recorded key sequence, I am no longer
	  able to play it back.
                                                        *faq-autocommands*
SECTION 23 - AUTOCOMMANDS ~
|faq-23.1|  How do I execute a command when I try to modify a read-only file?
|faq-23.2|  How do I execute a command every time when entering a buffer?
|faq-23.3|  How do I execute a command every time when entering a window?
|faq-23.4|  From an autocmd, how can I determine the name of the file or the
	  buffer number for which the autocommand is executed?
|faq-23.5|  How do I automatically save all the changed buffers whenever Vim
	  loses focus?
|faq-23.6|  How do I execute/run a function when Vim exits to do some
	  cleanup?
                                                        *faq-syntax-highlight*
SECTION 24 - SYNTAX HIGHLIGHT ~
|faq-24.1|  How do I turn off/on syntax highlighting?
|faq-24.2|  How do I change the background and foreground colors used by Vim?
|faq-24.3|  How do I change the highlight colors to suit a dark/light
	  background?
|faq-24.4|  How do I change the color of the line numbers displayed when the
	  `:set number` command is used?
|faq-24.5|  How do I change the background color used for a Visually selected
	  block?
|faq-24.6|  How do I highlight the special characters (tabs, trailing spaces,
	  end of line, etc) displayed by the 'list' option?
|faq-24.7|  How do I specify a colorscheme in my .vimrc/.gvimrc file, so that
	  Vim uses the specified colorscheme every time?
|faq-24.8|  Vim syntax highlighting is broken. When I am editing a file, some
	  parts of the file is not syntax highlighted or syntax highlighted
	  incorrectly.
|faq-24.9|  Is there a built-in function to syntax-highlight the
	  corresponding matching bracket?
|faq-24.10| How do I turn off the C comment syntax highlighting?
|faq-24.11| How do I add my own syntax extensions to the standard syntax
	  files supplied with Vim?
|faq-24.12| How do I replace a standard syntax file that comes with the Vim
	  distribution with my own syntax file?
|faq-24.13| How do I highlight all the characters after a particular column?
|faq-24.14| How do I convert a source file (.c, .h, etc) with the Vim syntax
	  highlighting into a HTML file?
|faq-24.15| How do I list the definition of all the current highlight
	  groups?
|faq-24.16| How can I embed one syntax highlighting language into another
	  one?
                                                *faq-vim-script-writing*
SECTION 25 - VIM SCRIPT WRITING ~
|faq-25.1|  How do I list the names of all the scripts sourced by Vim?
|faq-25.2|  How do I debug Vim scripts?
|faq-25.3|  How do I locate the script/plugin which sets a Vim option?
|faq-25.4|  I am getting some error/informational messages from Vim (possibly
	  when running a script), the messages are cleared immediately. How
	  do I display the messages again?
|faq-25.5|  How do I save and restore a plugin specific information across
	  Vim invocations?
|faq-25.6|  How do I start insert mode from a Vim function?
|faq-25.7|  How do I change the cursor position from within a Vim function?
|faq-25.8|  How do I check the value of an environment variable in the .vimrc
	  file?
|faq-25.9|  How do I check whether an environment variable is set or not from
	  a Vim function?
|faq-25.10| How do I call/use the Vim built-in functions?
|faq-25.11| I am using some normal mode commands in my Vim script. How do I
	  avoid using the user-defined mappings for these normal mode
	  commands and use the standard Vim functionality for these normal
	  mode commands?
|faq-25.12| How do I get a visually selected text into a Vim variable or
	  register?
|faq-25.13| I have some text in a Vim variable "myvar". I would like to use
	  this variable in a `:s` substitute command to replace a text
	  "mytext". How do I do this?
|faq-25.14| A Vim variable (bno) contains a buffer number. How do I use this
	  variable to open the corresponding buffer?
|faq-25.15| How do I store the value of a Vim option into a Vim variable?
|faq-25.16| I have copied and inserted some text into a buffer from a Vim
	  function. How do I indent the inserted text from the Vim
	  function?
|faq-25.17| How do I get the character under the cursor from a Vim script?
|faq-25.18| How do I get the name of the current file without the extension?
|faq-25.19| How do I get the basename of the current file?
|faq-25.20| How do I get the output from a Vim function into the current
	  buffer?
|faq-25.21| How do I call external programs from a Vim function?
|faq-25.22| How do I get the return status of a program executed using the
	  `:!` command?
|faq-25.23| How do I determine whether the current buffer is modified or
	  not?
|faq-25.24| I would like to use the carriage return character in a normal
	  command from a Vim script. How do I specify the carriage return
	  character?
|faq-25.25| How do I split long lines in a Vim script?
|faq-25.26| When I try to "execute" my function using the `:execute Myfunc()`
	  command, the cursor is moved to the top of the current buffer.
	  Why?
|faq-25.27| How do I source/execute the contents of a register?
|faq-25.28| After calling a Vim function or a mapping, when I press the "u"
	  key to undo the last change, Vim undoes all the changes made by
	  the mapping/function. Why?
|faq-25.29| How can I call a function defined with s: (script local
	  function) from another script/plugin?
|faq-25.30| Is it possible to un-source a sourced script? In other words,
	  reverse all the commands executed by sourcing a script.
                                                                *faq-plugins*
SECTION 26 - PLUGINS ~
|faq-26.1|  How do I set different options for different types of files?
|faq-26.2|  I have downloaded a Vim plugin or a syntax file or a indent file,
	  or a color scheme or a filetype plugin from the web. Where should
	  I copy these files so that Vim will find them?
|faq-26.3|  How do I extend an existing filetype plugin?
|faq-26.4|  How do I turn off loading the Vim plugins?
|faq-26.5|  How do I turn on/off loading the filetype plugins?
|faq-26.6|  How do I override settings made in a file type plugin in the
	  global ftplugin directory for all the file types?
|faq-26.7|  How do I disable the Vim directory browser plugin?
|faq-26.8|  How do I set the filetype option for files with names matching a
	  particular pattern or depending on the file extension?
                                                *faq-editing-program-files*
SECTION 27 - EDITING PROGRAM FILES ~
|faq-27.1|  How do I enable automatic indentation for C/C++ files?
|faq-27.2|  How do I configure the indentation used for C/C++ files?
|faq-27.3|  How do I turn off the automatic indentation feature?
|faq-27.4|  How do I change the number of space characters used for the
	  automatic indentation?
|faq-27.5|  I am editing a C program using Vim. How do I display the
	  definition of a macro or a variable?
|faq-27.6|  I am editing a C program using Vim. How do I jump to the
	  beginning or end of a code block from within the block?
|faq-27.7|  When editing C++ files and when inserting new lines above or
	  below a comment (//) line, Vim automatically inserts the C++
	  comment character (//) at the beginning of the line. How do I
	  disable this? 
|faq-27.8|  How do I add the comment character "#" to a set of lines at the
	  beginning of each line?
|faq-27.9|  How do I edit a header file with the same name as the
	  corresponding C source file?
|faq-27.10| How do I automatically insert comment leaders while typing
	  comments?
                                                                *faq-quickfix*
SECTION 28 - QUICKFIX ~
|faq-28.1|  How do I build programs from Vim?
|faq-28.2|  When I run the make command in Vim I get the errors listed as the
	  compiler compiles the program. When it finishes this list
	  disappears and I have to use the `:clist` command to see the error
	  message again. Is there any other way to see these error
	  messages?
|faq-28.3|  How can I perform a command for each item in the
	  quickfix/location list?
                                                                *faq-folding*
SECTION 29 - FOLDING ~
|faq-29.1|  How do I extend the Vim folding support?
|faq-29.2|  When I enable folding by setting the 'foldmethod' option, all the
	  folds are closed. How do I prevent this?
|faq-29.3|  How do I control how many folds will be opened when I start
	  editing a file?
|faq-29.4|  How do I open and close folds using the mouse?
|faq-29.5|  How do I change the text displayed for a closed fold?
|faq-29.6|  How do I store and restore manually created folds across
	  different Vim invocations?
|faq-29.7|  I have enabled syntax based folding. Why is Vim so slow?

                                        *faq-vim-with-external-applications*
SECTION 30 - VIM WITH EXTERNAL APPLICATIONS ~
|faq-30.1|  Can I run a shell inside a Vim window?
|faq-30.2|  How do I pass the word under the cursor to an external command?
|faq-30.3|  How do I get the output of a shell command into a Vim buffer?
|faq-30.4|  How do I pipe the contents of the current buffer to an external
	  command and replace the contents of the buffer with the output
	  from the command?
|faq-30.5|  How do I sort a section of my file?
|faq-30.6|  How do I use Vim as a pager?
|faq-30.7|  How do I view Unix man pages from inside Vim?
|faq-30.8|  How do I change the diff command used by the Vim diff support?
|faq-30.9|  How do I use the Vim diff mode without folding?
                                                                *faq-gui-vim*
SECTION 31 - GUI VIM ~
|faq-31.1|  How do I create buffer specific menus?
|faq-31.2|  How do I change the font used by GUI Vim?
|faq-31.3|  When starting GUI Vim, how do I specify the location of the GVIM
	  window?
|faq-31.4|  How do I add a horizontal scrollbar in GVim?
|faq-31.5|  How do I make the scrollbar appear in the left side by default?
|faq-31.6|  How do I remove the Vim menubar?
|faq-31.7|  I am using GUI Vim. When I press the <Alt> key and a letter, the
	  menu starting with that letter is selected. I don't want this
	  behavior as I want to map the <Alt>-<key> combination. How do I do
	  this?
|faq-31.8|  Is it possible to scroll the text by dragging the scrollbar so
	  that the cursor stays in the original location?
|faq-31.9|  How do I get gvim to start browsing files in a particular
	  directory when using the `:browse` command?
|faq-31.10| For some questions, like when a file is changed outside of Vim,
	  Vim displays a GUI dialog box. How do I replace this GUI dialog
	  box with a console dialog box?
|faq-31.11| I am trying to use GUI Vim as the editor for my xxx application.
	  When the xxx application launches GUI Vim to edit a file, the
	  control immediately returns to the xxx application. How do I
	  start GUI Vim, so that the control returns to the xxx
	  application only after I quit Vim?
|faq-31.12| Why does the "Select Font" dialog doesn't show all the fonts
	  installed in my system?
|faq-31.13| How do I use the mouse in Vim command-line mode?
|faq-31.14| When I use the middle mouse button to scroll text, it pastes the
	  last copied text. How do I disable this behavior?
|faq-31.15| How do I change the location and size of a GUI Vim window?
|faq-31.16| When splitting the Vim window vertically, Vim changes
	  the position.
                                                        *faq-vim-on-unix*
SECTION 32 - VIM ON UNIX ~
|faq-32.1|  I am running Vim in a xterm. When I press the CTRL-S key, Vim
	  freezes. What should I do now?
|faq-32.2|  I am seeing weird screen update problems in Vim. What can I do to
	  solve this screen/display update problems?
|faq-32.3|  I am using the terminal/console version of Vim. In insertmode,
	  When I press the backspace key, the character before the cursor
	  is not erased. How do I configure Vim to do this?
|faq-32.4|  I am using Vim in a xterm. When I quit Vim, the screen contents
	  are restored back to the original contents. How do I disable
	  this?
|faq-32.5|  When I start Vim, it takes quite a few seconds to start. How do I
	  minimize the startup time?
|faq-32.6|  How can I make the cursor in gvim in unix stop blinking?
|faq-32.7|  How do I change the menu font on GTK Vim?
|faq-32.8|  How do I prevent CTRL-Z from suspending Vim?
|faq-32.9|  When I kill the xterm running Vim, the Vim process continues to
	  run and takes up a lot of CPU (99%) time. Why is this happening?
|faq-32.10| How do I get the Vim syntax highlighting to work in a Unix
	  terminal?
                                                *faq-vim-on-ms-windows*
SECTION 33 - VIM ON MS-WINDOWS ~
|faq-33.1|  In MS-Windows, CTRL-V doesn't start the blockwise visual mode.
	  What happened?
|faq-33.2|  When I press the CTRL-Y key, it acts like the CTRL-R key. How do
	  I configure Vim to treat CTRL-Y as CTRL-Y?
|faq-33.3|  How do I start GUI Vim in a maximized window always?
|faq-33.4|  After doing some editing operations, Vim freezes. The cursor
	  becomes an empty rectangle. I am not able enter any characters.
	  What is happening?
|faq-33.5|  I am using Windows XP, the display speed of maximized GVim is
	  very slow. What can I do to speed the display updates?
|faq-33.6|  What are the recommended settings for using Vim with cygwin?
|faq-33.7|  I am trying to use GNU diff with Vim diff mode. When I run the
	  diff from command line, it works. When I try to use the diff with
	  Vim it doesn't work. What should I do now?
|faq-33.8|  Is it possible to use Vim as an external editor for MS-Windows
	  Outlook email client?
|faq-33.9|  I am using Vim to edit HTML files. How do I start internet
	  explorer with the current file to preview the HTML file?
|faq-33.10| I would like to use Vim with Microsoft Visual Studio. How do I
	  do this?
|faq-33.11| Where do I place the _vimrc and _gvimrc files?
|faq-33.12| Every time I save a file, Vim warns about the file being changed
	  outside of Vim. Why?
                                                                *faq-printing*
SECTION 34 - PRINTING ~
|faq-34.1|  How do I print a file along with line numbers for all the lines?
|faq-34.2|  How do I print a file with the Vim syntax highlighting colors?
                                                *faq-building-vim-from-source*
SECTION 35 - BUILDING VIM FROM SOURCE ~
|faq-35.1|  How do I build Vim from the sources on a Unix system?
|faq-35.2|  How do I install Vim in my home directory or a directory other
	  than the default installation directory in Unix?
|faq-35.3|  How do I build Vim from the sources on a MS-Windows system?
|faq-35.4|  The Vim help, syntax, indent files are missing from my Vim
	  installation. How do I install these files?
|faq-35.5|  I have built Vim from the source and installed the Vim package
	  using "make install". Do I need to keep the Vim source directory?
|faq-35.6|  How do I determine the Vim features which are enabled at compile
	  time?
|faq-35.7|  Can I build Vim without the GUI support?
|faq-35.8|  When building Vim on a Unix system, I am getting "undefined
	  reference to term_set_winsize" error. How do I resolve this
	  error?
|faq-35.9|  Vim configure keeps complaining about the lack of gtk-config
	  while trying to use GTK 2.03. This is correct, since in GTK 2
	  they moved to using the generic pkg-config. I can get pkg-config
	  to list the various includes and libs for gtk, but for some
	  reason the configure script still isn't picking this up.
|faq-35.10| I did successfully download the sources and compiled Vim on
	  Unix. But feature ... still does not work. What is wrong and
	  how can I fix it?
                                                                *faq-various*
SECTION 36 - VARIOUS ~
|faq-36.1|  How do I edit binary files with Vim?
|faq-36.2|  How do I disable the visual error flash and the error beep?
|faq-36.3|  How do I display the ascii value of a character displayed in a
	  buffer?
|faq-36.4|  Can I use zero as a count for a Vim command?
|faq-36.5|  How do I disable the Vim welcome screen?
|faq-36.6|  How do I avoid the "hit enter to continue" prompt?
|faq-36.7|  How do I invoke Vim from command line to run a group of commands
	  on a group of files?
|faq-36.8|  How do I use a normal mode command from insert mode without
	  leaving the insert mode?
|faq-36.9|  How do I start Vim in insert mode?
|faq-36.10| How do I use Copy and Paste with Vim?
|faq-36.11| Why shouldn't I modify the files in the system runtime
	  directory?
                                                                *faq-unicode*
SECTION 37 - UNICODE ~
|faq-37.1|  Is it possible to create Unicode files using Vim?
|faq-37.2|  Which Vim settings are particularly important for editing Unicode
	  files?
|faq-37.3|  What is the 'encoding' option?
|faq-37.4|  How does Vim name the various Unicode encodings?
|faq-37.5|  How does Vim specify the presence or absence of a byte-order
	  mark?
|faq-37.6|  What is the 'fileencoding' option?
|faq-37.7|  What is the 'fileencodings' option?
|faq-37.8|  What is the 'termencoding' option?
|faq-37.9|  What is the 'bomb' option?
|faq-37.10| Where can I find an example of a typical use of all these
	  options?
|faq-37.11| How can I insert Unicode characters into a file using Vim?
|faq-37.12| How can I know which digraphs are defined and for which
	  characters?

=============================================================================
 								*faq-1*
第一节 - 通用信息 ~

 								*faq-1.1*
1.1. 什么是 Vim？

Vim 的意思是 Vi IMproved (Vi 改进版)。以前它是 Vi IMitation (Vi 模仿版) 的缩
写，但是由于做了许多改进，改一下名字还是合适的。Vim 文本编辑器包含了 unix "Vi"
编辑器的几乎所有的命令并且还加入了许多新的命令。所有的命令都可以通过键盘来输
入。这样的优点在于: 你可以通过把手放在键盘上，把眼睛放在屏幕上，集中精力在编辑
的任务上。如果你需要，Vim 提供对鼠标的支持，并且还有带有滚动条和菜单的图形界面
版本。

Vim 是编辑器，不是文字处理器。文字处理器主要用于文本的排版，意思是定位文本，改
变输出显示的方式。常常，最终文档用于打印或排字或其它方式，以让他人愉悦的方式展
现出来。文字处理器的例子有 Microsoft Word、FrameMaker 和 OpenOffice Writer。

编辑器简单来说就是用来输入文本。文档的排字或排版是次要考虑。通过使用编辑器，人
们花大部分精力输入文本，不是让文本好看。编辑器的例子除了 Vim 和 Vi 以外，还有
Emacs、TextMate、Ultraedit 和 gedit。还有 Notepad。

更多详情请阅读:

    |intro|

 								*faq-1.2*
1.2. 谁编写了 Vim？

Vim 大部分是基于 Stvie 的工作并由 Bram Moolenaar 编写，还有来自多不胜数的人士
的贡献。

更多详情请阅读:

    |author|
    |credits|

 								*faq-1.3*
1.3. Vim 是否和 Vi 兼容？

是的。Vim 和 Vi 非常兼容。"-C" 命令行标志位可用来以 Vi 兼容方式启动 Vim: >

    $ vim -C
<
也可以用: >

    $ vim -u NONE
<
也可以置位 'compatible' 选项来打开 Vi 兼容模式: >

    :set compatible
<
如果你要确信以和原始的 Vi 不兼容 ('nocompatible') 模式启动 Vim，可提供 -N 命令
行参数: >

    $ vim -N
<
更多详情请阅读:

    |-C|
    |-N|
    |'compatible'|
    |compatible-default|

 								*faq-1.4*
1.4. Vim 在 Vi 之上有什么改进？

下面给出 Vim 在 Vi 之上改进的一个简短总结。此列表显示了 Vi 是完全现代和功能丰
富的编辑器。它实现了现代编辑器的标准功能，对广泛的超级用户功能和面向程序员的功
能也有同样的重视。

现代化 Vi 的功能: ~

  多层撤销 ~

     可以设置文件缓冲区里改动的撤销次数。撤销的改动可以重做。
     另外，从 7.3 版本开始，Vim 可以永久保存撤销信息，这样可以撤销之前编辑会话
     中的改动。

  标签页、多重窗口和缓冲区 ~

     每个文件可以在自己的窗口中显示。可以方便地在窗口间移动。Vim 会话中打开的
     每个文件也会有相关联的缓冲区，可以方便地在缓冲区间跳转。和任何现代 GUI 一
     样，Vim 支持在标签页中打开多个文件。可以为标签页、缓冲区、窗口和参数列表
     进行批处理。

  灵活的插入模式 ~

     Vim 可以在插入模式中使用光标键在文件中到处移动。不再需要按 <Esc>，到处移
     动，再按 'i' 或 'a' 了。

  宏 ~

     Vim 有一个记录键入字符序列，并任意多次重复此序列的机制。

  可视模式 ~

     可以高亮一段文本并只在此段文本上执行操作。

  列块操作符 ~

     可以选择和高亮文本的矩形列块，用于在其上执行特定的操作。

  在线帮助系统 ~

     可以方便地寻找 Vim 使用的方方面面的帮助。帮助在自身的窗口上显示。

  命令行编辑和历史 ~

     通过历史，可用光标键来重复或搜索曾经键入过的命令。可用一个命令的开始部分
     来匹配历史缓冲区中另一个相似命令的开始部分。还可以通过编辑命令来改正打字
     错误或修正若干值。

  命令行补全。~

     使用 <Tab> 键可以按照需要补全命令、选项、文件名等等。

  水平滚动。~

     长行可以横向滚动 (无论有无 GUI)。

  Unicode 和国际化的改进。~

     Vim 可以编辑 unicode 编码的文件且内部使用 utf-8 编码。另外，Vim 可以显示
     从右到左的文本。

高级用户功能: ~

  文本排版~

     使用两个键击，可以对大段文本进行排版而不需使用外部程序。

  插入模式补全~

     Vim 提供若干补全文本的不同可能性。例如在键入时，Vim 可以通过用当前单词来
     匹配文件中的类似单词来补全单词。

  标签跳转~

     就像互联网浏览器那样，可以跳回到编辑过文本的之前部分，然后跳回来。你的大
     脑可以解放出来专心编辑而非浏览。

  自动命令~

     读写文件、跳转到其它缓冲区等等场合下自动执行命令。

  Viminfo ~

     可以在特定文件中保存命令行历史、位置标记和寄存器，以便启动时读入。你因而
     可以在新的 Vim 会话中回放旧的搜索模式、宏等等。

  鼠标支持~

     xterm 和 MS-DOS 中支持鼠标。可用于定位光标、选择可视区域、粘贴寄存器等
     等。

  图形用户界面 (GUI) ~

     有若干不同的图形用户界面可用。另外，加入自选的菜单很方便。当然，控制台
     vim 还是得到支持且非常广泛地使用着。

  脚本语言~

     Vim 有强大的脚本语言来创建新命令。也可用 Perl、Python、TCL、Lua 和 Ruby
     来做同样的事！

  插件~

     通过启动时自动载入的 vim 命令 (常规命令或脚本语言) 实现的附加功能。例如:
     文件探索器、网络编辑、增强的自动补全、语法检查。更多插件在不停地开发中和
     通过 VimOnline 共享。

  众多编程语言的语法高亮~

     支持数以百计的编程语言语法高亮 (包括隐藏项目)。还可以加入其它语言的支持。

  扩展的正规表达式~

     Vim 支持扩展的正规表达式，和 Perl 正规表达式的扩展提供的功能类似。

  集成拼写检查~

     拼写检查已和 Vim 集成。

  比较模式~

     Vim 可以高亮两个、三个或四个文件的差异。相同的行可以被折叠并隐藏。

  使用 blowfish 算法加密~

     可以使用对称块加密算法 blowfish 加密文件和交换文件。

  充分可定制~

     Vim 可以通过设置选项来调整和定制，以达到你理想的工作环境。可以定义自己的
     命令、宏，甚至还有插件来延伸其能力

  软件包~

     加入软件包使日益增长的插件的安装可以有效管理。这是获取一或多个插件的方便
     途径，把它们放在一个目录上并保持更新。Vim 就会自动载入，也可以按照个人喜
     好来载入。

编程性能功能: ~

  编辑-编译-编辑 加速~

     可以在 Vim 内编译并自动跳转到源码中的错误位置。

  为众多程序语言提供缩进~

     C、C++、Java、Perl、XML 和许多其它的语言在输入时 Vim 可以自动缩进。还可以
     加入其它语言的支持。 

  在头文件中查找单词~

     可在当前文件和头文件中查找光标所在的单词的匹配。

  高级文本对象~

     即时应用选择、删除、复制、缩进、排版、改变大小写等等操作于 ( 和 )、{ 和
     }、< 和 >、[ 和 ] 之间的文本、或单词、或句子、或段落。功能很强大。

  折叠~

     文本的特定部分可以被 "折叠" 掉。最好的例子是函数的函数体部分。可以先看代
     码的总览，然后在要关心的函数上打开折叠以细读其实现。

  ctags 和 cscope 集成~

     使用这两个强大的程序，可以从函数的调用跳转到函数的定义，并使用其它技巧来
     浏览源码。

  和若干程序语言的集成~

     如果你觉得内部脚本语言不够强大，可以用 Lua、Ruby、Tcl、Perl 和 Python 2
     和 3 来扩展 Vim。

  异步 I/O 支持~

     Vim 使用作业和通道和其它的程序异步对话。这样可以让编译器在后台运行，一但
     完成，打开快速修复列表以修正警告和错误。

  定时器~

     定时器是异步的，可单次或重复触发，以调用函数来完成任意操作。

更多详情请阅读: ~

    |vi-differences|

 								*faq-1.5*
1.5. Vim 是免费的吗？

Vim 是慈善软件。使用或复制 Vim 没有限制，但作者鼓励你给慈善事业捐献。发布中有
关于如何捐款的文档。

更多详情请阅读:

    |copyright|

=============================================================================
 								*faq-2*
第二节 - 资源~

 								*faq-2.1*
2.1. 我去哪里可以学到更多关于 Vim 的知识？

你可以在 vim@vim.org 邮件列表发帖问 Vim 相关的问题。可以在 vim-dev@vim.org 邮
件列表发帖问关于 Vim 开发相关的问题。Vim 没有自己的新闻组，最合适发帖的新闻组
是 comp.editors。

"VimOnline" 网站是 vim 事实上的主页，不过其主要用途是收集来自各处的小窍门和脚
本。参与进来吧！URL 是 https://www.vim.org

还可以阅读 Vi 的常见问题解答:

    http://www.faqs.org/faqs/editor-faq/vi/part1/index.html

最后，还有若干社团，可以讨论功能或问问题:

    https://vi.stackexchange.com
    https://vim.reddit.com

更多详情请阅读:

    |mail-list|
    |internet|

 								*faq-2.2*
2.2. 有没有可用的邮件列表？

有好几个:

    名字              描述 ~
    ----------------  --------------------------------------------- ~
    vim-announce      新发布通告
    vim               通用讨论
    vim-dev           补丁、漏洞报告、开发讨论
    vim-mac           Macintosh 讨论
    vim-fr            法语的通用讨论

这里，一般人只有对 vim 和 vim-dev 感兴趣。vim-announce 对多数人是只读的，相关
消息也会发送到其它列表。其余四个流量都很小。

    动 作             邮 件 发 送 到 ~
    ----------------  -------------------------- ~
    要订阅:           <NAME>-subscribe@vim.org
    要退阅:           <NAME>-unsubscribe@vim.org
    要获得帮助:       <NAME>-help@vim.org

这里也提到可用的邮件列表:

    https://www.vim.org/maillist.php

 								*faq-2.3*
2.3. Vim 邮件列表有没有可用的归档？

有。访问 https://groups.yahoo.com/，其中组名是下列之一: vimannounce、vim、
vimdev、vim-fr、vim-mac、vim-vms。

或者，访问 www.gmane.org 了解一下 GNANE，可以像新闻组一样访问邮件列表。为浏览
历史或偶尔察看当前信息链提供了一些便利。

 								*faq-2.4*
2.4. 哪里可以找到 HTML/PDF/PS 格式的 Vim 用户手册？

可以在这里下载 HTML/PDF/PS 格式的 Vim 用户手册:

    https://vimdoc.sourceforge.net/

备注，此页的用户手册目前相当过时。最好使用 vim 自带的文档或使用在线版本
https://vimhelp.appspot.com

可以在这里找到完整英语帮助的 pdf 版本，包含本常见问题解答 (有 letter、A4 和
Ipad 格式):

    https://nathangrigg.com/vimhelp/

此文本有交叉引用，所以可用超链功能。

 								*faq-2.5*
2.5. 我有 Vim 上的 "xyz" (一些) 问题。如何判别是我个人设置的问题还是
	  Vim 的问题？/ 我是发现了 Vim 的漏洞吗？

首先你要确定错误来自实际运行文件、随 Vim 发布的插件，或仅仅是你自己的 .vimrc
或 .gvimrc 配置选项产生的副作用。所以首先，请这样启动 vim: >

    vim -u NONE -U NONE -N -i NONE
<
这会以非兼容方式 (-N)、跳过自己的 viminfo 文件 (-i NONE)、跳过任何配置文件 (-u
NONE 不读 .vimrc 文件，而 -U NONE 不读 .gvimrc 文件) 或插件来启动 Vim。

用此种调用方式来试图重现你的问题。如果错误还在，很有可能你确实发现了 Vim 的漏
洞 (另见问题 2.6. |faq-2.6|)

如果此种方式启动 Vim 后错误不再出现，问题或者和某些你的插件有关，或者和你本地
设置文件某些设置有关。需要找到是什么触发的错误，可以尝试这样启动 Vim: >

    vim -u NONE -U NONE -N
<
如果问题持续，问题就在 .viminfo 文件。简单删除 viminfo 文件就可以了。如果问题
不再发生，试试: >

    vim -u ~/.vimrc --noplugin -N -i NONE
<
这会简单地使用你的 .vimrc 作为配置文件，但不载入插件。如果问题这次出现了，错误
可能来自你的 .vimrc 文件的某些配置选项。取决于你 vimrc 文件的长度，发现文件中
问题的源头未必容易。

最好的方式是在 .vimrc 半中间加入 `:finish` 命令。用同样的命令行重启。如果错误
还是发生了，问题应是 .vimrc 前半部的某个设定。如是不是，问题设置必在 .vimrc 后
半部。所以移动 `:finish` 命令是已知触发问题那半部的中间位置，如此重复，直到你
找到问题选项为止。如果 .vimrc 有 350 行长，最多需要 9 次尝试就可以找到出问题的
行 (实际上，常常会少很多，因为行与行往往互相依赖)。

如果只载入 .vimrc 文件时问题不再出现，错误必来自某插件或另一个运行文件 (缩进自
动命令或语法脚本)。检查 `:scriptnames` 命令的输出，查看载入了什么文件，然后一
个一个关闭看看哪个会触发此漏洞。Vim 载入的文件常常有简单的配置变量可关闭之，但
需要你一个个分别查看文件内部以找到这些变量。

也可用 -V 命令行参数来取得更多调试信息来分析问题: >

    $ vim -V2logfile
<
可以增加传递给 -V 参数的值以得到更多调试信息。同时提供 logfile 文件名以确保调
试信息不出现在屏幕上，不干扰你试图重现问题的努力。


更多详情请阅读:

    |-u|
    |-U|
    |-N|
    |-V|
    |'verbose'|
    |:verbose|
    |:set-verbose|

 								*faq-2.6*
2.6. 我去哪里汇报漏洞？

首先用下面的命令收集所需的信息: >

    :source $VIMRUNTIME/bugreport.vim
<
现在把上述命令的结果文本发送给 bugs@vim.org e-mail 地址。还有一个公共漏洞跟踪
器: https://github.com/vim/vim/issues. 那里每个消息会转发给 Vim 开发列表。

Vim 开发邮件列表 (见问题 2.2 |faq-2.2|) 是个讨论一般漏洞的好去处。如果你发现的
漏洞和语法高亮、运行时文件、或其它一些 "附加特性"  (也就是，不直接编进 vim 程
序的) 有关，试试通知该特性的维护者。相应的运行时文件的顶部会提及他们的 e-mail
地址。

更多详情请阅读:

    |bug-reports|

 								*faq-2.7*
2.7. 哪里能找到本 FAQ？

本 FAQ 可在这里找到 https://vimhelp.appspot.com/vim_faq.txt.html。它从
https://www.github.com/chrisbra/vim_faq github 库管理的源码自动生成 (欢迎补
丁)。

此库也包含 faq 的多种格式，如 manpage、pdf 文件、html 文件、平凡文本和 vim 帮
助格式的版本。

VimOnline (https://www.vim.org/) 还可以找到一个稍老的版本 (看来不再有更新)。

 								*faq-2.8*
2.8. 在本 FAQ 找不到答案怎么办？

本 FAQ 主要覆盖 Vim 特定的问题。阅读 Vi FAQ 可以找到和大多数 Vi 克隆相关的更多
信息。在 comp.editors 上常有帖子。也可以在这里找到备份

    http://www.faqs.org/faqs/editor-faq/vi/part1/index.html

另外，既然 Vim 在过去几年收集如此众多的功能，要在这里成功地记录常见的问题是几
乎不可能的任务。要使之可能，如果你有好问题的话，请邮寄维护者。好问题是那些你试
图自己回答 (记住，Vim 有很好的文档) 但有困难的。

 								*faq-2.9*
2.9. 我有实现 Vim 某功能的补丁。如何发送补丁？

可以把您的补丁发送到 Vim 开发者邮件列表 vim-dev@vim.org。

更多详情请阅读:

    |vim-dev|

 								*faq-2.10*
2.10. 我有 Vim 的小窍门或开发了新的 Vim 语法/缩进/文件类型/编译器插件或开发了
      新脚本或色彩方案。有没有公共网站可以上传这些？

是的。可以在 Vim Online 网站上传你的插件/脚本，色彩方案等等。站址在
https://www.vim.org
现时人们也在 github 上分享他们的插件/运行时文件。

也可在 Wiki 上分享小窍门，地址在

    http://vim.wikia.com

=============================================================================
 								*faq-3*
第三节 - 如何获取 ~

 								*faq-3.1*
3.1. Vim 的最新版本是什么？

Vim 的最新版本是 8.2，2019 年 12 月 12 日发布。

Vim 不同版本的发布历史见下:

    版 本           发 布 日 期 ~
    --------------  -------------------- ~
    8.2 版本        2019 年 12 月 12 日
    8.1 版本        2018 年  5 月 17 日
    8.0 版本        2016 年  9 月 12 日
    7.4 版本        2013 年  8 月 10 日
    7.3 版本        2010 年  8 月 15 日
    7.2 版本        2008 年  8 月  9 日
    7.1 版本        2007 年  5 月 12 日
    7.0 版本        2006 年  5 月  8 日
    6.4 版本        2005 年 10 月 15 日
    6.3 版本        2004 年  6 月  8 日
    6.2 版本        2003 年  6 月  1 日
    6.1 版本        2002 年  3 月 24 日
    6.0 版本        2001 年  9 月 27 日
    5.8 版本        2001 年  5 月 31 日
    5.7 版本        2000 年  6 月 24 日
    5.6 版本        2000 年  1 月 16 日
    5.5 版本        1999 年  9 月 21 日
    5.4 版本        1999 年  7 月 26 日
    5.3 版本        1998 年  8 月 31 日
    5.2 版本        1998 年  8 月 24 日
    5.1 版本        1998 年  4 月  7 日
    5.0 版本        1998 年  2 月 19 日
    4.6 版本        1997 年  3 月 13 日
    4.5 版本        1996 年 10 月 17 日
    4.2 版本        1996 年  7 月  5 日
    4.0 版本        1996 年  5 月 29 日
    3.0 版本        1994 年  8 月 12 日
    2.0 版本        1993 年 12 月 21 日
    1.27 版本       1993 年  4 月 23 日
    1.17 版本       1992 年  4 月 21 日
    1.14 版本       1991 年 11 月  2 日

如果你对旧发布历史感兴趣，请查看 vim-history git 库:
https://github.com/vim/vim-history
特别是发布历史:
https://github.com/vim/vim-history#release-history

更多详情请阅读:

    |new-8|
    |new-7|
    |new-6|
    |new-5|
    |chnaged-8.2|
    |changed-8.1|
    |changed-7.4|
    |changed-7.3|
    |changed-7.2|
    |changed-7.1|

 								*faq-3.2*
3.2. 哪里可以找到最新的 Vim 版本？

可以从 Github 库中下载 Vim 最新版的源码。该站的 URL 是

    https://github.com/vim/vim

也有 mercurial 镜像:

    https://bitbucket.org/vim-mirror/vim
    http://hg.256bit.org/vim/
    https://hg.osdn.net/view/vim/vim

有些用户维护用于发布最新 Vim 执行程序的更新库。可以从此找到这些库:

    http://vim.wikia.com/wiki/Where_to_download_Vim

 								*faq-3.3*
3.3. 它在什么平台上运行？

所有的 Unix 平台。
所有的 Windows 平台 (XP 和之后)。
Amiga、Atari、BeOS、Macintosh、MachTen、OS/2、RiscOS、VMS、IBM z/OS。

最新发布的 Vim 已经删除了 MS-DOS 的支持。
16-位 DOS: 最后的支持版本是 7.1
32-位 DOS: 最后的支持版本是 7.3

 								*faq-3.4*
3.4. 哪里可以下载最新版本的 Vim 的运行时文件？

可以从 Vim github 库下载最新版本的 Vim 运行时文件 (语法文件、文件类型插件、编
译器文件、色彩方案、文档、缩进文件和键盘映射)

    https://github.com/vim/vim/tree/master/runtime

另一个下载运行时文件的方法是: >

    wget https://github.com/vim/vim/archive/master.tar.gz -O- |
    tar zfx - vim-master/runtime/ --strip-components=1
<
另见:

    https://www.vim.org/runtime.php

=============================================================================
 								*faq-4*
第四节 - 帮助~

 								*faq-4.1*
4.1. 如何使用帮助文件？

Vim 所有的功能都能找到帮助。要得到帮助，可用 `:help` 命令。这会把你带到主帮助
页面。在该首页上，可以找到如何到处移动的说明。基本上，帮助页相当于在只读文档上
的移动。可以使用标签跳转到指定主题上。有两种方法:

   * 在命令或选项名之上用 CTRL-] 命令。只有标签为关键字时才可以用。
     <Ctrl-LeftMouse> 和 g<LeftMouse> 相当于 CTRL-]。

   * 使用 `:tag <subject>` 命令。可用于所有字符。

CTRL-T 跳回帮助文件中的原来的地方。`:q` 关闭帮助窗口。

如果你要跳转到帮助页上的特定主题，可用 `:help {subject}`。如果不知道找什么，试
试 `:help index` 来得到所有可用主题的列表。标准的搜索键可用于定位要找的信息。
`:help` 命令可简化为 `:h`。

要搜索帮助，见下个问题 4.2。|faq-4.2|

更多详情请阅读:

    |online-help|

 								*faq-4.2*
4.2. 如果在 Vim 帮助文件中搜索某关键字？

a)  在输入 help 关键字后按 CTRL-D 键可以得到包含指定模式的所有帮助关键字的列
    表。可用元字符如 *、\+ 等来指定帮助搜索模式: >

    :help init<C-D>
    :help str*()<C-D>
    :help '*indent<C-D>
<
b)  在输入部分的帮助关键字后按 <Tab> 键可扩展匹配的关键字。继续按 <Tab> 键可以
    得到其它的关键字匹配。

c)  从帮助窗口，用 `:tag` 命令可以搜索关键字。例如， >

    :tselect /window
<
    此命令会列出所有包含文本 "windows" 的帮助关键字。从列表中可以选择一个并跳
    转过去。

d)  可用 `:helpgrep` 命令在所有帮助文件中搜索给定文本。打开快速修复窗口显示所
    有匹配行。

更多详情请阅读:

    |help-summary|
    |c_CTRL-D|
    |c_<Tab>|
    |:tselect|
    |:help|
    |:helpgrep|

 								*faq-4.3*
4.3. 我得到了错误信息 E123，我做错什么了？

可以用下面的帮助链接了解错误的相关情况和错误信息:

    |E123|

更多详情请阅读:

    |error-messages|

 								*faq-4.4*
4.4. 在哪里可以了解 Vim 的各种模式？

通过阅读下面的帮助链接可以了解 Vim 中不同模式的信息

    |vim-modes|

 								*faq-4.5*
4.5. 加入新 Vim 帮助文件后，如何生成 Vim 帮助标签文件呢？

可在 Vim 内部用 `:helptags` 命令来重新生成 Vim 帮助标签文件。例如: >

    :cd $VIMRUNTIME/doc
    :helptags .
<
要刷新所有 'runtimepath' 下的 "doc" 目录，可用 >

    :helptags ALL

更多详情请阅读:

    |:helptags|
    |add-local-help|

 								*faq-4.6*
4.6. 可以用帮助文件的压缩版本吗？

可以。可以压缩帮助文件，然后在 Vim 中还可以阅读。帮助文件的访问会稍慢一些，也
需要 "gzip" 工具。以下步骤可以压缩并使用 Vim 帮助文件:

- 用 "gzip doc/*.txt" 压缩所有帮助文件。

- 编辑 "doc/tags" 文件，这样来把 ".txt" 改成 ".txt.gz" >
        :%s=\(\t.*\.txt\)\t=\1.gz\t=

- 在 vimrc 中加入下行: >
        set helpfile={dirname}/help.txt.gz

其中 {dirname} 是帮助文件所在的目录。Vim 标准发布自带的 gzip.vim 插件会处理文
件的解压。要确保设好 $VIMRUNTIME 以指向那些和经压缩的 "doc" 目录不在相同位置的
其它 Vim 文件。

注意，`:helpgrep` 命令不支持压缩帮助页。

更多详情请阅读:

    |gzip-helpfile|
    |'helpfile'|
    |gzip|
    |$VIMRUNTIME|

=============================================================================
 								*faq-5*
第五节 - 编辑文件~

 								*faq-5.1*
5.1. 如何在 Vim 中载入文件用于编辑？

有几种载入文件用于编辑的方法。最简单的方法是用 `:e` (:edit) 命令: >

    :e <filename>
<
也可用 `:n` (:next) 命令来载入文件到 Vim 里: >

    :n <filename(s)>
<
也可用 `:args` 命令来载入文件到 Vim 里: >

    :args <filename(s)>
<
更多详情请阅读:

    |usr_07.txt|
    |edit-files|
    |:edit|
    |:next_f|
    |:args_f|

 								*faq-5.2*
5.2. 如何把当前文件丰用其它名字保存 (另存为) 并编辑新文件？

`:saveas` 命令可用其它名字来保存当前文件: >

    :saveas <newfilename>
<
此外，也可用以下命令: >

    :w <newfilename>
    :edit #
<
也可用 `:file` 命令，后面跟 `:w` 命令: >

    :file <newfilename>
    :w
<
更多详情请阅读:

    |07.7|
    |:saveas|
    |:file_f|
    |:w|

 								*faq-5.3*
5.3. 如何改变当前目录为当前文件的目录？

可以用下列命令来改变当前目录为当前文件的目录: >

    :cd %:p:h
<
要自动改变当前目录为当前文件的目录，简单地置位选项 'autochdir'。 >

    :set autochdir
<
更多详情请阅读:

    |:cd|
    |:lcd|
    |filename-modifiers|
    |autocommand|
    |'acd'|
    |getcwd()|

 								*faq-5.4*
5.4. 如何在写入文件时不在文件尾加上换行符 (EOL)？

可以关闭 'eol' 选项并打开  'binary' 选项来，这样在写入文件时就不会在文件尾加上
EOL: >

    :set binary
    :set noeol
    :w
<
此外，可用: >

    :set noeol
    :w ++bin
<
如果你宁可 Vim 不写入缺少的 EOL，可以复位 'fixeol' 选项。这需要 Vim 版本新过
7.4.785，所以可以这样在 .vimrc 里把它包装在 if 条件句里: >

    if exists('+fixeol')
        set nofixeol
    endif
<
这样做还有避免 'binary' 选项许多副作用的好处。

更多详情请阅读:

    |'endofline'|
    |'fixeol'|
    |'binary'|
    |23.4|

 								*faq-5.5*
5.5. 如何配置 Vim 打开文件时回到之前编辑所在的位置？

Vim 在 '"' 寄存器中保存每个缓冲区上次编辑所在的光标位置。可以在 .vimrc 或
.gvimrc 文件中使用以下自动命令，在之前绞架所在的位置上打开文件: >

    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
                         \ exe "normal! g`\"" | endif
<
此外，也可以简单地执行随 Vim 发布的 vimrc_example.vim 文件。

更多详情请阅读:

    |'quote|
    |last-position-jump|
    |vimrc_example.vim|

 								*faq-5.6*
5.6. 在 Vim 中编辑文件时，文件被外部应用修改了，每次检测到改变发生时， Vim 都
     会弹出警告窗口 (像确认对话框)。如果屏蔽此警告？

可用 Vim 的 'autoread' 选项来在 Vim 之外改动了文件后自动重新读入文件: >

    :set autoread
<
也可用以下自动命令: >

    autocmd FileChangedShell *
          \ echohl WarningMsg |
          \ echo "文件在 vim 之外被修改了。" |
          \ echohl None
<
更多详情请阅读:

    |'autoread'|
    |FileChangedShell|
    |timestamp|
    |:checktime|

 								*faq-5.7*
5.7. 如何编辑光标所在的文件名对应的文件？

可用 gf 命令来编辑光标所在的名字对应的文件。
可用 CTRL-W f 命令来在新窗口中编辑文件，
最后可用 CTRL-W gf 来打开新标签页以包含光标所在的文件名。

更多详情请阅读:

    |gf|
    |CTRL-W_f|
    |CTRL-W_gf|
    |'isfname'|
    |'path'|
    |'suffixesadd'|
    |'includeexpr'|

 								*faq-5.8*
5.8. 如何重载/重新编辑当前文件？

你可以使用不指定文件名的  `:edit` 命令来重载当前文件。如果此文件有修改，可用
`:edit!` 来强制当前文件的重载 (会丢失你的修改，但取决于你的 'undoreload' 设
置，这些修改可能已经在撤销历史中保存)。

更多详情请阅读:

    |:edit|
    |:edit!|
    |'confirm'|
    |'undoreload'|

 								*faq-5.9*
5.9. 如何周期性地自动保存文件？

Vim 不支持周期性地自动保存文件。

更多详情请阅读:

    |'updatetime'|
    |CursorHold|
    |swap-file|

 								*faq-5.10*
5.10. 如何以只读方式打开文件？

可用 `:view` 命令以只读方式打开文件: >

    :view <filename>
<
此命令为打开的缓冲区置位 'readonly' 选项。也可用 "-R" 命令行选项来以只读方式打
开文件: >

    $ vim -R <filename>
<
也可用符号链接可行程序 "view" 来从命令行以只读方式打开文件: >

    $ view <filename>
<
更多详情请阅读:

    |07.6|
    |'readonly'|
    |'modifiable'|
    |:view|
    |:sview|
    |view|
    |-R|
    |-M|

 								*faq-5.11*
5.11. 如何打开文件用于编辑而不保存当前文件的修改？

可用以下方法之一来打开文件用于编辑而不保存当前文件的修改也不会丢失改动: >

    :split <new_filename>
    :new <new_filename>
<
也可置位 'hidden' 选项并编辑新文件: >

    :set hidden
    :e <new_filename>
<
如果你要放弃当前文件所作的改动并载入另一个文件用于编辑，可用以下命令: >

    :e! <new_filename>
<
更多详情请阅读:

    |:edit!_f|
    |'hidden'|
    |:split|
    |:new|

 								*faq-5.12*
5.12. 如何减少 Vim 中超大文件的载入时间？

可用以下设置来减少 Vim 中超大文件的载入时间: >

    :set lazyredraw
    :set noswapfile
    :set undolevels=-1
    :set eventignore=all
    :set nohidden
    :set syntax=off
<
注意 上述设置会关闭许多 Vim 特性，包含以下这些: 用于从崩溃中恢复的交换文件支
持，撤销支持，语法高亮、文件类型检测和其它基于自动命令的特性。

也有一个 LargeFile 插件，可在这里找到

    https://www.vim.org/scripts/script.php?script_id=1506

它会自动在处理大文件 (可配置多大算做大文件，缺省是 100MB) 时设置这些选项。

=============================================================================
 								*faq-6*
第六节 - 编辑多个文件~

 								*faq-6.1*
6.1. 在 Vim 里如何一次打开多个文件？

先区别一下参数、缓冲区、标签页和窗口。Vim 里这些是不同的概念。

参数是命令行参数的列表。缓冲区是编辑文本的地方，几乎总是和文件捆绑在一起，但也
不一定。窗口是缓冲区放置的地方而标签页是一组窗口，"布局" 可能是更好的名字。

有几个方法可以在 Vim 里一次打开多个文件。可用 `:next` 命令来指定一组文件: >

    :next f1.txt f2.txt
    :next *.c
<
可用 `:args` 命令来指定一组文件作为参数: >

    :args f1.txt f2.txt
    :args *.c
<
载入文件后，可用 `:next` 和 `:prev` 命令在文件间切换。

要为参数列表中的所有文件执行命令，可用 `:argdo`

更多详情请阅读:

    |07.2|
    |:next|
    |:args_f|
    |argument-list|

 								*faq-6.2*
6.2. 在 Vim 里如何在多个文件/缓冲区间切换？

用 `:ls` 列出所有的缓冲区，用 `:ls!` 列出没有相关联文件的缓冲区 (亦: 列表外缓
冲区，如草稿缓冲区和帮助窗口)。

有几种方法可以在多个文件中切换。用 `:buffer` 命令来在多个文件间切换。也可简写
为 `:b` 并只用部分文件名。例如 >

    :buffer file1
    :buffer file2
    :b e2
<
也可在 `:b` 后用 <TAB> 自动补全。也试试 `:b` 后跟 CTRL-D 也看到所有可用的缓冲
区。这也适用于 `:e`。

也可用 CTRL-^ 键在缓冲区间切换。按此键前如指定计数，可编辑带此号码的缓冲区。如
果没有计数，CTRL-^ 可用来编辑轮换缓冲区。

也可用 `:e #` 命令来编辑特定缓冲区: >

    :e #5
<
用 `:bd ` 命令来关闭缓冲区。

可用 `:bufdo` 来为缓冲区列表中的所有文件执行命令。

更多详情请阅读:

    |edit-files|
    |:buffer|
    |CTRL-^|
    |alternate-file|
    |22.4|
    |07.3|

 								*faq-6.3*
6.3. 在 Vim 里如何件在单独的窗口/标签页打开多个文件？

可用 -o 和 -O 命令行参数来在水平或垂直分割的 Vim 窗口中分别打开多个文件。例
如: >

    $ vim -o3 f1.txt f2.txt f3.txt
<
上述命令会在三个水平分割的 Vim 窗口中分别打开文件 f1.txt、f2.txt 和 f3.txt。 >

    $ vim -O3 f1.txt f2.txt f3.txt
<
上述命令会在三个垂直分割的 Vim 窗口中分别打开文件 f1.txt、f2.txt 和 f3.txt。 >

    $ vim -p f1.txt f2.txt f3.txt
<
上述命令会在三个标签页中分别打开文件 f1.txt、f2.txt 和 f3.txt。 'tabpagemax'
选项定义一次最多能打开多少个标签页，缺省是 10 个。

更多详情请阅读:

    |-o|
    |-O|
    |-p|
    |startup-options|
    |'tabpagemax'|

 								*faq-6.4*
6.4. 如何配置 Vim 可以一次自动载入若干文件，类似于 "工作集" 或 "项目"？

可用 `:mksession` 和 `:mkview` 命令在 Vim 里自动载入若干文件。

`:mksession` 命令创建 Vim 脚本用来恢复当前编辑的会话。可用 `:source` 命令来执
行 mksession 命令生成的文件。

`:mkview` 命令创建 Vim 脚本用来恢复当前窗口的内容。可用 `:loadview` 命令来载入
当前文件的视图。

更多详情请阅读:

    |21.4|
    |21.5|
    |views-sessions|
    |'sessionoptions'|
    |:mksession|
    |:source|
    |v:this_session|
    |:mkview|
    |:loadview|
    |'viewdir'|
    |buffers|

 								*faq-6.5*
6.5. 可以打开在单个 Vim 实例中打开多个顶层窗口，就像 Nedit 或 emacs 那样吗？

不行。目前不可能在单个 Vim 实例中打开多个顶层窗口。此功能还在待开发列表中。

 								*faq-6.6*
6.6. 如何在 Vim 内浏览/探索目录？

在 Vim 内，可用标准 Vim 安装提供的 netrw.vim 插件来浏览/探索目录。可用以下命令
之一来启动文件探索器: >

    :e <directory>
    :Explore
    :Sexplore
    :Vexplore
    :Texplore
<
从文件探索器出发，可以浏览目录，换名、删除和编辑文件。

更多详情请阅读:

    |netrw.vim|
    |22.1|

 								*faq-6.7*
6.7. 如何用 ftp/scp/rcp/http 通过网络编辑文件？

标准 Vim 软件包提供的 netrw.vim 插件来用 ftp/scp/rcp/http 通过网络编辑文件。使
用此插件，Vim 会自己用 ftp/scp/rcp/http 透明地载入和保存文件。例如，要通过 ftp
编辑文件，可用以下命令: >

    $ vim ftp://machine/path
<
更多详情请阅读:

    |netrw.vim|

=============================================================================
 								*faq-7*
第七节 - 备份~

 								*faq-7.1*
7.1. 我在编辑和保存文件的时候，Vim 创建了和原先文件名字相同但尾部附加了 "~" 字
     符的文件。我怎么能不让 Vim 建立这个文件 (或) 我怎样能关闭 Vim 的备份文件
     功能？

你置位了 'backup' 选项，因而 Vim 在保存原始文件的同时创建了备份文件。要让 Vim
不再创建备份文件，清除该选项: >

    :set nobackup
<
注意 缺省此选项是关闭的。你一定在某个初始化文件中打开了 'backup' 选项。可能也
需要关闭 'writebackup' 选项: >

    :set nowritebackup
<
更多详情请阅读:

    |07.4|
    |backup-table|
    |'backup'|
    |'writebackup'|
    |'backupskip'|
    |'backupdir'|
    |'backupext'|
    |'backupcopy'|
    |backup|

 								*faq-7.2*
7.2. 我在编辑和保存文件的时候，Vim 创建了和原先文件名字相同但尾部附加了 ".un~"
     扩展名的文件。我怎么能不让 Vim 建立这个文件 (或) 我怎样能关闭 Vim 的撤销
     文件功能？

Vim 7.3 包含了持续撤销的新功能，也就是说，撤销信息在 Vim 退出后不会丢失，而是
保存在了 ".un~" 结尾的文件中。你一定置位了 'undofile' 选项，因而 Vim 在保存原
始文件的同时创建了撤销文件。要让 Vim 不再创建撤销文件，清除该选项: >

    :set noundofile
<
注意 缺省此选项是关闭的。你一定在某个初始化文件中打开了 'undofile' 选项。如果
希望你的撤销文件保存在指定的目录里，可以把 'undodir' 选项指向到一个目录，里面
会包含所有你的放在一起的撤销文件。

更多详情请阅读:

    |'undodir'|
    |'undofile'|
    |undo-persistence|

 								*faq-7.3*
7.3. 如果配置 Vim 在指定目录保存所有的备份文件？

可用 'backupdir' 选项配置 Vim 在指定目录保存所有的备份文件。例如，要把所有的备
份文件保存到 ~/backup 目录，可用以下命令: >

    :set backupdir=~/backup
<
更多详情请阅读:

    |07.4|
    |'backupdir'|
    |backup|

 								*faq-7.4*
7.4. Vim 保存文件时，文件的权限被改变了。如果配置 Vim 在文件保存时不改变文件权
     限？

这可能发生在 'backupcopy' 选项设为 "no" 或 "auto" 的时候。注意 此选项的缺省值
设置在多数情况下会正确工作。如果缺省对你不够用，试试设置 'backupcopy' 选项为
"yes" 以在保存文件时保留文件权限: >

    :set backupcopy=yes
<
仅当 Vim 的配置是无论何时覆盖文件都会建立备份文件的时候，此选项才有用。缺省，
Vim 并不备份文件。

更多详情请阅读:

    |'backupcopy'|
    |backup|
    |'backup'|
    |'writebackup'|

=============================================================================
 								*faq-8*
第八节 - 缓冲区~

 								*faq-8.1*
8.1. 我在缓冲区上做了修改。如何才能编辑另一个缓冲区而无需保存修改过的缓冲区也
     不会丢失我的改动？

可置位 'hidden' 选项来编辑文件而不会丢失当前文件上的修改: >

    :set hidden
<
通过置位 'hidden' 选项，你也继续保存缓冲区的修改历史 (撤销历史)。否则，文件间
切换时会丢失撤销历史 (除非使用了持续撤销文件)。

更多详情请阅读:

    |'hidden'|
    |hidden-quit|
    |:hide|

 								*faq-8.2*
8.2. 如何配置 Vim 在切换到其它缓冲区时自动保存修改过的缓冲区？

可置位 'autowrite' 选项，在切换到其它缓冲区时自动保存修改过的缓冲区: >

    :set autowrite
<
更多详情请阅读:

    |'autowrite'|
    |'autowriteall'|
    |'hidden'|

 								*faq-8.3*
8.3. 如何用空缓冲区来替换当前窗口的缓冲区？

可用 `:enew` 命令来载入空缓冲区以替换当前窗口的缓冲区。

更多详情请阅读:

    |:enew|

 								*faq-8.4*
8.4. 有没有用缓冲区号载入缓冲区的快捷键？

可用 CTRL-^ 命令来通过指定缓冲区号载入缓冲区。例如，要载入缓冲区号 5，要用 5
CTRL-^ 命令。

更多详情请阅读:

    |CTRL-^|

 								*faq-8.5*
8.5. 如何在不同的窗口分别打开当前所有的缓冲区？

可用 `:ball` 或 `:sball` 命令来打开缓冲区列表中的所有列表: >

    :ball
<
如果想所有的缓冲区在新标签页中打开，简单加上 `:tab` 命令前缀: >

    :tab :sball
<
更多详情请阅读:

    |:ball|

 								*faq-8.6*
8.6. 如何关闭 (删除) 缓冲区而不退出 Vim？

可用 `:bdelete`、`:bwipeout` 或 `:bunload` 命令中的一个来删除缓冲区而不退出
Vim。例如: >

    :bdelete file1
<
更多详情请阅读:

    |:bdelete|
    |:bwipeout|
    |:bunload|

 								*faq-8.7*
8.7. 用命令 `:%bd` 删除所有缓冲区时，不是所有的缓冲区都删除了。为什么？

用 `:%bd` 命令时，"%" 范围会被当前缓冲区的起末行号代替。不要用 "%" 作为范围，
而应该指定数值作为范围。例如，要删除所有的缓冲区，可用命令 `:1,9999bd`。

更多详情请阅读:

    |:bd|

(7.4.530 补丁修正了此行为)

 								*faq-8.8*
8.8. 如何显示当前缓冲区/文件的缓冲区号？

可用 2<CTRL-G> 命令来显示当前文件/缓冲区的缓冲区号。注意 CTRL-G 命令计数的使
用。如果计数大于 1，Vim 会显示缓冲区号。

也可用下列命令来显示当前缓冲区号: >

    :echo bufnr("%")
<
也可在 'statusline' 选项中加入 "%n" 域来在状态行上显示当前缓冲区号。

更多详情请阅读:

    |CTRL-G|
    |bufnr()|
    |:echo|
    |'statusline'|

 								*faq-8.9*
8.9. 如何删除缓冲区而不关闭显示该缓冲区的窗口？

可用下列命令来打开下个缓冲区并删除当前缓冲区。 >

    :bnext | bdelete #
<
更多详情请阅读:

    |:bnext|
    |:bdelete|
    |:buffers|

 								*faq-8.10*
8.10. 如何映射 <Tab> 键来循环并打开所有缓冲区？

可用下列两个映射命令来映射 <Ctrl-Tab> 键来打开后一个缓冲区，<Ctrl-Shift-Tab>
键来打开前一个缓冲区: >

    :nnoremap <C-Tab> :bnext<CR>
    :nnoremap <S-C-Tab> :bprevious<CR>
<
注意，这不能用于 Vim 终端版本。

更多详情请阅读:

    |:bnext|
    |:bprevious|

=============================================================================
 								*faq-9*
第九节 - 窗口~

 								*faq-9.1*
9.1. Vim 窗口和缓冲区的区别是什么？

Vim 缓冲区是载入内存用于编辑的文件。原始文件保留不变，直到你把缓冲区写回文件为
止。Vim 窗口是缓冲区的投影视窗。同一个缓冲区可用多个窗口，也可为不同缓冲区用多
个窗口。

更多详情请阅读:

    |usr_08.txt|
    |22.4|
    |windows-intro|
    |Q_wi|

 								*faq-9.2*
9.2. 如何增加 Vim 窗口的宽度？

用下列命令之一可增加 Vim 窗口的宽度: >

    :vert resize +N
    :vert resize -N
    :vert resize N
<
也可用 CTRL-W < 或 CTRL-W > 或 CTRL-W | 命令。

更多详情请阅读:

    |:vertical-resize|
    |CTRL-W_>|
    |CTRL-W_<|
    |window-resize|

 								*faq-9.3*
9.3. 如何放大或缩小窗口？

可用 "<CTRL-W>o" 命令或 `:only` ex 命令来放大窗口 (关闭除了当前窗口以外的其它
窗口)。

可用 "<CTRL-W>_" 命令或 `:resize` ex 命令来在不关闭其它窗口的前提下尽量增加当
前窗口的高度。

可用 "<CTRL-W>|" 命令或 `:vertical resize` ex 命令来在不关闭其它窗口的前提下尽
量增加当前窗口的宽度。

可用 "<CTRL-W>=" 命令使所有窗口等高等宽。

可设置下列选项来使上述命令的效果更佳:

方法 1:
设置 'winminheight' 选项为 0: >

    :set winminheight=0
<
缺省，此选项设为 1。
此选项控制非激活窗口 (亦即非当前窗口) 的最小高度。'winminheight' 选项设为 0
时，非激活窗口仅显示状态行。

方法 2:
设置 'noequalalways' 选项并设 'winheight' 选项为很大的值 (比如 99999): >

    :set noequalalways
    :set winheight=99999
<
现在，激活的窗口会打开到最大尺寸，而其它窗口保持可见但缩小到只有状态行。

使用上面提到的一个方法放大窗口后不能恢复窗口布局。如果在放大窗口后还想恢复 Vim
的窗口布局，可用 ZoomWin 插件。可从 Vim online 网站下载此插件:

    https://www.vim.org/scripts/script.php?script_id=508

更多详情请阅读:

    |CTRL-W_o|
    |window-resize|
    |'winminheight'|
    |'equalalways'|
    |'winheight'|
    |08.3|

 								*faq-9.4*
9.4. 如何在所有打开的缓冲区或打开的窗口或参数列表的所有文件上执行 ex 命令？

可用 `:bufdo` 命令为所有打开的缓冲区执行 ex 命令。可用 `:windo` 命令为所有打开
的窗口执行 ex 命令。可用 `:argdo` 命令为参数列表指定的所有文件执行 ex 命令。最
后，可用 `:tabdo` 命令为所有打开的标签页执行 ex 命令。

更多详情请阅读:

    |:windo|
    |:bufdo|
    |:argdo|
    |:tabdo|
    |26.3|

=============================================================================
 								*faq-10*
第十节 - 动作~

 								*faq-10.1*
10.1. 如何跳到文件的开头 (首行) 或尾部 (末行)？

可用 "G" 命令来跳转到文件的末行，而用 "gg" 命令来跳转到文件的首行。

更多详情请阅读:

    |G|
    |gg|

 								*faq-10.2*
10.2. 插入模式下，按 <Esc> 键回到命令模式时，光标向左移了一个字符 (除了光标在
      行首以外)。可以改变此行为来保持光标在同一列上吗？

不行。不能改变此行为。光标总是留在合法的字符上 (除非打开了虚拟编辑模式)。所
以，如果在行尾附加文本，返回命令模式时光标_必须_退回到输入的末字符上。为统一起
见，光标不管在哪里，即使你在行的中间，都会退回。

插入模式下，可用 CTRL-O 或 CTRL-\ CTRL-O 命令执行单个 ex 命令并返回到插入模式
而不移动光标列。

更多详情请阅读:

    |'virtualedit'|
    |i_CTRL-O|
    |i_CTRL-\_CTRL-O|

 								*faq-10.3*
10.3. 如何配置 Vim 在用 <Page Up>、<Page Down> 等键滚动时保持水平光标位置？

可复位 'startofline' 选项来使文本滚动时保持光标水平位置不变: >

    :set nostartofline
<
更多详情请阅读:

    |'startofline'|

 								*faq-10.4*
10.4. 文件中的有些行超过屏幕宽度而被回绕。用 j、k 键从一行移到下一行时光标移动
      到文件的下一行而不是屏幕的下一行。如何才能移动到下一屏幕行？

可用 gj 和 gk 命令来从一屏幕行移到后/前一个屏幕行。j 和 k 命令移动光标从一文件
行到后/前一个文件行。复位 'wrap' 选项可避免行回绕: >

    :set nowrap
<
更多详情请阅读:

    |gj|
    |gk|
    |'wrap'|

可用以下映射: >

    :map <Up> gk
    :imap <Up> <C-o>gk
    :map <Down> gj
    :imap <Down> <C-o>gj
    :noremap j gj
    :noremap k gk
<
 								*faq-10.5*
10.5. 句子、段落和小节的定义是什么？

一个句子以 '.'、'!' 或者 '?' 结尾并紧随着一个换行符、一个空格 (或两个) 或者制
表符。哪个字符和几个空格算作句尾由 'joinspaces' 和 'cpoptions' 选项。

一个段落以每个空行或段落宏命令开始，段落宏由 'paragraphs' 选项里成对出现的字符
所定义。

一个小节以每个首列出现的换页符 (<C-L>) 或小节宏命令开始。小节宏由 'sections'
选项里成对出现的字符所定义。

更多详情请阅读:

    |sentence|
    |'joinspaces'|
    |'cpoptions'|
    |paragraph|
    |section|
    |word|

 								*faq-10.6*
10.6. 如何跳转到句子、段落或小节的头部或尾部？

用下列动作命令跳转到句子、段落或小节的头部或尾部:

      动作    位置        哪里 ~
      ------  ---------   ----------------- ~
      (       头部        当前句子
      )       尾部        当前句子
      {       头部        当前段落
      }       尾部        当然段落
      []      尾部        前一小节
      [[      头部        当前小节
      ][      尾部        当前小节
      ]]      头部        后一小节

每个动作可以前导一个数值，会延展往前或往后的跳转。

更多详情请阅读:

    |object-motions|

 								*faq-10.7*
10.7. 我有延伸到屏幕右端之外的文件行。如何往右移动 Vim 视图来看到原来不在屏幕
      上的文本？

可用下列命令之一来横向往左或右滚动屏幕:

    命令 滚动到~
    ---  -------------------------- ~
    zl   往左滚动
    zh   往右滚动
    zL   往左半个屏幕宽度
    zH   往右半个屏幕宽度
    zs   滚动使光标位于屏幕开始的开始位置
    ze   滚动使光标位于屏幕开始的结束位置

可用 g0 命令移动光标到屏幕行的首个字符，而 g$ 命令移动光标到屏幕行的末个字符。
两者都不滚动屏幕。

更多详情请阅读:

    |scroll-horizontal|

 								*faq-10.8*
10.8. 如何同时滚动两或多个缓冲区？

可为每个缓冲区置位 'scrollbind' 选项来同时滚动这些缓冲区。

更多详情请阅读:

    |'scrollbind'|
    |scroll-binding|
    |'scrollopt'|
    |'cursorbind'|

 								*faq-10.9*
10.9. 用光标键时，Vim 改变了模式，在文档中插入奇怪的字符，但不正确地移动光标。
      怎么啦？

有几个可能性: 或者你在慢速连接上使用 Vim，或者 Vim 不识别你键盘生成的键序列。

如果你在用慢速连接 (例如 2400 bps modem)，可以试试置位 'timeout' 或 'ttimeout'
选项。这些选项加上 'timeoutlen' 和 'ttimeoutlen' 选项可能可以解决问题。

如果 Vim 不能识别你的终端发送的键代码，上面的步骤可能没用。为此，最好的选择是
把你的键序列映射到对应的光标移动命令上，并把这些映射保存到某个文件。每次使用该
终端时用 `:source` 这个文件。

更多详情请阅读:

    |'timeout'|
    |'ttimeout'|
    |'timeoutlen'|
    |'ttimeoutlen'|
    |:map|
    |vt100-cursor-keys|

 								*faq-10.10*
10.10. 如何配置 Vim 当光标在行首而按左键时，移动光标到前行的行尾？

可为 'whichwrap' 选项加上 "<" 标志位，来配置 Vim 当光标在行首而按左键时，移动
光标到前行的行尾: >

    :set whichwrap+=<
<
类似地，当光标在行尾而按右键时，要移动光标到后行的行首，可为 'whichwrap' 选项
加上 ">" 标志位: >

    :set whichwrap+=>
<
上述设定只可用于普通和可视模式。要在插入和替换模式下也如此，分别加入 "[" 和
"]" 标志位。

更多详情请阅读:

    |'whichwrap'|
    |05.7|

 								*faq-10.11*
10.11. 如何配置 Vim 只留在插入模式 (无模式编辑)？

可置位 'insertmode' 选项来配置 Vim 只留在插入模式: >

    :set insertmode
<
置位该选项可把 Vim 作为无模式的编辑器来使用。如果按了 <Esc> 键，Vim 不会转入普
通模式。要执行单个普通模式命令，可按 CTRL-O 后跟普通模式命令。可执行多于一个普
通模式命令，可用 CTRL-L 后跟那些命令。然后用 <Esc> 键返回插入模式。要关闭此选
项，复位 'insertmode' 选项: >

    :set noinsertmode
<
也可用 "evim" 命令或 "vim -y" 来作为无模式编辑器启动 Vim。

也可用 `:startinsert` ex 命令以插入模式启动 Vim。

更多详情请阅读:

    |'insertmode'|
    |:startinsert|
    |:stopinsert|
    |i_CTRL-O|
    |i_CTRL-L|
    |evim|
    |evim-keys|

 								*faq-10.12*
10.12. 滚动文本时如何显示若干上下文？

可设置 'scrolloff' 选项来控制在光标上方和下方显示的最少的屏幕行数 (上下文)。 >

    :set scrolloff=10
<
更多详情请阅读:

    |'scrolloff'|
    |'sidescrolloff'|

 								*faq-10.13*
10.13. 如何回到之前的光标位置？

可用 '' 或 `` 命令回到上次跳转之前的光标位置。CTRL-O 命令会回到跳转列表中更老
的光标位置，而 CTRL-I 命令会跳到跳转列表中更新的光标位置。

更多详情请阅读:

    |03.10|
    |mark-motions|
    |jump-motions|

=============================================================================
 								*faq-11*
第十一节 - 搜索文本~

 								*faq-11.1*
11.1. 用模式搜索文本后，所有匹配的文本保持高亮。如何临时/永久关闭高亮？

'hlsearch' 选项控制是否高亮前次搜索模式所有的匹配。缺省，此选项不打开。如果系
统范围的 vimrc 文件置位了此选项，可用以下命令关闭搜索高亮: >

    :set nohlsearch
<
要临时关闭搜索高亮，可用 >

    :nohlsearch
<
也可用搜索当前文件不存在的模式来清除搜索高亮 (例如，搜索模式 "asdf")。

用下面的映射在 CTRL-L 重画窗口时同时会清除搜索高亮 >

    :nnoremap <silent> <C-L> <C-L>:nohls<CR>
<
更多详情请阅读:

    |'hlsearch'|
    |:nohlsearch|

 								*faq-11.2*
11.2. 如何在搜索模式中输入回车字符？

可用 "\r" 或 <CTRL-V><CTRL-M> 来在模式中输入回车。在 Vim 脚本里，用 "\r" 代表
回车字符更好。

更多详情请阅读:

    |sub-replace-special|

 								*faq-11.3*
11.3. 如何搜索字符 "^M"？

在搜索命令中可先按 CTRL-V 键再按 CTRL-M 键来输入 ^M 字符。 >

    /^V^M
<
也可用 "\r" 字符。在 Vim 脚本 里，建议使用 "\r"。

更多详情请阅读:

    |c_CTRL-V|
    |using_CTRL-V|
    |/\r|

 								*faq-11.4*
11.4. 如何搜索/替代显示为 "~R"、"~S" 等的字符？

可用 "ga" 命令来显示特殊字符的 ASCII 值/代码。例如，假定 ASCII 值是 142。可用
下列命令来搜索此特殊字符: >

    /^V142
<
这里，^V 用 CTRL-V 输入。

更多详情请阅读:

    |ga|
    |using_CTRL_V|
    |24.8|

 								*faq-11.5*
11.5. 如何高亮文件中所有的不可打印字符？

可用下列命令和搜索模式来高亮文件中所有的不可打印字符: >

    :set hlsearch
    /\(\p\|$\)\@!.
<
更多详情请阅读:

    |/\p|
    |/bar|
    |/$|
    |/\(|
    |/\@!|
    |'hlsearch'|

 								*faq-11.6*
11.6. 如何在文件中搜索整词？

在文件中可用 \< 和 \> 匹配原来搜索整词。例如: >

    /\<myword\>
<
\< 匹配原匹配单词开始，而 \> 匹配原匹配单词结尾。

更多详情请阅读:

    |/\<|
    |/\>|

 								*faq-11.7*
11.7. 如何搜索光标下的当前单词？

按 * 键可正向搜索光标下的当前单词。# 键进行反向搜索。注意 这些命令只搜索完整的
关键字。

更多详情请阅读:

    |star|
    |#|
    |gstar|
    |g#|
    |03.8|
    |search-commands|

 								*faq-11.8*
11.8. 如何在搜索单词时忽略大小写？

要在搜索模式时忽略大小写，置位 'ignorecase' 选项: >

    :set ignorecase
<
要仅在搜索特定模式时忽略大小写，使用特殊的 \c 指令: >

    /\c<pattern>
<
更多详情请阅读:

    |'ignorecase'|
    |/ignorecase|
    |/\c|

 								*faq-11.9*
11.9. 如何搜索连续两次出现的单词？

可用下面的搜索命令来定位连续两次出现的单词: >

     /\(\<\w\+\)\_s\+\1\>
     /\(\<\k\+\)\_s\+\1\>
<
"\w" 和 "\k" 的主要区别是后者基于 'iskeyword' 选项，此选项可包含重音和其它语言
特定的字符。

更多详情请阅读:

    |/\1|
    |/\(|
    |/\)|
    |/\<|
    |/\>|
    |/\w|
    |/\k|
    |/\+|
    |/\_x|
    |'iskeyword'|

 								*faq-11.10*
11.10. 如何统计缓冲区中特定单词出现的次数？

可用下面一组命令来编译缓冲区中特定单词出现的次数: >

    :let cnt=0
    :g/\<your_word\>/let cnt=cnt+1
    :echo cnt
<
这只统计单词出现的行数。也可用下面的命令: >

    :%s/\<word\>/&/gn
<
要统计文件中字母单词的个数，可用 >

    :%s/\a\+/&/gn
<
要统计非空白字符构成的单词的个数，可用 >

    :%s/\S\+/&/gn
<
更多详情请阅读:

    |count-items|
    |word-count|
    |v_g_CTRL-G|
    |12.5|
    |:s_flags|

 								*faq-11.11*
11.11. 如何在搜索模式时把光标放置在匹配单词的尾部？

可用搜索命令的 "e" 偏移来把光标放置在匹配单词的尾部。例如 >

    /mypattern/e
<
关于搜索位移的更多详情请阅读:

    |search-offset|
    |/|

 								*faq-11.12*
11.12. 如何搜索空行？

可如此搜索空行: >

    /^$
<
    或 >

    /^\s*$
<
后者也匹配只由空白构成的行，而前者只匹配真正的空行。更多详情请阅读:

    |/^|
    |/$|
    |/\s|
    |/star|
    |search-commands|

 								*faq-11.13*
11.13. 如何搜索只有一个字符的行？

可如此搜索只有一个字符的行: >

    /^\s*\a\s*$
<
更多详情请阅读:

    |/^|
    |/\a|
    |/\s|
    |/star|
    |/$|

 								*faq-11.14*
11.14. 如何搜索和替代多个文件中的字符串？

可用 `:argdo`、`:bufdo`、`:windo` 或 `:tabdo` 命令来在多个文件中执行 ex 命令。
例如: >

    :argdo %s/foo/bar/g|upd
<
更多详情请阅读:

    |:argdo|
    |:bufdo|
    |:windo|
    |:tabdo|

 								*faq-11.15*
11.15. 我在映射中使用了 `:s` 替代命令。如果模式的搜索失败，映射被终止。我想要
       即使替代命令失败时，映射还继续处理下个命令。该如何做呢？

可用替代命令的 "e" 标志位，即使模式没找到，也让映射继续处理其它命令。

更多详情请阅读:

    |:s_flags|

 								*faq-11.16*
11.16. 如何搜索一行中某字符的第 n 次出现？

要搜索一行中某字符的第 n 次出现，可为 "f" 命令加上数值前缀。例如，要搜索一行中
@ 字符的第 5 次出现，可用命令 5f@。这假定光标在行首 - 而且首字符不是你要寻找的
那个字符。

更多详情请阅读:

    |f|
    |F|
    |t|
    |T|
    |;|
    |,|

 								*faq-11.17*
11.17. 如何用硬回车 (换行) 字符来替代制表符 (或任何字符)？

可用下列命令来用硬回车 (换行) 字符来替代制表符 (或任何字符): >

    :s/\t/\r/
<
注意 上述命令中，如果用 \n 代替\r，制表符并不会被换行符所代替。

更多详情请阅读:

    |sub-replace-special|
    |NL-used-for-Nul|
    |CR-used-for-NL|

 								*faq-11.18*
11.18. 如何用字符的 ASCII 值来搜索字符？

在搜索 "/" 命令中，可用 CTRL-V 后跟字符的十进制或十六进制或八进制值来用 ASCII
值搜索字符。要确定字符的 ASCII 值，可用 `:ascii` 或 "ga" 命令。

例如，要搜索 ASCII 字符值 188 (¼)，可用以下搜索命令之一: >

    /<CTRL-V>188
    /<CTRL-V>o274
    /<CTRL-V>xBC
    /<CTRL-V>u00bc
<
也可用排序规则元素 [] 来用十进/八进/十六进数值搜索字符: >

    /[\d188]
    /[\o274]
    /[\xbc]
    /[\u00bc]
<
此外，也可用特定匹配原 \%d \%o \%x \%u: >

    /\%d188
    /\%o274
    /\%xbc
    /\%u00bc
<
也可用二合字母来输入字符。例如输入: >

    /CTRL-K14
<
来搜索上述字符。

更多详情请阅读:

    |i_CTRL-V_digit|
    |:ascii|
    |ga|
    |/\]|
    |/\%d|
    |digraphs|

 								*faq-11.19*
11.19. 如何搜索长行？

可用搜索命令中的 Vim 正规表达式来搜索长行或超过一定数目字符的行。例如，要搜索
所有超过 80 个字符的行，可用以下之一的命令: >

    /^.\{80}.\+$
    /^.*\%>80c.*$
    /^.*\%>80v.*$
<
更多详情请阅读:

    |/\{|
    |/\%c|
    |/\%v|

 								*faq-11.20*
11.20. 如何在当前缓冲区中显示包含特定模式的所有行？

可用以下命令来在当前缓冲区中显示包含特定模式的所有行: >

    :g/<pattern>/p
<
例如，下列命令会在当前缓冲区中显示包含 "vim" 的所有行: >

    :g/vim/p
<
因为 `:p` 是 ex 命令 `:g` 执行的缺省命令，也可用: >

    :g/vim
<
如果也想要对应的行号，可用以下的命令: >

    :g/<pattern>/#
<
更多详情请阅读:

    |:global|
    |:print|
    |:number|

 								*faq-11.21*
11.21. 如何搜索跨越多行的文本字符串？

可用 \_x 正规表达式匹配原来搜索跨越多行的文本客串。例如，要搜索文件字符串
"Hello
World", 可用下列搜索命令: >

    /Hello\_sWorld
<
这会匹配单词 "Hello" 后跟换行符然后跟着从下一行开始的单词 "World"。它也会匹配
单词 "Hello" 后跟空格符然后跟着单词 "World"。要搜索 "Hello World" 字符串并包括
行尾和行首的任意个空白字符，可用以下的搜索命令: >

    /Hello\_s\+World
<
更多详情请阅读:

    |27.8|
    |pattern-atoms|
    |/\_|
    |pattern-searches|

 								*faq-11.22*
11.22. 如何只在缓冲区中给定行范围内搜索模式？

可以用 \%>l 和 \%<l 正规表达式匹配原来在给定行范围内搜索模式。例如，要在缓冲
区第 10 到 30 行间搜索单词 "white"，可用下列命令: >

    /white\%>9l\%<31l
<
更多详情请阅读:

    |/\%l|

 								*faq-11.23*
11.23. 如何清除前次搜索模式？

前次搜索模式存在 "/" 寄存器里。可用下列命令清除此寄存器: >

    :let @/=""
<
要在缓冲区卸载时清除前次搜索模式，可用下列命令: >

    :autocmd BufUnload * let @/ = ""
<
更多详情请阅读:

    |@/|
    |:let-@|
    |autocmd-searchpat|
    |last-pattern|

 								*faq-11.24*
11.24. 为什么模式 "a.\{-}p\@!" 不能匹配？

"\{-}" 不意味着 "越少越好"，它的含义是 "越少越好使整个模式匹配"。如果它不匹配
"p"，整个模式会失败 (因为有 "p\@!")，所以它必须匹配 "p"。这确实是一个更长的匹
配，但它是最短的能使整个模式成功的匹配。

如果你想要 "无论如何也越少越好"，可用 "\@>"，它基本上把一个模式分成两部分，每
部分相互独立。如果模式是 "a.\{-}\@>p\@!"，那么 ".\{-}" 总是匹配空串，因为在没
有其它限制的情况下这是最短能成功的匹配。整个模式此时相当于 "ap\@!"，也就是匹配
任何后面不跟 "p" 的 "a"。

这意味着，它会匹配尽量少的 "a" 而不会继续试下去，直到 Vim 找到最长的匹配为止。
这也意味着，它还是会匹配 "ap"。

 								*faq-11.25*
11.25. 如何在模式中使用 "/" 时不用对它转义？

用 / 搜索模式时，需要转义模式中所有的 "/"，不然它们会终止模式。因此，你不能直
接搜索 /usr/share/doc/，而必须搜索 \/usr\/share\/doc\/

最简单的解决方法是用 "?" 来进行反向搜索，然后用 /<CR> 来使用前次搜索模式进行正
向搜索。

如果有内建 eval 特性的 Vim (至少要 normal 版本或更高)，也可直接粘贴模式到搜索
寄存器:

:let @/ = '/usr/share/doc/'

然后用 "n" 跳转到下个它的出现。

另见以下相关帮助

    |@/|
    |/<CR>|

 								*faq-11.26*
11.26. 如何操作搜索的匹配？

"gn" 命令很容易地在匹配当前搜索模式的文本区域中操作。缺省，正向搜索前次搜索模
式并可视选择此匹配。如果光标已经在匹配上，就对它可视选择。如果在操作符后使用
"gn" 命令 (如 "c" 来修改文本)，此操作符会适用于匹配上。

如果使用 gn 之前激活了可视模式，可视选择区会延伸到下个匹配的结尾。

"gN" 命令类似，但用于反向搜索。

此命令可用于为每个匹配重复一些简单操作。例如，要把所有的 apple 换成 peach。先
用 "/apple" 开始搜索，然后用 "cgnpeach<Esc>" 把当前匹配替代成 peach。现在用句
号 "." 命令就可为缓冲区其余部分重做替代操作。

另见以下相关帮助

    |gn|
    |gN|

=============================================================================
 								*faq-12*
第十二节 - 修改文本~

 								*faq-12.1*
12.1. 如何删除文件中所有行的拖尾空白字符 (空格和制表)？

可用 `:substitute` 命令在整个文件上搜索和删除所有的拖尾空白字符: >

    :%s/\s\+$//
<
更多详情请阅读:

    |:%|
    |:s|
    |/\s|
    |/\+|
    |/$|

 								*faq-12.2*
12.2. 如何把所有的多个连续出现的空格字符替代把单个空格？

可用以下命令来把所有的多个连续出现的空格字符替代把单个空格: >

    :%s/ \{2,}/ /g
<
也可用: >

    :%s/  \+/ /g
<
更多详情请阅读:

    |:%|
    |:s|
    |/\{|
    |:s_flags|

 								*faq-12.3*
12.3. 如何把一串空行缩减成一行？

可用下列命令来把一串空行缩减成一行: >

    :v/./.,/./-1join
<
此命令的解释如下:

    部分            描述~
    -----           -------------------------- ~
    :v/./           为所有不包含一个字符的行 (也就是空行) 执行下列命令。
     .,             使用当前行作为行范围的开始行。
     /./            使用包含一个字符的行作为结束行。
     -1             调整行范围，使结束行变成原来结束行的前一行。
     j              连接范围中的所有行。

备注 如果文件末有空行这会报错。要改正这个问题，在文件末加一行临时行，执行本命
令，然后再删除临时行。

更多详情请阅读:

    |:v|
    |:join|
    |cmdline-ranges|
    |collapse|

 								*faq-12.4*
12.4. 如何删除文件中的全部空行？如何删除全部只有空白字符的行？

要删除全部空行，使用下列命令: >

    :g/^$/d
<
要删除全部只有空白字符 (空格或制表) 的行，使用下列命令: >

    :g/^\s\+$/d
<
要删除全部如果有的话只有空白字符的行，使用下列命令: >

    :g/^\s*$/d
<
 								*faq-12.5*
12.5. 如何复制/抽出当前单词？

可用 "yiw" (抽出内含单词，不带空白) 命令或 "yaw" (抽出一个单词，带空白) 命令来
复制/抽出当前单词。

更多详情请阅读:

    |04.6|
    |04.8|
    |iw|
    |yank|
    |text-objects|
    |objects|

 								*faq-12.6*
12.6. 如何从一行中抽出一个位置到另一个位置的文本而不是抽出整行？

可用动作命令带抽出操作符 (y) 来从一行中抽出一个位置到另一个位置的文本。例如，
要抽出当前光标位置到下个 x 字符的文本，用 yfx 或 Fx 和 tx 或 Tx。要抽出直到第
n 列的文本，用 n|。要抽出直到下个 "word" 的出现的文本，用 /word。要抽出直到另
一行第 n 列的文本，先用 "ma" 命令标记该位置，再转到抽出开始的位置，然后用 y`a
来抽出直到标记所在的文本 (注意 引号的方向)

更多详情请阅读:

    |yank|
    |motion.txt|
    |04.6|

 								*faq-12.7*
12.7. 抽出文本到寄存器时，如何附加文本到当前寄存器的内容上？

指定一些操作的寄存器时，如果使用了寄存器名的大写形式，则新的文本会附加到已有的
内容上。例如，假定寄存器 "a" 有些文本，如果想附加新文本于其后，可用 "A" 寄存器
名。如果用寄存器名的小写形式，则寄存器内容会给新文本覆盖。

更多详情请阅读:

    |quote|
    |quote_alpha|
    |10.1|

 								*faq-12.8*
12.8. 如何抽出跨越多行的完整句子？

要抽出跨越多行的完整句子，须用带动作命令的抽出操作符。如: >

        y)
<
从句子内部可用 "yi)" 来抽出句子。

更多详情请阅读:

    |yank|
    |{motion}|
    |object-motions|
    |04.6|

 								*faq-12.9*
12.9. 如何抽出所有包含一个模式的行到一个缓冲区？

可用 `:global` 命令来把所有包含一个模式的行抽出到寄存器里，然后把寄存器的内容
粘贴到缓冲区上: >

    :let @a=''
    :g/mypattern/y A
<
第一个命令，清除寄存器 "a" 的内容。第二个命令复制所有包含 "mypattern" 的行到寄
存器 "a" 里。注意 使用了大写字母 "A"，把匹配的行附加进来。现在可用 "ap 命令来
粘贴突破口 "a" 的内容到缓冲区里。

如果你只想收集所有的匹配，还有一个不同的方法。为此，用 `:s` 命令带上标志位
"gn"，这样不实际修改缓冲区 ("n" 标志位) 但选择所有匹配 ("g" 标志位)。把此命令
和替代部分的 "\=" 部分组合起来，可把每个匹配复制到，比如，一个列表上。 加总起
来，可用下面的形式: >

    :let list=[]
    :%s/pattern/\=add(list, submatch(0))/gn
<
现在所有的匹配都会在列表里，然后你可按需对它们进行后期处理。

更多详情请阅读:

    |:g|
    |:y|
    |:let-register|
    |quote_alpha|
    |put|
    |registers|
    |:registers|
    |sub-replace-\=|

 								*faq-12.10*
12.10. 如何删除文件中所有不包含特定模式的行？

可用 `:v` 来删除文件中所有不包含特定模式的行: >

    :v/pattern/d
<
或 >

    :g!/pattern/d
<
更多详情请阅读:

    |:v|
    |:g|

 								*faq-12.11*
12.11. 如何在每个带 "pattern" 的行之前加上一行？

可用下列命令来在每个带 "pattern" 的行之前加上一行: >

    :g/pattern/normal! Oi<把文本行放在这里>
<
此外，还要用 Y 命令抽出行，然后用下列命令插入该行: >

    :g/pattern/put!
<
更多详情请阅读:

    |:g|
    |:put|
    |insert|
    |0|

 								*faq-12.12*
12.12. 有没有办法在前行包含指定模式的行上操作？

可用 `:global` 命令在前行包含指定模式的行上操作: >

    :g/<pattern>/+{cmd}
<
更多详情请阅读:

    |:g|
    |:range|

 								*faq-12.13*
12.13. 如何在所有包含指定模式的行上执行命令？

可用 `:global` (:g) 命令在所有包含指定模式的行上执行命令。 >

    :g/my pattern/d
<
如要想用非 Ex 的命令，可用 `:normal` 命令: >

    :g/my pattern/normal {command}
<
除非你希望普通模式命令被重映射，考虑用 `:normal!` 命令来代替 (注意 这里的 "!")。

更多详情请阅读:

    |:global|
    |:v|
    |:normal|

 								*faq-12.14*
12.14. 可以复制光标上方的字符到当前光标位置吗？

在插入模式下，可用 CTRL-Y 来复制光标上方的字符到当前光标位置。也可用 CTRL-E 来
对光标下方的字符同样办理。

更多详情请阅读:

    |i_CTRL-Y|
    |i_CTRL-E|

 								*faq-12.15*
12.15. 如何在当前行上方/下方插入空行而无需进入插入模式？

可用 `:put` ex 命令来插入空行。例如，试试 >

    :put =''
    :put! =''
<
更多详情请阅读:

    |:put|

 								*faq-12.16*
12.16. 如何插入当前文件名到当前缓冲区？

有几种办法到插入当前文件名到当前缓冲区。插入模式下，可用 <C-R>% 或
<C-R>=expand("%") 命令。普通模式下，可用 `:put =@%` 命令。

更多详情请阅读:

    |i_CTRL-R|
    |expand()|
    |!!|

 								*faq-12.17*
12.17. 如何插入 Vim 寄存器的内容到当前缓冲区？

插入模式下，可用 <CTRL-R><register> 命令来插入 <register> 的内容。例如，
<CTRL-R>a 插入寄存器 "a" 的内容到当前缓冲区。

普通模式下，可用 `:put <register>` 命令来插入 <register> 的内容。例如，
`:put d` 命令插入寄存器 "d" 的内容到当前缓冲区。

更多详情请阅读:

    |i_CTRL-R|
    |i_CTRL-R_CTRL-R|
    |i_CTRL-R_CTRL-O|
    |i_CTRL-R_CTRL-P|
    |:put|

 								*faq-12.18*
12.18. 如何移动光标跨过行尾并在行尾之后的列插入字符？

可设置 'virtualedit' 选项，这样就可以移动光标跨过行尾并在行尾之后的列插入字
符。要启动虚拟模式，用 >

    :set virtualedit=all
<
更多详情请阅读:

    |'virtualedit'|

 								*faq-12.19*
12.19. Vim 如何把光标所在的单词 (比如说: junk) 替代为 "foojunkbar"？

有几种方法。如果单词是本行首个这样的词，可用以下的命令: >

    :exe "s/".expand("<cword>")."/foo&bar/"
<
要只匹配整个单词，可以这样用一个更复杂的替代: >

    :exe 's/\<'.expand("<cword>").'\%>'.(col(".")-1).'c\>/foo&bar/'
<
也可用命令: ciwfoo<C-R>"bar<Esc>

更多详情请阅读:

    |:substitute|
    |expand()|
    |col()|
    |/\%c|

 								*faq-12.20*
12.20. 如何对一个目录里所有文件里的特定文本进行替代？

可用 `:argdo` 命令在参数指定的所有文件上执行替代命令: >

    :args *
    :argdo %s/<your_text>/<replacement_text>/ge | update
<
更多详情请阅读:

    |:args_f|
    |:argdo|
    |:s_flags|

 								*faq-12.21*
12.21. 文件中有若干数值。如何为文件中的数值增量或减量？

可用 CTRL-A 键来增量数值，而用 CTRL-X 键来减量数值。也可通过指定键的计数来指定
增量/减量的数值。可用十进制、八进制和十六进制数值。修改 'nrformats' 选项可改变
此操作 Vim 使用的基底。

更多详情请阅读:

    |26.2|
    |CTRL-A|
    |CTRL-X|
    |'nrformats'|

 								*faq-12.22*
12.22. 如何在 `:substitute` 命令中重用前次搜索模式？

要在 `:substitute` 命令中重用前次搜索模式，不要指定新的搜索模式: >

    :s/pattern/newtext/
    :s//sometext/
<
第二个 `:s` 命令里没有指定搜索模式，所以使用第一个 `:s` 命令的模式 "pattern"。

如果你想改变搜索模式但重复替代模式，可用特殊的右手边形式，波浪符: >

    :s/newpattern/~/
<
更多详情请阅读:

    |:s|
    |:&|
    |:~|
    |&|
    |sub-replace-special|

 								*faq-12.23*
12.23. 如何用 `:substitute` 改变字符串的大小写？

可用 `:substitute` 命令的替代字符串中的特殊字符来改变匹配字符串的大小写。例
如，要把字符串 "MyString" 改成全部大写，可用以下命令: >

    :%s/MyString/\U&/g
<
要改成小写，可用以下命令: >

    :%s/MyString/\L&/g
<
要把当前行的所有单词的首字符改为大写，可用以下命令: >

    :s/\<\(.\)\(\k*\)\>/\u\1\L\2/g
<
更多详情请阅读:

    |sub-replace-special|
    |:substitute|
    |/\U|
    |/\L|
    |/\u|

 								*faq-12.24*
12.24. 如何键入键盘上没有的字符？

可用二合字母来键入键盘上没有的字符。可用 `:digraphs` 命令来显示所有当前定义的
二合字母。可用 `:digraphs` 命令在该列表中加入新的二合字母。

更多详情请阅读:

    |digraphs|
    |'digraph'|
    |24.9|

 								*faq-12.25*
12.25. 有没有命令删除任何或所有的二合字母？

没有。二合字母表是编译时定义的。只可以加入新二合字母。将来会考虑增加新命令来删
除二合字母。

 								*faq-12.26*
12.26. 插入模式下，按退格键时，只删除这次在插入模式中键入的字符。如何能用退格
       键删除在之前的插入模式中键入的字符？

这是 vi 的传统行为。可用 'backspace' 选项来删除之前插入模式中键入的字符: >

    :set backspace=indent,eol,start
<
更多详情请阅读:

    |'backspace'|
    |i_backspacing|

 								*faq-12.27*
12.27. 文件有长于 72 字符的行，以 "+" 终止并回绕到下一行。如何快速连接这些行？

可用 `:global` 命令来搜索和连接这些行: >

    :g/+$/j
<
不过，这只会对每两行进行连接。一个更复杂的例子，可以连接所有连续以 "+" 结尾的
行: >

    :g/+$/,/\(^\|[^+]\)$/j
    :g/+$/mark a | .,/\(^\|[^+]\)$/s/+$// | 'a,.j
<
更多详情请阅读:

    |:g|
    |:j|
    |:mark|

 								*faq-12.28*
12.28. 如何把抽出的面向字符的文本粘贴到单独的行上？

可用 `:put` 命令来把抽出的面向字符的文本粘贴到单独的行上: >

    :put =@"
<
更多详情请阅读:

    |:put|
    |quote_=|

 								*faq-12.29*
12.29. 如何改变单词或字符或文本块的大小写？

可用 "~" 命令切换字符的大小写。

可用 "gUiw" 或 "viwU" 命令把光标所在的单词改为大写，而用 "guiw" 或 "viwu" 命令
改为小写。

可用 "viw~" 或 "g~iw" 命令切换光标所在的单词的大小写 (大写到小写，小写到大
写)。

可用 "gUgU" 命令把当前行改为大写，而用 "gugu" 命令把当前行改为小写。

可用 "g~g~" 命令切换当前行的大小写。可用 "g~{motion}" 或 "{Visual}~" 命令来切
换文本块的大小写。

如果置位了 'tildeop'，"~" 命令类似操作符，会期待后跟应用的动作命令。如果设了 >

    :set tildeop
<
而现在要切换当前光标位置到行尾的大小写，只要简单地用 "~$"。

更多详情请阅读:

    |case|
    |'tildeop'|

 								*faq-12.30*
12.30. 如何键入键盘上没有的 ASCII 字符？

可用 CTRL-V 后跟 ASCII 字符值来键入键盘上没有的 ASCII 字符。也可用二合字母来键
入特殊的 ASCII 字符。

更多详情请阅读:

    |i_CTRL-V_digit|
    |digraphs|
    |45.5|

 								*faq-12.31*
12.31. 如何替代文件中的不可打印字符？

要替代不可打印字符，需要先决定字符的 ASCII 值。可用 `:ascii` ex 命令或 "ga" 普
通模式命令来显示光标所在字符的 ASCII 值。

可用 CTRL-V 后跟十进制数 1-255 (不能有前导的零)、或用 x 加上十六进数 00-FF，或
用八进制数 0-0377 (要有前导的零)，或用 u 和十六进制数 0-FFFF，或用 U 和十六进
制数 0-7FFFFFFF

另一个办法是用 `:digraphs` ex 命令来显示所有字符的二合字母以及它们的十进制值和
字母值。可用 CTRL-K 后跟两个字母数字字符 (二合字母) 来输入不可打印字符。

更多详情请阅读:

    |:ascii|
    |i_CTRL-V|
    |i_CTRL-V_digit|
    |:digraphs|

 								*faq-12.32*
12.32. 如何删除缓冲区中的重复行？

可用以下用户定义的命令来删除缓冲区中的重复行:

:command -range=% Uniq <line1>,<line2>g/^\%<<line2>l\(.*\)\n\1$/d

把上述命令加入 .vimrc 文件，并调用 `:Uniq` 来删除所有的重复行。

 								*faq-12.33*
12.33. 如何给文件中的所有行加上对应行号前缀？

有几个方法给文件中的所有行加上对应行号前缀。下面列出一些: >

    :%s/^/\=line('.'). ' '
    :%s/^/\=printf('%5d ', line('.'))/
    :%s/^/\=strpart(line('.').'.     ', 0, 5)
    :%s/^/\=strpart('   ', strlen(line('.'))).line('.').'. '
<
最后两个命令会用空格填充行号。最后那个命令会右对齐行号，而之前那个命令则左对齐
行号。

如果不想为连续行编号，而要为一些非连续的区域编号，可用以下的套路: >

    :let i = 1
    :g/TODO/s/^/\=printf('%2d.',i)|let i+=1
<
首先，变量 i 初始化为 1。下一行中 `:g` 命令用于只在匹配 "TODO" 的行上执行替代
命令。变量 i 在每次替代命令发生后增加 1。

更多详情请阅读:

    |sub-replace-special|
    |line()|
    |expr6|
    |strpart()|
    |printf()|
    |:execute|
    |:global|

 								*faq-12.34*
12.34. 如何交换两个字符或单词或行？

可用 "xp" 命令序列来交换两个字符。"c" 会删除光标所在的字符而 "p" 会把刚刚删
除的字符粘贴到光标所在字符之后。最终结果就是交换了两了字符。

可有 "deep" 命令序列来交换两个单词 (先移动光标到首个单词之前的空白上)。

可用 "ddp" 命令序列来交换两行。"dd" 删除当前行，而 "p" 把刚刚删除的行粘贴到当
前行后。最终结果就是交换了两行。

所有以上的操作都会改变 " 无名寄存器。

可用 `:m +` ex 命令来交换两行而不改变无名寄存器。

更多详情请阅读:

    |x|
    |p|
    |dd|
    |d|
    |e|
    |linewise-register|
    |quotequote|
    |:move|

 								*faq-12.35*
12.35. 如何改变用作单词定界的字符？

Vim 使用 'iskeyword' 选项指定的字符用作单词定界符。此选项的缺省值是
"@,48-57,_,192-255"。

例如，要加上 ":" 作为单词定界符，可用 >

    :set iskeyword+=:
<
要让 "_" 不再用作单词定界符，可用 >

    :set iskeyword-=_
<
更多详情请阅读:

    |'iskeyword'|
    |word|

=============================================================================
 								*faq-13*
SECTION 13 - COMPLETION IN INSERT MODE ~

 								*faq-13.1*
13.1. How do I complete words or lines in insert mode?

In insert mode, you can complete words using the CTRL-P and CTRL-N keys.
The CTRL-N command searches forward for the next matching keyword.
The CTRL-P command searches backwards for the next matching keyword.

In insert mode, you can use the CTRL-X CTRL-L command sequence to complete
lines that starts with the same characters as in the current line before
the cursor. To get the next matching line, press the CTRL-P or CTRL-N keys.
There are a lot of other keys/ways available to complete words in insert
mode.

Vim supports completion of the following items: >

    CTRL-X CTRL-L    whole lines
    CTRL-X CTRL-N    keywords in the current file
    CTRL-X CTRL-K    words from a dictionary
    CTRL-X CTRL-T    words from a thesaurus
    CTRL-X CTRL-I    current and included files
    CTRL-X CTRL-]    tags
    CTRL-X CTRL-F    file names
    CTRL-X CTRL-D    macro definitions (also in included files)
    CTRL-X CTRL-V    Vim command line
    CTRL-X CTRL-U    User defined completion
    CTRL-X CTRL-O    Omni completion
<
User defined completions and omni completions are often set by filetype
plugins.

更多详情请阅读:

    |24.3|
    |ins-completion|

 								*faq-13.2*
13.2. How do I complete file names in insert mode?

In insert mode, you can use the CTRL-X CTRL-F command sequence to complete
filenames that start with the same characters as in the current line before
the cursor.

更多详情请阅读:

    |compl-filename|

 								*faq-13.3*
13.3. I am using CTRL-P/CTRL-N to complete words in insert mode. How do I
      complete words that occur after the just completed word?

You can use CTRL-X CTRL-N and CTRL-X CTRL-P keys to complete words that are
present after the just completed word.

更多详情请阅读:

    |i_CTRL-X_CTRL-P|
    |i_CTRL-X_CTRL-N|
    |ins-completion|

=============================================================================
 								*faq-14*
SECTION 14 - TEXT FORMATTING ~

 								*faq-14.1*
14.1. How do I format a text paragraph so that a new line is inserted at
      the end of each wrapped line?

You can use the "gq" command to format a paragraph. This will format the
text according to the current 'textwidth' setting. An alternative would be
to use the "gw" command that formats like "gq" but does not move the
cursor.

Note that the gq operator can be used with a motion command to operate on a
range of text. For example: >

    gqgq - Format the current line
    gqap - Format current paragraph
    gwap - Format current paragraph (and don't move cursor)
    gq3j - Format the current and the next 3 lines
<
更多详情请阅读:

    |gq|
    |gw|
    |formatting|
    |usr_25.txt|
    |motion.txt|

 								*faq-14.2*
14.2. How do I format long lines in a file so that each line contains less
      than "n" characters?

You can set the 'textwidth' option to control the number of characters that
can be present in a line. For example, to set the maximum width of a line
to 70 characters, you can use the following command: >

    set textwidth=70
<
Now to break the long lines in a file to the length defined by the
'textwidth' option, you can use >

    :g/./normal gqq
<
更多详情请阅读:

    |'textwidth'|
    |gq|

 								*faq-14.3*
14.3. How do I join short lines to form a paragraph?

First, make sure the 'textwidth' option is set to a high value: >

    :set textwidth=99999
<
Next, join the short lines to form a paragraph using the command: >

    1GgqG
<
The above command will operate on the entire file. To do the formatting on
all paragraphs in a specific range, use: >

    :'a,'bg/\S/normal gq}
<
更多详情请阅读:

    |gq|
    |G|
    |gqq|

 								*faq-14.4*
14.4. How do I format bulleted and numbered lists?

You can configure Vim to format bulleted and numbered lists using the
'formatoptions' option. For example, you can format the list of the
following format:

  - this is a test. this is a test. this is a test. this is a test.
  this is a test.

into this format:

  - this is a test. this is a test. this is a test. this is a test.
    this is a test.

You can use the "n" flag in the 'formatoptions' to align the text. >

    :set fo+=n
<
With this option, when formatting text, Vim will recognize numbered lists.
For this option to work, the 'autoindent' option also must be set.

更多详情请阅读:

    |'formatoptions'|
    |fo-table|
    |format-comments|

 								*faq-14.5*
14.5. How do I indent lines in insert mode?

In insert mode, you can press the CTRL-T key to insert one shiftwidth of
indent at the start of the current line. In insert mode, you can use the
CTRL-D key to delete on shiftwidth of indent at the start of the current
line. You can also use the CTRL-O >> and CTRL-O << commands to indent the
current line in insert mode.

更多详情请阅读:

    |i_CTRL-T|
    |i_CTRL-D|
    |i_0_CTRL-D|
    |i_CTRL-O|
    |>>|
    |<<|

 								*faq-14.6*
14.6. How do I format/indent an entire file?

You can format/indent an entire file using the gg=G command, where >

    gg - Goto the beginning of the file
    =  - apply indentation
    G  - till end of file
<
更多详情请阅读:

    |gg|
    |=|
    |G|
    |'formatprg'|
    |C-indenting|

 								*faq-14.7*
14.7. How do I increase or decrease the indentation of the current line?

You can use the ">>" and "<<" commands to increase or decrease the
indentation of the current line.

更多详情请阅读:

    |shift-left-right|
    |>>|
    |<<|
    |'shiftwidth'|

 								*faq-14.8*
14.8. How do I indent a block/group of lines?

You can visually select the group of lines and press the > or < key to
indent/unindent the lines. You can also use the following ex-command to
indent the lines >

    :10,20>
<
更多详情请阅读:

    |shift-left-right|
    |v_>|
    |v_<|
    |:<|
    |:>|

 								*faq-14.9*
14.9. When I indent lines using the > or < key, the standard 8-tabstops are
      used instead of the current 'tabstop' setting. Why?

The number of spaces used when lines are indented using the ">" operator is
controlled by the 'shiftwidth' option. The 'tabstop' setting is only
used, when the 'shiftwidth' option is zero. >

    :set shiftwidth=4
<
更多详情请阅读:

    |'shiftwidth'|
    |>>|
    |'softtabstop'|

 								*faq-14.10*
14.10. How do I turn off the automatic indentation of text?

By default, the automatic indentation of text is not turned on. Check the
configuration files (.vimrc, .gvimrc) for settings related to indentation.
Make sure the `:filetype indent on` command is not present. If it is
present, remove it. Also, depending on your preference, you may also want
to check the value of the 'autoindent', 'smartindent', 'cindent' and
'indentexpr' options and turn them off as needed.

更多详情请阅读:

    |:filetype-indent-off|
    |'autoindent'|
    |'smartindent'|
    |'cindent'|
    |'indentexpr'|

 								*faq-14.11*
14.11. How do I configure Vim to automatically set the 'textwidth' option
       to a particular value when I edit mails?

You can use the "FileType" autocommand to set the 'textwidth' option: >

    autocmd FileType mail set tw=<your_value>
<
更多详情请阅读:

    |:autocmd|
    |FileType|
    |usr_43.txt|

 								*faq-14.12*
14.12. Is there a way to make Vim auto-magically break lines?

Yes. Set the 'textwidth' option to the preferred length for a line. Then
Vim will auto-magically break the newly entered lines. For example: >

    :set textwidth=75
<
更多详情请阅读:

    |'textwidth'|
    |ins-textwidth|
    |'formatoptions'|
    |fo-table|
    |formatting|

 								*faq-14.13*
14.13. I am seeing a lot of ^M symbols in my file. I tried setting the
       'fileformat' option to "dos" and then "unix" and then "mac". None of
       these helped. How can I hide these symbols?

When a file is loaded in Vim, the format of the file is determined as
below:

- If all the lines end with a new line (<NL>), then the fileformat is
  "unix".
- If all the lines end with a carriage return (<CR>) followed by a new line
  (<NL>), then the fileformat is "dos".
- If all the lines end with carriage return (<CR>), then the fileformat is
  "mac".

If the file has some lines ending with <CR> and some lines ending with <CR>
followed by a <NL>, then the fileformat is set to "unix".

You can change the format of the current file, by saving it explicitly in
dos format: >

    :w ++ff=dos
<
To display the format of the current file, use >

    :set fileformat?
<
The above behavior is also controlled by the 'fileformats' option. You can
try the following commands: >

    :set fileformats+=unix
    :e <your_file>
    :set fileformat=unix
    :w
<
To remove the carriage return (<CR>) character at the end of all the lines
in the current file, you can use the following command: >

    :%s/\r$//
<
To force Vim to use a particular file format, when editing a file, you can
use the following command: >

    :e ++ff=dos filename
<
更多详情请阅读:

    |'fileformats'|
    |'fileformat'|
    |file-formats|
    |DOS-format-write|
    |Unix-format-write|
    |Mac-format-write|
    |dos-file-formats|
    |23.1|
    |++ff|

 								*faq-14.14*
14.14. When I paste some text into a Vim buffer from another application,
      the alignment (indentation) of the new text is messed up. How do I
      fix this?

When you paste text into a GUI Vim using the mouse, Vim is able to
detect that you are pasting text. So all the indentation related
settings (like autoindent, smartindent, cindent, etc.) are ignored and
the text is pasted literally.

When pasting text into a Vim running in a terminal (like xterm) using
the mouse, Vim may not be able to detect that you are pasting text. This
depends on several things: the capability of the terminal to pass the
mouse events to Vim, Vim is compiled to handle mouse events and access
the clipboard, the DISPLAY variable is set properly, the Vim 'mouse'
option is set correctly.

If Vim is able to detect that you are pasting text using the mouse, then
the pasted text will be inserted literally.

If Vim is not able to detect that you are pasting using the mouse, then
it will see the pasted text as though you literally typed the text.
After the first line from the pasted text is inserted, when Vim
encounters the newline character, because of the indentation settings,
the next line will start indented. The spaces at the beginning of the
second line in the pasted text will be inserted leading to additional
indentation. This will be repeated for subsequent lines. So the pasted
text will be inserted with stair case indentation.

You can fix this problem in a terminal Vim in several ways:

1. Build Vim with the +mouse and +xterm_clipboard compile-time options.
   The normal or big or huge build of Vim includes these options.  Set
   the 'mouse' option to either "a" or include "i".  When pasting text
   using the mouse, don't press the Shift key. This will work only if
   Vim can access the X display. For more information, read the
   following Vim help topics:

    |+feature-list|
    |'mouse'|
    |<MiddleMouse>|
    |x11-selection|
    |xterm-clipboard|

1.1 Some Linux distributions build their terminal vim packages
    without X support.  This makes no sense and leaves many users
    with the impression that Vim in terminal mode doesn't support
    some operations such as properly pasting text with a mouse. >

    If your distribution includes gvim, which it almost certainly
    does these days, the solutions to this include the following.
<
    a)  Start Vim as >

            gvim -v
<
    b)  Put this alias in your shell's configuration file, e.g.
        ~/.bashrc: >

            alias vim='gvim -v'
<
    c)  Put the following command in a file named "vim" and put that
        file in your ~/bin directory: >

            gvim -v "$@"
<
    d)  Link the distribution's gvim to ~/bin/vim with the following
        command, which needs to be executed only once. >

            ln -s $(which gvim) ~/bin/vim
<
    For c) and d), make sure that ~/bin precedes /usr/bin in your
    PATH.

2. Paste the text using the CTRL-R CTRL-O * command.  This will paste
   the text literally without any automatic indentation. If you want to
   paste the text and then fix the indentation, then you can use CTRL-R
   CTRL-P *. These commands will work only if Vim can access the X
   display. For more information, read the following Vim help topics:

    |i_CTRL-R_CTRL-O|
    |i_CTRL-R_CTRL-P|
    |quotestar|

3. Set the 'paste' option before pasting the text. This option will
   disable the effect of all the indentation related settings. Make
   sure to turn off this option using `:set nopaste` after pasting the
   text. Otherwise the Vim indentation feature will not work.  Do not
   permanently set the 'paste' option in your .vimrc file. If you are
   going to repeat these steps often, then you can set the
   'pastetoggle' option to a key. When you press the specified key,
   the 'paste' option will be toggled. You can press the key once
   before pasting the text and the press the key once after pasting
   the text. Note that when the 'paste' option is set, all the
   mappings and abbreviations are disabled.  For more information,
   read the following Vim help topics:

    |'paste'|
    |'pastetoggle'|

You can also refer to the following topics in the user manual:

    |04.7|
    |09.3|

 								*faq-14.15*
14.15. When there is a very long wrapped line (wrap is "on") and a line
      doesn't fit entirely on the screen it is not displayed at all. There
      are blank lines beginning with "@" symbol instead of wrapped line. If
      I scroll the screen to fit the line the "@" symbols disappear and the
      line is displayed again. What Vim setting control this behavior?

You can set the 'display' option to "lastline" to display as much as
possible of the last line in a window instead of displaying the "@"
symbols. >

    :set display=lastline
<
更多详情请阅读:

    |'display'|

 								*faq-14.16*
14.16. How do I convert all the tab characters in a file to space
       characters?

You can use the `:retab` command to update all the tab characters in the
current file with the current setting of 'expandtab' and 'tabstop'. For
example, to convert all the tabs to white spaces, use >

    :set expandtab
    :retab
<
更多详情请阅读:

    |:retab|
    |'expandtab'|
    |'tabstop'|
    |25.3|

 								*faq-14.17*
14.17. What Vim options can I use to edit text that will later go to a word
       processor?

You can set the following options to edit text that will later go into a
word processor: >

    :set wrap
    :set linebreak
    :set textwidth=0
    :set showbreak=>>>
<
You can use the "gk" and "gj" commands to move one screen line up and down.
更多详情请阅读:

    |'wrap'|
    |'linebreak'|
    |'textwidth'|
    |'showbreak'|
    |gk|
    |gj|

 								*faq-14.18*
14.18. How do I join lines without adding or removing any space characters?

By default, when you join lines using the "J" or `:join` command, Vim will
replace the line break, leading white space and trailing white space with a
single space character. If there are space characters at the end of a line
or a line starts with the ")" character, then Vim will not add a space
character.

To join lines without adding or removing any space characters, you can use
the gJ or `:join!` commands.

更多详情请阅读:

    |gJ|
    |:join|
    |J|
    |10.5|
    |'joinspaces'|
    |'cpoptions'|
    |'formatoptions'|

=============================================================================
 								*faq-15*
SECTION 15 - VISUAL MODE ~

 								*faq-15.1*
15.1. How do I do rectangular block copying?

You can do rectangular block copying in Vim using the blockwise visual
mode. To start blockwise visual mode use the CTRL-V key. Move the cursor
using any of the motion commands and then use the y operator to yank to
visually selected text.

If CTRL-V does not work as expected, it may have been remapped to CTRL-Q by
the mswin.vim script which is often sourced by a vimrc on Windows machines
to mimic some common short cuts from other programs.

更多详情请阅读:

    |04.4|
    |blockwise-visual|
    |visual-mode|
    |Q_vi|

 								*faq-15.2*
15.2. How do I delete or change a column of text in a file?

You can use the Vim block-wise visual mode to select the column of text and
apply an operator (delete, change, copy, etc) on it.

更多详情请阅读:

    |visual-block|
    |visual-operators|

 								*faq-15.3*
15.3. How do I apply an ex-command on a set of visually selected lines?

When you select a range of lines in visual mode, the < register is set to
the start of the visual region and the > register is set to the end of the
visual region. You can use these registers to specify the range for an ex
command. After visually selecting the lines, press ":" to go to the command
mode.  Vim will automatically insert the visual range '<,'>. You can run
any ex-command on the visual range.

更多详情请阅读:

    |v_:|
    |'<|
    |'>|

 								*faq-15.4*
15.4. How do I execute an ex command on a column of text selected in Visual
      block mode?

All the ex commands operate on whole lines only. If you try to execute
an ex command on a column of text selected in visual block mode, Vim
will operate on all the selected lines (instead of the selected
columns). You can use the vis.vim or NrrwRgn plugin script from
https://www.vim.org scripts archive to do this.

更多详情请阅读:

    |cmdline-ranges|
    |10.3|
    |cmdline-lines|

 								*faq-15.5*
15.5. How do I select the entire file in visual mode?

You can select the entire file in visual mode using ggVG. >

    gg - go to the beginning of the file.
    V  - Start linewise visual mode
    G  - goto the end of the file.
<
更多详情请阅读:

    |gg|
    |linewise-visual|
    |G|

 								*faq-15.6*
15.6. When I visually select a set of lines and press the > key to indent
      the selected lines, the visual mode ends. How can I reselect the
      region for further operation?  (or) How do I re-select the last
      selected visual area again?

You can use the "gv" command to reselect the last selected visual area. You
can also use the marks '< and '> to jump to the beginning or the end of the
last selected visual area.

更多详情请阅读:

    |gv|
    |'<|
    |'>|

 								*faq-15.7*
15.7. How do I jump to the beginning/end of a visually selected region?

You can use the "o" command to jump to the beginning/end of a visually
selected region.

更多详情请阅读:

    |v_o|

 								*faq-15.8*
15.8. When I select text with mouse and then press : to enter an ex
      command, the selected text is replaced with the : character. How do I
      execute an ex command on a text selected using the mouse similar to
      the text selected using the visual mode?

This will happen if you have configured Vim to use select mode instead of
Visual mode by setting the 'selectmode' option. Check the value of this
option: >

    :set selectmode?
<
This mode is known as selectmode and is similar to the visual mode. This
option is also automatically set when you use the "behave mswin" command.
Select mode looks like visual mode, but it is similar to the selection mode
in MS-Windows.

更多详情请阅读:

    |Select-mode|
    |'selectmode'|
    |09.4|
    |:behave|

 								*faq-15.9*
15.9. When I select a block of text using the mouse, Vim goes into
      selection mode instead of Visual mode. Why?

The 'selectmode' option controls whether Select mode will be started when
selecting a block of text using the mouse. To start Visual mode when
selecting text using mouse, remove the "mouse" value from the 'selectmode'
option: >

    :set selectmode-=mouse
<
Note that by default, the 'selectmode' option will be set to empty, so that
always visual mode is used.

更多详情请阅读:

    |'selectmode'|
    |Select-mode|
    |:behave|

 								*faq-15.10*
15.10. How do I visually select the last copy/pasted text?

You can use the '[ and '] marks to visually select the last copy/pasted
text. The '[ mark is set to the beginning of the last changed/yanked text
and the '] mark is set to the end of the last changed/yanked text. To
visually select this block of text use the command '[v']

更多详情请阅读:

    |'[|
    |']|
    |`a|
    |v|

=============================================================================
 								*faq-16*
SECTION 16 - COMMAND-LINE MODE ~

 								*faq-16.1*
16.1. How do I use the name of the current file in the command mode or an
      ex command line?

In the command line, the "%" character represents the name of the current
file. In some commands, you have to use `expand("%")` to get the filename: >

    :!perl %
<
Another example is to load the latex generated pdf file from the file you
are currently editing: >

    :!xpdf %<.pdf
<
更多详情请阅读:

    |:_%|
    |cmdline-special|
    |expand()|

 								*faq-16.2*
16.2. How do I edit the text in the Vim command-line effectively?

You can use the command-line window for editing Vim command-line text. To
open the Vim command-line window use the "q:" command in normal mode. In
command-line mode, use the CTRL-F key. In this window, the command line
history will be displayed. You can use normal Vim keys/commands to edit any
previous/new command line. To execute a command line, press the
enter/return key.

In a similar vain, the search history can be edited with "q/" and "q?"
commands.

更多详情请阅读:

    |cmdline-window|

 								*faq-16.3*
16.3. How do I switch from Vi mode to Ex mode?

You can use the Q command to switch from Vi mode to Ex mode. To switch from
Ex mode back to the Vi mode, use the `:vi` command.

更多详情请阅读:

    |Q|
    |gQ|
    |Ex-mode|
    |:vi|

 								*faq-16.4*
16.4. How do I copy the output from an ex-command into a buffer?

To copy the output from an ex-command into a buffer, you have to first get
the command output into a register. You can use the `:redir` command to get
the output into a register. For example, >

    :redir @a
    :g/HelloWord/p
    :redir END
<
Now the register "a" will contain the output from the ex command
`:g/HelloWord/p`. Now you can paste the contents of the register "a" into a
buffer. You can also send or append the output of an ex-command into a file
using the `:redir` command.

You can prefix the `:global` command with `:silent`, to avoid having the
lines printed to the screen.

To redirect the output from an ex-command to a file, you can use the
following set of commands: >

    :redir > myfile
    :g/HelloWord/p
    :redir END
<
更多详情请阅读:

    |:redir|
    |:silent|

 								*faq-16.5*
16.5. When I press the <Tab> key to complete the name of a file in the
      command mode, if there are more than one matching file names, then
      Vim completes the first matching file name and displays a list of all
      matching filenames. How do I configure Vim to only display the list
      of all the matching filenames and not complete the first one?

You can modify the 'wildmode' option to configure the way Vim completes
filenames in the command mode. In this case, you can set the 'wildmode'
option to "list": >

    :set wildmode=list
<
更多详情请阅读:

    |'wildmode'|

 								*faq-16.6*
16.6. How do I copy text from a buffer to the command line and from the
      command line to a buffer?

To copy text from a buffer to the command line, after yanking the text from
the buffer, use "<CTRL-R>0" in the command line to paste the text. You can
also yank the text to a specific register and use CTRL-R <register> to
paste the text to the command line.  You can use CTRL-R CTRL-W to paste the
word under the cursor in the command line.

To copy text from the command line into a buffer, you can paste the
contents of the : register using the ":p command. The most recently
executed command line is stored in the : register.

Another approach for copying and pasting text to and from the command line
is to open the command line window using q: from normal mode or CTRL-F from
the command-line mode. In the command line window you can use all the Vim
commands to edit the command line.

更多详情请阅读:

    |c_CTRL-R|
    |quote_:|
    |cmdline-window|

 								*faq-16.7*
16.7. How do I put a command onto the command history without executing it?

To put a command onto the command history without executing it, press the
<Esc> key to cancel the command.

An alternative solution, is to use the histadd() function like this: >

    :call histadd(':', 'echo strftime("%c")')
<
更多详情请阅读:

    |c_<Esc>|
    |histadd()|

 								*faq-16.8*
16.8. How do I increase the height of the command-line?

You can increase the height of the command-line by changing the 'cmdheight'
option: >

    :set cmdheight=2
<
更多详情请阅读:

    |'cmdheight'|
    |hit-enter|
    |05.7|

=============================================================================
 								*faq-17*
SECTION 17 - VIMINFO ~

 								*faq-17.1*
17.1. When I invoke Vim, I get error messages about illegal characters in
      the viminfo file. What should I do to get rid of these messages?

You can remove the $HOME/.viminfo or the $HOME/_viminfo file to get rid of
these error messages.

更多详情请阅读:

    |viminfo-errors|
    |viminfo-file-name|
    |viminfo|
    |21.3|

 								*faq-17.2*
17.2. How do I disable the viminfo feature?

By default, the viminfo feature is disabled. If the viminfo feature is
enabled by a system-wide vimrc file, then you can disable the viminfo
feature by setting the 'viminfo' option to an empty string in your local
.vimrc file: >

    :set viminfo=""
<
更多详情请阅读:

    |'viminfo'|

 								*faq-17.3*
17.3. How do I save and use Vim marks/commands across Vim sessions?

You can save and restore Vim marks across Vim sessions using the viminfo
file. To use the viminfo file, make sure the 'viminfo' option is not empty.
To save and restore Vim marks, the 'viminfo' option should not contain the
"f" flag or should have a value greater than zero for the "f" option.

You can also use the viminfo file to synchronize the commandline history
across different sessions using `:wvimfo` and `:rviminfo` commands together
with the FocusGained and FocusLost autocommands: >

    augroup viminfo
        au!
        au FocusLost   * wviminfo
        au FocusGained * rviminfo
    augroup end
<
Note, this will only work reliably, when Vim can detect the FocusLost
and FocusGained autocommands correctly. This means it should work with
GVim but might depend on your terminal for konsole vim.

更多详情请阅读:

    |21.3|
    |viminfo|
    |'viminfo'|
    |:wviminfo|
    |:rviminfo|
    |FocusLost|
    |FocusGained|

=============================================================================
 								*faq-18*
SECTION 18 - REMOTE EDITING ~

 								*faq-18.1*
18.1. How do I open a file with existing instance of gvim? What happened to
      the Vim 5.x OpenWithVim.exe and SendToVim.exe files?

Starting with Vim6, the OLE version of OpenWithVim.exe and SendToVim.exe
Vim utilities are replaced by the new client-server feature. To open the
file j.txt with an existing instance of Gvim (MyVim), use: >

    $ gvim --servername MyVim --remote-silent j.txt
<
To list the server names of all the currently running Vim instances, use >

    $ vim --serverlist
<
To get more information about client-server feature, read

    |client-server|

 								*faq-18.2*
18.2. How do I send a command to a Vim server to write all buffers to disk?

You can use the Vim remote server functionality to do this: >

    $ gvim --servername myVIM --remote-send "<C-\><C-N>:wall<CR>"
<
更多详情请阅读:

    |client-server|
    |CTRL-\_CTRL-N|
    |:wall|

 								*faq-18.3*
18.3. Where can I get the documentation about the Vim remote server
      functionality?

You can get more information about the Vim remote server functionality by
reading

    |client-server|

=============================================================================
 								*faq-19*
SECTION 19 - OPTIONS ~

 								*faq-19.1*
19.1. How do I configure Vim in a simple way?

You can use the `:options` command to open the Vim option window: >

    :options
<
This window can be used for viewing and setting all the options.

更多详情请阅读:

    |:options|

 								*faq-19.2*
19.2. How do I toggle the value of an option?

You can prefix the option with "inv" to toggle the value of the option: >

    :set invignorecase
    :set invhlsearch
<
You can also suffix the option with "!" to toggle the value: >

    :set ignorecase!
    :set hlsearch!
<
更多详情请阅读:

    |set-option|

 								*faq-19.3*
19.3. How do I set an option that affects only the current buffer/window?

Some of the Vim options can have a local or global value. A local value
applies only to a specific buffer or window. A global value applies to all
the buffers or windows.

When a Vim option is modified using the `:set` command, both the global and
local values for the option are changed. You can use the `:setlocal`
command to modify only the local value for the option and the `:setglobal`
command to modify only the global value.

You can use the `:setlocal` command to set an option that will affect only
the current file/buffer: >

    :setlocal textwidth=70
<
Note that not all options can have a local value. You can use `:setlocal`
command to set an option locally to a buffer/window only if the option is
allowed to have a local value.

You can also use the following command to set an option locally: >

    :let &l:{option-name} = <value>
<
更多详情请阅读:

    |:setlocal|
    |local-options|

 								*faq-19.4*
19.4. How do I use space characters for a Vim option value?

To use space characters in a Vim option value, you have to escape the space
character. For example: >

    :set tags=tags\ /usr/tags
<
更多详情请阅读:

    |option-backslash|

 								*faq-19.5*
19.5. Can I add (embed) Vim option settings to the contents of a file?

You can use modelines to add Vim option settings to the contents of a file.
For example, in a C file, you can add the following line to the top or the
bottom of the file: >

    /* vim:sw=4: */
<
This will set the 'shiftwidth' option to 4, when editing that C file.
For this to work, the 'modeline' option should be set. By default, the
'modeline' option is set. An alternative example is given in this document
in the first line.

The 'modelines' settings specifies the number of
lines that will be checked for the Vim set commands.

更多详情请阅读:

    |21.6|
    |modeline|
    |auto-setting|
    |'modeline'|
    |'modelines'|

 								*faq-19.6*
19.6. How do I display the line numbers of all the lines in a file?

You can set the 'number' option to display the line numbers for all the
lines. >

    :set number
<
更多详情请阅读:

    |'number'|

 								*faq-19.7*
19.7. How do I change the width of the line numbers displayed using the
      'number' option?

You can set the minimum number of columns to be used for line numbering by
setting the 'numberwidth' option: >

    :set numberwidth=3
<
This set's the width for the line number to 3 digits, which is enough, if
your buffer contains less than 999 lines. However, if your current buffer
contains more lines than 999, the 'numberwidth' will be adjusted accordingly,
so that the maximum line number will fit on the screen.

 								*faq-19.8*
19.8. How do I display (view) all the invisible characters like space, tabs
      and newlines in a file?

You can set the 'list' option to see all the invisible characters in your
file. >

    :set list
<
With this option set, you can view space characters, tabs, newlines,
trailing space characters and wrapped lines.

To not display the invisible characters (which is the default), you have to
reset the 'list' option: >

    :set nolist
    (or)
    :set list!
<
The `:set list!` command will toggle the current setting of the boolean
'list' option.

You can modify the 'listchars' option to configure how and which invisible
characters are displayed. For example, with the following command all the
trailing space characters will be displayed with a "." character. >

    :set listchars=trail:.
<
更多详情请阅读:

    |'listchars'|
    |'list'|

 								*faq-19.9*
19.9. How do I configure Vim to always display the current line and column
      number?

You can set the 'ruler' option to display current column and line number in
the status line: >

    :set ruler
<
更多详情请阅读:

    |'ruler'|

 								*faq-19.10*
19.10. How do I display the current Vim mode?

You can set the 'showmode' option to display the current Vim mode. In
Insert, Replace and Visual modes, Vim will display the current mode on the
last line. >

    :set showmode
<
更多详情请阅读:

    |'showmode'|

 								*faq-19.11*
19.11. How do I configure Vim to show pending/partial commands on the
       status line?

You can set the 'showcmd' option to display pending/partial commands in the
status line: >

    :set showcmd
<
更多详情请阅读:

    |'showcmd'|

 								*faq-19.12*
19.12. How do I configure the Vim status line to display different
       settings/values?

You can set the 'statusline' option to display different values/settings in
the Vim status line.

更多详情请阅读:

    |'statusline'|
    |'laststatus'|
    |'rulerformat'|
    |'ruler'|

 								*faq-19.13*
19.13. How do I configure Vim to display status line always?

You can set the 'laststatus' option to 2 to display the status line always. >

    :set laststatus=2
<
更多详情请阅读:

    |'laststatus'|

 								*faq-19.14*
19.14. How do I make a Vim setting persistent across different Vim
       invocations/instances/sessions?

To make a Vim option setting persistent across different Vim instances, add
your setting to the .vimrc or .gvimrc file. You can also use the `:mkvimrc`
command to generate a vimrc file for the current settings.

更多详情请阅读:

    |save-settings|
    |vimrc|
    |gvimrc|
    |vimrc-intro|
    |:mkvimrc|
    |initialization|

 								*faq-19.15*
19.15. Why do I hear a beep (why does my window flash) about 1 second after
       I hit the Escape key?

This is normal behavior. If your window flashes, then you've got the visual
bell on. Otherwise, you should hear a beep.

Vim needs a timeout to tell the difference between a simple escape and,
say, a cursor key sequence.  When you press a key in normal mode (and even
in insert mode) and that key is the beginning of a mapping, Vim waits a
certain amount of time to see if the rest of the mapping sequence follows.
If the mapping sequence is completed before a given timeout period, the
mapping for that sequence of keys is applied. If you interrupt the mapping,
the normal actions associated with the keys are executed.

For example, if you have a mapping defined as `:imap vvv Vim is great!!`
and you type "vvv" quickly, the "Vim is great!!" will be inserted into your
text. But if you type "vv v" then that is what will put into your text.
This is also true if you type "vvv" too slowly where "too slowly" is longer
than the value for the timeout option. Setting the timeout option to a
larger value can help alleviate problems that appear when using function
keys over a slow line.

更多详情请阅读:

    |'ttimeout'|

 								*faq-19.16*
19.16. How do I make the "c" and "s" commands display a "$" instead of
       deleting the characters I'm changing?

To make the "c" and "s" commands display a "$" instead of deleting the
characters, add the $ flag to the 'cpoptions' option: >

    :set cpoptions+=$
<
更多详情请阅读:

    |'cpoptions'|

 								*faq-19.17*
19.17. How do I remove more than one flag using a single `:set` command
       from a Vim option?

You can remove more than one flag from a Vim option using a single `:set`
command, by specifying the flags in exactly the same order as they appear
in the option. For example, if you use the following command to remove the
"t" and "n" flags from the 'formatoptions' option: >

    :set formatoptions-=tn
<
The "t" and "n" flags will be removed from the 'formatoptions' option, only
if the 'formatoptions' option contains these flags in this order: "tn".
Otherwise, it will not remove the flags. To avoid this problem, you can
remove the flags one by one: >

    :set formatoptions-=t formatoptions-=n
<
更多详情请阅读:

    |:set-=|

=============================================================================
 								*faq-20*
SECTION 20 - MAPPING KEYS ~

 								*faq-20.1*
20.1. How do I know what a key is mapped to?

To see what a key is mapped to, use the following commands: >

    :map <key>
    :map! <key>
<
You can also check the mappings in a particular mode using one of the
`:cmap`, `:nmap`, `:vmap`, `:imap`, `:omap`, etc commands.

To find out, where the key has been mapped, prefix the `:verbose` command: >

    :verbose :map <key>
<
更多详情请阅读:

    |map-listing|
    |map-overview|

 								*faq-20.2*
20.2. How do I list all the user-defined key mappings?

You can list all the user-defined key mappings using: >

    :map
<
更多详情请阅读:

    |map-listing|

 								*faq-20.3*
20.3. How do I unmap a previously mapped key?

You can unmap a previously mapped key using the `:unmap` command: >

    :unmap <key>
    :unmap! <key>
<
For mode specific mappings, you can use one of the these commands: >

    :nunmap
    :vunmap
    :ounmap
    :iunmap
    :lunmap
    :cunmap
<
The following command will fail to unmap a buffer-local mapped key: >

    :unmap <key>
<
To unmap a buffer-local mapped key, you have to use the <buffer> keyword in
the unmap command: >

    :unmap <buffer> <key>
    :unmap! <buffer> <key>
<
更多详情请阅读:

    |:unmap|
    |map-modes|
    |:map-local|
    |mapleader|

 								*faq-20.4*
20.4. I am not able to create a mapping for the <xxx> key. What is wrong?

1) First make sure, the key is passed correctly to Vim. To determine if
   this is the case, put Vim in Insert mode and then hit CTRL-V (or
   CTRL-Q if your CTRL-V is remapped to the paste operation (e.g. on
   Windows if you are using the mswin.vim script file) followed by your
   key.

   If nothing appears in the buffer (and assuming that you have
   'showcmd' on, ^V remains displayed near the bottom right of the Vim
   screen), then Vim doesn't get your key correctly and there is nothing
   to be done, other than selecting a different key for your mapping or
   using GVim, which should recognise the key correctly.

2) Possibly, Vim gets your key, but sees it as no different than
   something else. Say you want to map <Ctrl-Right>, then in Insert mode
   hit CTRL-K followed by <Ctrl-Right>. If Vim displays <C-Right> it has
   correctly seen the keystroke and you should be able to map it (by
   using <C-Right> as your {lhs}). If it displays <Right> it has seen
   the keystroke but as if you hadn't held <Ctrl> down: this means your
   temrinal passes <Ctrl-Right> as if it were just <Right>. Anything else
   means the key has been misidentified.

3) If the key is seen, but not as itself and not as some recognizable
   key, then there is probably an error in the terminal library for the
   current terminal (termcap or terminfo database). In that case >

        :set term?
<
   will tell you which termcap or terminfo Vim is using. You can try to
   tell vim, what termcode to use in that terminal, by adding the
   following to your vimrc: >

        if &term == <termname>
            set <C-Right>=<keycode>
        endif
<
   where <termname> above should be replaced by the value of 'term'
   (with quotes around it) and <keycode> by what you get when hitting
   CTRL-V followed by <Ctrl-Right> in Insert mode (with nothing around
   it). <C-Right> should be left as-is (9 characters). Don't forget that
   in a `:set` command, white space is not allowed between the equal sign
   and the value, and any space, double quote, vertical bar or backslash
   present as part of the value must be backslash-escaped.

   Now you should be able to see the keycode corresponding to the key
   and you can create a mapping for the key using the following command: >

        :map <C-Right>  <your_command_to_be_mapped>
<
更多详情请阅读:

    |map-keys-fails|
    |:map-special-keys|
    |key-codes|

 								*faq-20.5*
20.5. Why does mapping the <C-...> key not work?

The only <Ctrl>-<printable-key> chords which Vim can reliably detect
(because they are defined in the ASCII standard) are the following: >

        CTRL-@                 0x00            NUL
        CTRL-A to CTRL-Z       0x01 to 0x1A
        CTRL-a to CTRL-z       0x01 to 0x1A
        CTRL-[                 0x1B            ESC
        CTRL-\                 0x1C
        CTRL-]                 0x1D
        CTRL-^                 0x1E
        CTRL-_                 0x1F
        CTRL-?                 0x7F            DEL
<
Most of these, however, already have a function in Vim (and some are
aliases of other keys: CTRL-H and <BS>, CTRL-I and <Tab>, CTRL-M and <Enter>,
CTRL-[ and <Esc>, CTRL-? and <Del>).

The "safest" keys to use in Vim for the {lhs} of a mapping are the F
keys, with or without Shift: <F2> to <F12> and <S-F1> to <S-F12>. (Some
OSes, including mine, intercept <Ctrl-Fn> and <Alt-Fn>, which never reach an
application program such as vim or gvim).

You can try other combinations of <Ctrl> + any key, but they may either
not work everywhere (e.g. the terminal might not pass that key to Vim,
or they might have unintended side effects (e.g. mapping <C-I> means
also to map <Tab>).

This is a known issue, that has been discussed and might be implemented
in the future to enable Vim to distinguish between various keys even in
console mode. (e.g.
https://groups.google.com/d/msg/vim_dev/2bp9UdfZ63M/sajb9KM0pNYJ)

 								*faq-20.6*
20.6. How do I map the numeric keypad keys?

First make sure that the numeric keypad keys are passed to Vim. Next, you
can use the following command to map the numeric keypad keys: >

    :map <kSomething>  <your_command>
<
where, <kSomething> can be kHome, kEnd, kPageUp, kPageDown, kPlus, kMinus,
kDivide, kMultiply, kEnter, etc.

更多详情请阅读:

    |key-codes|
    |terminal-options|

 								*faq-20.7*
20.7. How do I create a mapping that works only in visual mode?

You can create mappings that work only in specific modes (normal, command,
insert, visual, etc). To create a mapping that works only in the visual
mode, use the `:vmap` command: >

    :vmap <F3> <your mapping here>
<
This mapping will work in visual and select mode. If you want the map to
work only in visual mode (excluding select mode), use:
 >

    :xmap <F3> <your mapping here>
<
and to have the mapping only work in select mode (but not visual mode),
use: >

    :smap <F3> <your mapping here>
<
更多详情请阅读:

    |:vmap|
    |:xmap|
    |:smap|
    |map-modes|
    |40.1|

 								*faq-20.8*
20.8. How do I create a mapping that works only in normal and operator
   pending mode (but not in visual mode)?

Using `:map` creates a mapping that works in normal, visual+select mode and
operator pending mode. You can use `:nmap` to have the mapping only work in
normal mode and `:vmap` to have the mapping only be defined for visual and
select mode or use `:omap` to have the mapping only defined in operator
pending mode.

But if you want to have a mapping defined, that works in both operator
pending mode and normal mode, but not in visual and select mode, you need
to first define the mapping using `:map` and afterwards delete the mapping
for visual and select mode:

	:map <f3> <your mapping here>
	:vunmap <f3>

 								*faq-20.9*
20.9. In a Vim script, how do I know which keys to use for my mappings, so
      that the mapped key will not collide with an already used key?

Vim uses most of the keys in the keyboard. You can use the <leader> prefix
in maps to define keys which will not overlap with Vim keys. For example: >

    :map <leader>S <C-W>s
    :map <leader>j <C-W>j
    :map <leader>k <C-W>k
<
where by default <leader> gets substituted with a backslash (\), so the
user would enter >

        \s
        \j
        \k
<
to invoke the above map commands. The user can change the mapleader
variable to be whatever they wanted: >

    :let mapleader = ","
<
When writing a plugin or other script, more often than not, it is advisable
to use `:noremap` instead of `:map` to avoid side effects from user defined
mappings.

更多详情请阅读:

    |<Leader>|
    |<LocalLeader>|
    |write-plugin|

 								*faq-20.10*
20.10. How do I map the escape key?

You can map the Escape key to some other key using the `:map` command. For
example, the following command maps the escape key to CTRL-O. >

    :map <C-O> <Esc>
<
 								*faq-20.11*
20.11. How do I map a key to perform nothing?

You can map a key to <Nop> to perform nothing when the key is pressed. For
example, with the following mappings, the <F7> key will do nothing when
pressed. >

    :map <F7> <Nop>
    :map! <F7> <Nop>
<
更多详情请阅读:

    |<Nop>|
    |:map|
    |:map!|
    |map-modes|

 								*faq-20.12*
20.12. I want to use the <Tab> key to indent a block of text and <Shift-Tab>
       key to unindent a block of text. How do I map the keys to do this?
       This behavior is similar to textpad, visual studio, etc.

Use the following mapping: >

    :inoremap <S-Tab> <C-O><lt><lt>
    :nnoremap <Tab> >>
    :nnoremap <S-Tab> <lt><lt>
    :vnoremap <Tab> >
    :vnoremap <S-Tab> <lt>
<
Note, that the <S-Tab> mapping will work only if Vim receives the correct
key sequence. This is mostly the case with GUI Vim.

更多详情请阅读:

    |:inoremap|
    |:nnoremap|
    |:vnoremap|
    |<S-Tab>|
    |i_CTRL-O|
    |>>|
    |<<|
    |<lt>|

 								*faq-20.13*
20.13. In my mappings the special characters like <CR> are not recognized.
       How can I configure Vim to recognize special characters?

Check the value of the 'cpoptions' option: >

    :set cpoptions?
<
If this option contains the "<" flag, then special characters will not be
recognized in mappings. Remove the "<" flag from 'cpoptions' option: >

    :set cpo-=<
<
Also, check the value of the 'compatible' option: >

    :set compatible?
<
The 'compatible' option must be reset: >

    :set nocompatible
<
更多详情请阅读:

    |'cpoptions'|
    |'compatible'|

 								*faq-20.14*
20.14. How do I use the "|" to separate multiple commands in a map?

You can escape the "|" character using backslash (\) to use "|" in a map. >

    :map _l :!ls \| more<CR>
<
You can also try the following command: >

    :map _l :!ls <bar> more<CR>
<
There are also other ways to do this.

更多详情请阅读:

    |map_bar|

 								*faq-20.15*
20.15. If I have a mapping/abbreviation whose ending is the beginning of
       another mapping/abbreviation, how do I keep the first from expanding
       into the second one?

Instead of using the `:map lhs rhs` command, use the `:noremap lhs rhs`
command. For abbreviations, use "noreabbrev lhs rhs". The "nore" prefix
prevents the mapping or abbreviation from being expanded again.

更多详情请阅读:

    |:noremap|
    |:noreabbrev|

 								*faq-20.16*
20.16. Why does it take a second or more for Vim to process a key,
       sometimes when I press a key?

Make sure you have not defined a mapping for this key using the following
command: >

    :map <key>
<
If a mapping is defined for this key and the mapped key contains more than
one character, then Vim will wait for the next character to be pressed to
determine whether it is the mapped key or not. For example, if you have
mapped "ab", then if you press "a", Vim will wait for the next key to be
pressed. If the next key is "b", Vim will execute the mapped sequence.
Otherwise, Vim will proceed with the normal processing of "a" followed by
the next key. If the 'timeout' option is set (which is the default), then
Vim will timeout after waiting for the period specified with the
'timeoutlen' option (default is 1 second).

更多详情请阅读:

    |map-typing|
    |'timeoutlen'|
    |'ttimeoutlen'|
    |'timeout'|
    |'ttimeout'|
    |vt100-cursor-keys|
    |slow-fast-terminal|

 								*faq-20.17*
20.17. How do I map a key to run an external command using a visually
       selected text?

You can the `:vmap` command to map a key in the visual mode. In the mapped
command sequence, you have to first yank the text. The yanked text is
available in the '"' register. Now, you can use the contents of this
register to run the external command. For example, to run the external
command "perldoc" on a visually selected text, you can use the following
mapping: >

    :vmap <F7> y:!exec "!perldoc '" . @" . "'"<CR>
<
If you want the mapping to work in the visual mode, but not with the
highlighted text, you can use the following command: >

    :vmap <F7> :<C-U>!perldoc <cword><CR>
<
The above mapping will use the word under the cursor instead of the
highlighted text. Note the use of the <C-U> before invoking the "perldoc"
external command. The <C-U> is used to erase the range of text selected in
the visual mode and displayed on the command line. If the visual range is
not removed using <C-U>, then the output from the external command will
replace the visually selected text.

更多详情请阅读:

    |:vmap|
    |quote_quote|
    |:let-register|
    |c_CTRL-U|
    |:!cmd|

 								*faq-20.18*
20.18. How do I map the CTRL-I key while still retaining the functionality
       of the <Tab> key?

The CTRL-I key and the <Tab> key produce the same keycode, so Vim cannot
distinguish between the CTRL-I and the <Tab> key. When you map the CTRL-I
key, the <Tab> key is also mapped (and vice versa). The same restriction
applies for the CTRL-[ key and the <Esc> key.

更多详情请阅读:

    |keycodes|

 								*faq-20.19*
20.19. How do I define a map to accept a count?

Use the @= command to use an expression. For example, >

    nnoremap = @='3l'
<
Now you can specify a count to the "=" command.

    |complex-repeat|

 								*faq-20.20*
20.20. How can I make my normal mode mapping work from within Insert
       Mode?

Mappings in normal mode can be executed after CTRL-O from insert mode as
well but if there are more commands included in the mapping {rhs}, only the
first one will be executed in normal mode and the rest of {rhs} will be
printed literally in insert mode. One of ways to workaround this problem is
to make {rhs} be one command, via wrapping it to the function. For example: >

    function GetFontNameOfFirstChar()
    normal! 0
    echo getfontname()
    endfunction
<
    :nmap <F9> :call GetFontNameOfFirstChar()<CR>

A more technical and detailed solution to this problem follows and can
be found at https://groups.google.com/group/vim_dev/msg/75f1f2dfc00908bb

Not every normal mode-mapping is automatically suitable for execution via
CTRL-O from within insert mode; you need to explicitly design your mappings
for that purpose.

The CTRL-O command allows execution of one normal mode command from
within insert mode, then returns to insert mode. If a normal mode mapping
concatenates multiple normal mode commands, this breaks down in temporary
normal mode and literally inserts the second part of the command into the
buffer instead. To support execution of normal mode mappings from within
insert mode, these strategies can be used:

1) Instead of concatenating multiple normal mode commands, use one `:normal`
    mapping: >

    :nnoremap <silent> zC :<C-U>normal! zCVzC<CR>
<
2) Concatenate multiple Ex commands via <Bar> on the rhs: >

    :nnoremap zC :<C-U>call MyMap1()<Bar>call MyMap2()<CR>
<
3) Shadow normal mode mappings by insert mode mappings that
    re-enter normal mode, then invoke the normal mode mapping: >

    :nnoremap <silent> <SID>MyMap2 :<C-U>call MyMap2()<CR>
    :inoremap <silent> <script> <SID>MyMap2 <C-\><C-O><SID>MyMap2
    :nnoremap <silent> <script> zC <SID>MyMap1<SID>MyMap2
<
4) Normal mode mappings that consist of multiple Ex command lines (and
    where Ex commands cannot be concatenated via <Bar>) replace `:<C-U>`
    with <SID>NM; the <SID>NM mapping enters normal mode for one ex command
    line: >

    :nnoremap <silent> <SID>NM :<C-U>
    :inoremap <silent> <SID>NM <C-\><C-O>:
    :nnoremap <silent> <script> zC <SID>MyMap1<SID>NMcall MyMap2()<CR>
<
5)  If none of the above is possible, at least force normal mode for
    subsequent commands via CTRL-\ CTRL-N to avoid accidental insertion
    of the remainder of the mapping. >

    :nnoremap zC zC<C-\><C-N>VzCzz
<

更多详情请阅读:

    |i_CTRL-O|
    |map_bar|
    |i_CTRL-\_CTRL-O|
    |CTRL-\_CTRL-N|

=============================================================================
 								*faq-21*
SECTION 21 - ABBREVIATIONS ~

 								*faq-21.1*
21.1. How do I auto correct misspelled words?

You can auto correct misspelled words using abbreviations. For example, the
following abbreviation can be used to correct "teh" with "the": >

    :abbreviate teh the
<
Vim supports abbreviations in insert mode, replace mode and command-line
mode.

更多详情请阅读:

    |24.7|
    |abbreviations|
    |Q_ab|

 								*faq-21.2*
21.2. How do I create multi-line abbreviations?

You can create multi-line abbreviations by embedding the "<CR>"
key code in the text: >

    iabbrev #c --------------<CR>-- Date:<CR>--<CR>---------
<
With the above abbreviation, when you type #c, it will be expanded to
the following text:

--------------
-- Date:
--
---------

更多详情请阅读:

    |abbreviations|

 								*faq-21.3*
21.3. When my abbreviations are expanded, an additional space character is
      added at the end of the expanded text. How do I avoid this character?

To avoid an additional space character at the end of the expanded text, you
can expand the abbreviation by pressing the CTRL-] key.  The abbreviation
will be expanded without adding a space character at the end.

Another alternative is to use the following function and command: >

    function! Eatchar(pat)
        let c = nr2char(getchar())
        return (c =~ a:pat) ? '' : c
    endfunction
    command! -nargs=+ Iabbr execute "iabbr" <q-args> . "<C-R>=Eatchar('\\s')<CR>"
<
Now, define your abbreviations using the new "Iabbr" command instead of the
builtin `:iabbrev` command. With this command, after expanding the
abbreviated text, the next typed space character will be discarded.

更多详情请阅读:

    |abbreviations|

 								*faq-21.4*
21.4. How do I insert the current date/time stamp into the file?

You can use the strftime() function to insert the current data/time stamp
in a file. For example, you can use the following abbreviation: >

    iabbrev dts <C-R>=strftime("%y/%m/%d %H:%M")<CR>
<
With this abbreviation, when you type dts in insert mode, it will be
expanded to the date/time stamp.

Some other forms of the above abbreviation are listed below: >

    iabbrev mdyl <C-R>=strftime("%a %d %b %Y")<CR>
    iabbrev mdys <C-R>=strftime("%y%m%d")<CR>
    iabbrev mdyc <C-R>=strftime("%c")<CR>
    iabbrev hml  <C-R>=strftime("%d/%m/%y %H:%M:%S")<CR>
    iabbrev hms  <C-R>=strftime("%H:%M:%S")<CR>
<
更多详情请阅读:

    |strftime()|
    |i_CTRL-R|

 								*faq-21.5*
21.5. How do I prevent an abbreviation from expanding in insert mode?

You can prevent an abbreviation from expanding in insert mode by typing
CTRL-V before the character after the abbreviated word.

更多详情请阅读:

    |abbreviations|

=============================================================================
 								*faq-22*
SECTION 22 - RECORD AND PLAYBACK ~

 								*faq-22.1*
22.1. How do I repeat an editing operation (insertion, deletion, paste,
      etc)?

You can repeat the last editing operation using the "." command. This will
repeat the last simple change like a insert, delete, change, paste, etc.

更多详情请阅读:

    |04.3|
    |single-repeat|
    |Q_re|

 								*faq-22.2*
22.2. How I record and repeat a set of key sequences?

You can use the "q" command in normal mode to record a set of key sequences
and store it in a register. For example, in the normal mode you can press q
followed by a register name {0-9a-bA-Z"} to start the recording.  To
end/stop the recording press q again. You can playback/repeat the recorded
key sequences by pressing @ followed by the register name. e.g. @a.

Another approach is to start Vim with the "-w" command-line argument. >

    $ vim -w <file_name>
<
Vim will record all the characters typed in the session in the
specified file "file_name". You can use the recorded file with the "-s"
command line argument to play it back: >

    $ vim -s <file_name>
<
更多详情请阅读:

    |10.1|
    |recording|
    |-w|
    |-s|

 								*faq-22.3*
22.3. How do I edit/modify a recorded set of key sequences?

The recorded key sequences are stored in a register. You can paste the
contents of the register into a Vim buffer, edit the pasted text and again
yank the text into the register. You can also use the `:let` command to
modify the register. For example: >

    :let @a = "iHello World\<Esc>"
<
更多详情请阅读:

    |recording|
    |10.1|
    |:let-register|
    |<>|
    |'cpoptions'|

 								*faq-22.4*
22.4. How do I write recorded key sequences to a file?

The recorded key sequences are stored in a register. You can paste the
contents of the register into a Vim buffer. Now you can save the buffer
into a file. You can also modify the pasted text and again yank into the
register to modify the recorded key sequence. For example, if you record a
set of key sequences using qa ..... q. The recorded key sequences are
stored in the register "a". You can paste the contents of register "a"
using "ap.

更多详情请阅读:

    |recording|
    |10.1|

 								*faq-22.5*
22.5. I am using register 0 to record my key sequences (i.e. q0 .... q).
      In the recorded key sequences, I am yanking some text. After the
      first replay of the recorded key sequence, I am no longer able to
      play it back.

Register 0 contains the text from the last yank operation. In your recorded
key sequence, when the yank is performed, register 0 is overwritten with
the yanked text. So your recording stored in register 0 is lost. You have
to use some other register.

更多详情请阅读:

    |registers|

=============================================================================
 								*faq-23*
SECTION 23 - AUTOCOMMANDS ~

 								*faq-23.1*
23.1. How do I execute a command when I try to modify a read-only file?

You can use the FileChangedRO autocommand event to execute a command when a
read-only file is modified. For example, you can use this event to checkout a
read-only file: >

    :autocmd FileChangedRO * call MyCheckoutFunction()
<
更多详情请阅读:

    |FileChangedRO|

 								*faq-23.2*
23.2. How do I execute a command every time when entering a buffer?

You can use the BufEnter autocommand event to execute a command every time
when entering a buffer. For example: >

    :autocmd BufEnter *.c set formatoptions=croqt
<
更多详情请阅读:

    |BufEnter|

 								*faq-23.3*
23.3. How do I execute a command every time when entering a window?

You can use the WinEnter autocommand event to execute a command every time
when entering a window. For example: >

    :autocmd WinEnter *.c call MyFunction()
<
更多详情请阅读:

    |WinEnter|

 								*faq-23.4*
23.4. From an autocmd, how can I determine the name of the file or the
      buffer number for which the autocommand is executed?

You can use the special words <afile> or <abuf> in an autocmd to get the
name of the file or the buffer number for which the autocommand is
executed.

更多详情请阅读:

    |:<afile>|
    |:<abuf>|
    |:<amatch>|

 								*faq-23.5*
23.5. How do I automatically save all the changed buffers whenever Vim
      loses focus?

You can define an autocommand for the FocusLost event which will save all
the modified buffers whenever Vim loses focus: >

    :autocmd FocusLost * wall
<
更多详情请阅读:

    |FocusLost|
    |:wall|

 								*faq-23.6*
23.6. How do I execute/run a function when Vim exits to do some cleanup?

You can use VimLeave autocmd event to execute a function just before Vim
exits. For example, >

    :autocmd VimLeave * call MyCleanupFunction()
<
更多详情请阅读:

    |VimLeave|

=============================================================================
 								*faq-24*
SECTION 24 - SYNTAX HIGHLIGHT ~

 								*faq-24.1*
24.1. How do I turn off/on syntax highlighting?

By default, the Vim syntax highlighting is turned off. To enable the syntax
highlighting, you can use one of the following commands: >

    :syntax enable
<
    or >

    :syntax on
<
To disable the syntax highlighting, you can use the following command: >

    :syntax off
<
更多详情请阅读:

    |06.1|
    |06.4|
    |:syntax-enable|
    |:syntax-on|
    |:syn-clear|

 								*faq-24.2*
24.2. How do I change the background and foreground colors used by Vim?

Vim uses the "Normal" highlight group for the background and foreground
colors. To change the foreground/background colors, you have to modify the
"Normal" highlight group. For example, to set the background color to blue
and foreground color to white, you can use >

    :highlight Normal ctermbg=blue ctermfg=white guibg=blue guifg=white
<
If you are using the Motif or the Athena version of the GUI Vim, then you
can modify the foreground and background resource names in the .Xdefaults
files to change the colors: >

    Vim.foreground:     Black
    Vim.background:     Wheat
<
You can also use the "-foreground" and "-background" command-line arguments
to specify the foreground and background colors. These arguments are
supported only in the Motif or Athena versions: >

    $ gvim -foreground Black -background Wheat
<
更多详情请阅读:

    |:highlight|
    |.Xdefaults|
    |-gui|

 								*faq-24.3*
24.3. How do I change the highlight colors to suit a dark/light background?

You can set the 'background' option to either "dark" or "light" to change
the highlight colors to suit a dark/light background: >

    :set background=dark
<
更多详情请阅读:

    |'background'|
    |06.2|

 								*faq-24.4*
24.4. How do I change the color of the line numbers displayed when the
      `:set number` command is used?

The line numbers displayed use the LineNr highlighting group. To display
the current colors used, use >

    :hi LineNr
<
To change the color modify the LineNr highlight group. For example: >

    :hi linenr guifg=red guibg=black
<
This will give red numbers on a black background in GVIM.

更多详情请阅读:

    |:highlight|

 								*faq-24.5*
24.5. How do I change the background color used for a Visually selected
      block?

You can modify the "Visual" highlight group to change the color used for a
visually selected block: >

    :highlight Visual guibg=red
<
更多详情请阅读:

    |:highlight|
    |hl-Visual|

 								*faq-24.6*
24.6. How do I highlight the special characters (tabs, trailing spaces, end
      of line, etc) displayed by the 'list' option?

You can modify the "NonText" and "SpecialKey" highlight groups to highlight
the special characters displayed by the 'list' option: >

    :highlight NonText guibg=red
    :highlight SpecialKey guibg=green
<
The "NonText" highlighting group is used for "eol", "extends" and
"precedes" settings in the 'listchars' option.  The "SpecialKey"
highlighting group is used for the "tab" and "trail" settings.

更多详情请阅读:

    |'listchars'|
    |hl-NonText|
    |hl-SpecialKey|

 								*faq-24.7*
24.7. How do I specify a colorscheme in my .vimrc/.gvimrc file, so that Vim
      uses the specified colorscheme every time?

You can specify the color scheme using the `:colorscheme` command in your
.vimrc or .gvimrc file: >

    colorscheme evening
<
更多详情请阅读:

    |:colorscheme|

 								*faq-24.8*
24.8. Vim syntax highlighting is broken. When I am editing a file, some
      parts of the file is not syntax highlighted or syntax highlighted
      incorrectly.

Vim doesn't read the whole file to parse the text for syntax highlighting.
It starts parsing wherever you are viewing the file. That saves a lot of
time, but sometimes the colors are wrong. A simple fix is refreshing the
screen using the CTRL-L key. Or scroll back a bit and then forward again.
You can also use the command: >

    :syntax sync fromstart
<
Note that this might considerably slow down the screen refreshing.

更多详情请阅读:

    |:syn-sync|
    |:syn-sync-first|

 								*faq-24.9*
24.9. Is there a built-in function to syntax-highlight the corresponding
      matching bracket?

Yes. Vim includes the matchparen Plugin as standard plugin that is enabled
by default. Whenever the cursor moves over an item defined with the
'matchpairs' option, Vim will highlight the corresponding bracket using the
MatchParen highlighting group.

However, if the corresponding parenthesis is not visible in the current
window, the cursor won't jump to it.

The matchit plugin provides a similar function, that lets the cursor
jump to related items (e.g. "if", "else", "endif" items) and skips
matches in comments. This uses the % command to jump to corresponding
items. Though both plugins provide similar functions they are unrelated
and work differently.

更多详情请阅读:

    |matchparen|
    |'matchpairs'|
    |matchit-install|
    |matchit-intro|

 								*faq-24.10*
24.10. How do I turn off the C comment syntax highlighting?

You can use the following command to turn off C comment syntax
highlighting: >

    :highlight clear comment
<
更多详情请阅读:

    |ft-c-syntax|

 								*faq-24.11*
24.11. How do I add my own syntax extensions to the standard syntax files
       supplied with Vim?

You should not modify the syntax files supplied with Vim to add your
extensions. When you install the next version of Vim, you will lose your
changes. Instead you should create a file under the ~/.vim/after/syntax
directory with the same name as the original syntax file and add your
additions to this file.

更多详情请阅读:

    |mysyntaxfile-add|
    |'runtimepath'|

 								*faq-24.12*
24.12. How do I replace a standard syntax file that comes with the Vim
       distribution with my own syntax file?

You can replace a standard syntax file that comes with the Vim distribution
by creating a file with the same name as the original syntax file and
placing it in the vim runtime syntax (~/.vim/syntax) directory. For
example, to replace the c.vim syntax file in a Unix system, place the new
c.vim in the ~/.vim/syntax directory. In a MS-Windows system, place the new
syntax file in the $HOME/vimfiles/syntax or $VIM/vimfiles/syntax directory.

更多详情请阅读:

    |mysyntaxfile-replace|
    |44.11|
    |mysyntaxfile|

 								*faq-24.13*
24.13. How do I highlight all the characters after a particular column?

You can use the `:match` command to highlight all the characters after a
particular column: >

    :match Todo '\%>75v.\+'
<
This will highlight all the characters after the 75th column.

You can also set the 'colorcolumn' option to highlight a particular
column:

   :set colorcolumn=+2

which highlights 2 columns after the current 'textwidth' setting
(alternatively, you can use the exact column number).

更多详情请阅读:

    |:match|
    |/\%v|
    |/\+|
    |/.|
    |'colorcolumn'|

 								*faq-24.14*
24.14. How do I convert a source file (.c, .h, etc) with the Vim syntax
       highlighting into a HTML file?

You can use the 2html.vim script to convert a source file into a HTML file
with the Vim syntax highlighting. Use the following command: >

    :TOhtml
<
更多详情请阅读:

    |convert-to-HTML|
    |:TOhtml|

 								*faq-24.15*
24.15. How do I list the definition of all the current highlight groups?

You can list the definition of all the current highlight groups using the
`:highlight` (without any arguments) ex command.

更多详情请阅读:

    |:highlight|

 								*faq-24.16*
24.16. How can I embed one syntax highlighting language into another one?

It is possible to include one syntax highlighting into another one,
however most of the currently deployed syntax highlighting scripts are
not prepared to be included into another syntax script.

You can however create your own custom script to define your own
regions, which will be highlighted with a different language.

See the wiki for a comprehensive solution:

    http://vim.wikia.com/wiki/Different_syntax_highlighting_within_regions_of_a_file

更多详情请阅读:

    |:syn-include|
    |sh-awk|

=============================================================================
 								*faq-25*
SECTION 25 - VIM SCRIPT WRITING ~

 								*faq-25.1*
25.1. How do I list the names of all the scripts sourced by Vim?

You can use the `:scriptnames` command to list the names of all the scripts
sourced by Vim: >

    :scriptnames
<
更多详情请阅读:

    |:scriptnames|

 								*faq-25.2*
25.2. How do I debug Vim scripts?

Vim has built-in support for a primitive debugger to debug Vim plugins and
scripts. Using this debugger you can set breakpoints and step through the
plugin functions.

更多详情请阅读:

    |debug-scripts|
    |-D|

 								*faq-25.3*
25.3. How do I locate the script/plugin which sets a Vim option?

You can use the `:verbose` command to locate the plugin/script which last
modified a Vim option. For example: >

    :verbose set textwidth?
<
更多详情请阅读:

    |:set-verbose|
    |:verbose|

 								*faq-25.4*
25.4. I am getting some error/informational messages from Vim (possibly
      when running a script), the messages are cleared immediately. How do
      I display the messages again?

You can use the `:messages` command to display the previous messages. >

    :messages
<
更多详情请阅读:

    |:messages|
    |:echoerr|
    |:echomsg|
    |message-history|

 								*faq-25.5*
25.5. How do I save and restore a plugin specific information across Vim
      invocations?

Vim will save and restore global variables that start with an uppercase
letter and don't contain a lower case letter. For this to work, the
'viminfo' option must contain the "!" flag. Vim will store the variables in
the viminfo file.

更多详情请阅读:

    |'viminfo'|
    |viminfo-file|
    |variables|

 								*faq-25.6*
25.6. How do I start insert mode from a Vim function?

You can use the `:startinsert` command to start the insert mode from inside
a Vim function.

更多详情请阅读:

    |:startinsert|

 								*faq-25.7*
25.7. How do I change the cursor position from within a Vim function?

You can use the cursor() function to position the cursor. >

        call cursor(lnum, col)
<
Alternatively, use the setpos() function: >

        call setpos('.', [bufnum, lnum, col, off])
<
which set's the cursor in the buffer bufnum to line lnum, column col and
offset for 'virtualedit'. You can use the getpos() function, to return a
list with these values, that can then be fed back to the setpos() function.

If you want to save and restore the viewpoint on a window, use the
winsaveview() and winrestview() function calls.

You can also use the following command to change the cursor position: >

        exe "normal! " . lnum . "G" . col . "|"
<
更多详情请阅读:

    |cursor()|
    |bar|
    |getpos()|
    |setpos()|
    |winsaveview()|
    |winrestview()|

 								*faq-25.8*
25.8. How do I check the value of an environment variable in the .vimrc
      file?

You can use prefix the environment variable name with the "$" character to
use it from a Vim script/function.  You can refer to the value of an
environment variable using the $env_var syntax: >

    if $EDITOR == 'vi'
    endif
<
更多详情请阅读:

    |expr-env|

 								*faq-25.9*
25.9. How do I check whether an environment variable is set or not from a
      Vim function?

You can use the exists() function to check for the existence of an
environment variable. >

    if exists("$MY_ENV_VAR")
    endif
<
更多详情请阅读:

    |exists()|
    |expr-env|

 								*faq-25.10*
25.10. How do I call/use the Vim built-in functions?

You can use the `:call` command to invoke a Vim built-in function: >

    :call cursor(10,20)
<
You can use the `:echo` command to echo the value returned by a function: >

    :echo char2nr('a')
<
You can use the `:let` command to assign the value returned by a function
to a variable: >

    :let a = getline('.')
<
To store the return value from a function into a Vim register, you can use
the following command: >

    :let @a = system('ls')
<
The above command will store the output of the "ls" command into
the register "a".

更多详情请阅读:

    |:call|
    |:echo|
    |:let|
    |:let-register|
    |user-functions|
    |usr_41.txt|

 								*faq-25.11*
25.11. I am using some normal mode commands in my Vim script. How do I
       avoid using the user-defined mappings for these normal mode commands
       and use the standard Vim functionality for these normal mode
       commands?

You can use the `:normal!` command in your script to invoke a normal-mode
command. This will use the standard functionality of the normal mode
command and will not use the user-defined mapping.

更多详情请阅读:

    |:normal|

 								*faq-25.12*
25.12. How do I get the current visually selected text into a Vim variable
       or register?

You can get the current visually selected text into a Vim variable by
yanking the text into Vim register and then assigning the contents of the
register into the variable: >

    :normal! gvy
    :let myvar = @"
<
The above command copies the visually selected text into the variable
"myvar".

You can also use the command: >

    :normal! gv"*y
<
In the above command, gv reselects the last visually selected text and the
rest of the command copies the selected text into the * (clipboard)
register. Alternatively, you can set the "a" flag in the 'guioptions'
option to automatically copy a visually selected text into the * register.
To do this as part of a visual map, you can use a command similar to the
one shown below: >

    :vmap <F3> "*y:call ...
<

更多详情请阅读:

    |gv|
    |:normal|
    |:let-@|
    |quotestar|
    |clipboard|
    |registers|

 								*faq-25.13*
25.13. I have some text in a Vim variable "myvar". I would like to use this
       variable in a `:s` substitute command to replace a text "mytext".
       How do I do this?

You can use the `:execute` command to evaluate the variable: >

    :execute '%s/mytext/' . myvar . '/'
<
更多详情请阅读:

    |:execute|

You can also use "\=" in the substitute command to evaluate the variable: >

    :%s/mytext/\=myvar/
<
更多详情请阅读:

    |sub-replace-special|

 								*faq-25.14*
25.14. A Vim variable (bno) contains a buffer number. How do I use this
       variable to open the corresponding buffer?

The `:buffer` command will not accept a variable name. It accepts only a
buffer number or buffer name. You have to use the `:execute` command to
evaluate the variable into the corresponding value. For example: >

    :execute "buffer " . bno
<
更多详情请阅读:

    |:execute|

 								*faq-25.15*
25.15. How do I store the value of a Vim option into a Vim variable?

You can prefix the option name with the "&" character and assign the option
value to a Vim variable using the `:let` command. For example, to store the
value of the 'textwidth' option into the Vim variable "old_tw", you can use
the following command: >

    :let old_tw = &tw
<
To explicitly save buffer local options, use the prefix "l:" >

    :let old_tw = &l:tw
<
If you want to explicitly select the global option, use the "g:" prefix to
the option name.

To do the opposite, to set the 'textwidth' option with the value stored in
the "old_tw" variable, you can use the following command: >

    :let &tw = old_tw
<
更多详情请阅读:

    |expr-option|
    |:let-option|

 								*faq-25.16*
25.16. I have copied and inserted some text into a buffer from a Vim
       function. How do I indent the inserted text from the Vim function?

You can use the following command to format the just inserted text: >

    :normal '[=']
<
更多详情请阅读:

    |'[|
    |']|
    |=|
    |:normal|

 								*faq-25.17*
25.17. How do I get the character under the cursor from a Vim script?

You can use the getline() function and use string index [] to get the
character: >

    :echo getline(".")[col(".") - 1]
<
In the above command, getline(".") returns  the text in the current line.
The indexing of the string starts at zero, and you can get a single
character in a string by its index with the "string[index]" notation. The
col(".") returns the column of the cursor position; the adjustment is to
get the right character of the string. However, this does NOT work with
multibyte characters as this command only returns the byte index.

Alternatively, you can use the following sequence of commands to get the
character under the cursor: >

    normal! vy
    let ch=@"
<
Note, that the above commands will change the '< and '> marks.

更多详情请阅读:

    |getline()|
    |col()|
    |expr-[]|

 								*faq-25.18*
25.18. How do I get the name of the current file without the extension?

You can get the name of the current file without the extension using: >

    :echo expand("%:r")
<
With some commands, you can use the file name modifiers directly: >

    :cd %:p:h
    :!gcc -o %:r.o %
    :!xpdf %<.pdf
<
更多详情请阅读:

    |filename-modifiers|
    |expand()|
    |cmdline-special|
    |fnamemodify()|

 								*faq-25.19*
25.19. How do I get the basename of the current file?

You can use the ":t" filename modifier to get the basename of the current
file: >

    :echo expand("%:t")
<
更多详情请阅读:

    |filename-modifiers|

 								*faq-25.20*
25.20. How do I get the output from a Vim function into the current buffer?

You can insert the return value from a function using the following command
in insert mode: >

    <C-R>=MyFunc()
<
Note, that this will only insert the return value of the function.

更多详情请阅读:

    |i_CTRL-R|
    |i_CTRL-R_CTRL-R|
    |i_CTRL-R_CTRL-O|
    |expression|

 								*faq-25.21*
25.21. How do I call external programs from a Vim function?

There are several ways to call external programs from a Vim function. You
can use the builtin system() function to invoke external programs and get
the result: >

    :let output = system("ls")
<
You can also use "!" ex-command to run an external command.

更多详情请阅读:

    |system()|
    |:!|
    |10.9|

 								*faq-25.22*
25.22. How do I get the return status of a program executed using the `:!`
       command?

You can use the predefined Vim v:shell_error variable to get the return
status of the last run shell command.

更多详情请阅读:

    |v:shell_error|

 								*faq-25.23*
25.23. How do I determine whether the current buffer is modified or not?

You can check the value of the 'modified' option to determine whether the
current buffer is modified: >

    :set modified?
<
From a Vim script, you can check the value of the 'modified' option: >

    if &modified
        echo "File is modified"
    endif
<
更多详情请阅读:

    |'modified'|

 								*faq-25.24*
25.24. I would like to use the carriage return character in a normal
       command from a Vim script. How do I specify the carriage return
       character?

You can use the `:execute` command to specify the special (control)
character in a normal mode command: >

    :execute "normal \<CR>"
    :execute "normal ixxx\<Esc>"
<
更多详情请阅读:

    |:execute|
    |expr-quote|

 								*faq-25.25*
25.25. How do I split long lines in a Vim script?

You can split long lines in a Vim script by inserting the backslash
character ("\") at the start of the next line. For example, >

    set comments=sr:/*,mb:*,el:*/,
                \://,
                \b:#,
                \:%,
                \n:>,
                \fb:-
<
更多详情请阅读:

    |line-continuation|

 								*faq-25.26*
25.26. When I try to "execute" my function using the `:execute Myfunc()`
       command, the cursor is moved to the top of the current buffer.
       Why?

The `:execute` command runs the ex command specified by the argument.
In the case of the following command: >

    :execute Myfunc()
<
The call to Myfunc() will return 0. The `:execute` command will run
the ex command `:0`, which moves the cursor to the top of the file.
To call a Vim function, you should use the `:call` command instead of the
`:execute` command: >

    :call Myfunc()
<
更多详情请阅读:

    |:call|
    |:execute|
    |:echo|
    |user-functions|
    |41.5|
    |41.6|
    |cmdline-lines|

 								*faq-25.27*
25.27. How do I source/execute the contents of a register?

If you have yanked a set of Vim commands into a Vim register (for example
register "a"), then you can source the contents of the register using one
of the following commands:

    :@a
or
    :exe @a

更多详情请阅读:

    |:@|

 								*faq-25.28*
25.28. After calling a Vim function or a mapping, when I press the "u"
       key to undo the last change, Vim undoes all the changes made by
       the mapping/function. Why?

When you call a function or a mapping, all the operations performed by the
function/mapping are treated as one single operation. When you undo the
last operation by pressing "u", all the changes made by the
function/mapping are reversed.

更多详情请阅读:

    |undo-redo|
    |:map-undo|

 								*faq-25.29*
25.29. How can I call a function defined with s: (script local function)
       from another script/plugin?

The s: prefix for a Vim function name is used to create a script local
function. A script local function can be called only from within that
script and cannot be called from other scripts. To define a function in a
script/plugin, so that it can be called from other plugins/scripts, define
the function without the s: prefix.

更多详情请阅读:

    |script-variable|
    |script-local|
    |:scriptnames|

 								*faq-25.30*
25.30. Is it possible to un-source a sourced script? In other words, reverse
       all the commands executed by sourcing a script.

No. It is not possible to reverse or undo all the commands executed by
sourcing a script.

更多详情请阅读:

    |:source|

=============================================================================
 								*faq-26*
SECTION 26 - PLUGINS ~

 								*faq-26.1*
26.1. How do I set different options for different types of files?

You can create filetype plugins to set different options for different
types of files. You should first enable filetype plugins using the command: >

    :filetype plugin on
<
A filetype plugin is a vim script that is loaded whenever Vim opens or
creates a file of that type.  For example, to ensure that the 'textwidth'
option is set to 80 when editing a C program (filetype "c"), create one of
the following files: >

        ~/.vim/ftplugin/c.vim (Unix)
        %HOME%\vimfiles\ftplugin\c.vim (Windows)
<
with the following text in it: >

        setlocal textwidth=80
<
You can also use autocommands to set specific options when editing specific
type of files. For example, to set the 'textwidth' option to 75 for only
*.txt files, you can use the following autocmd: >

    autocmd BufRead *.txt setlocal textwidth=80
<
更多详情请阅读:

    |filetype-plugin|
    |add-filetype-plugin|
    |:autocmd|
    |40.3|

 								*faq-26.2*
26.2. I have downloaded a Vim plugin or a syntax file or a indent file, or
      a color scheme or a filetype plugin from the web. Where should I copy
      these files so that Vim will find them?

You can place the Vim runtime files (plugins, syntax files, indent files,
color schemes, filetype plugins, etc) under one of the directories
specified in the 'runtimepath' option. To determine the current value of
the 'runtimepath' option, use the following command: >

    :set runtimepath
<
For Unix systems, this is usually the "$HOME/.vim" directory. For MS-Windows
systems, this is usually the $VIM\vimfiles or $HOME\vimfiles directory.
Depending on the type of the runtime file, you have to place it under a
specific directory under the above runtime directory. The names of the
directories are listed below:

    name        description ~
    ----------  ------------------ ~
    colors/     color scheme files
    compiler/   compiler files
    doc/        documentation
    ftplugin/   filetype plugins
    indent/     indent scripts
    keymap/     key mapping files
    lang/       menu translations
    plugin/     plugin scripts
    syntax/     syntax files
    tutor/      files for vimtutor

更多详情请阅读:

    |your-runtime-dir|
    |'runtimepath'|
    |:runtime|

 								*faq-26.3*
26.3. How do I extend an existing filetype plugin?

You can extend an existing filetype plugin by creating a file in the
after/ directory in any of the 'runtimepath' directories.


- for small changes to be done after (and in addition to) what is
  already done by the ftplugin installed with Vim, use an after-directory,
  as follows (replacing foobar by the 'filetype' of the concerned
  files):
    - For changes private to one user:
        - on Windows:
            $HOME/vimfiles/after/ftplugin/foobar.vim
        - on Unix-like OSes:
            $HOME/.vim/after/ftplugin/foobar.vim
    - For changes affecting all users on the system:
        $VIM/vimfiles/after/ftplugin/foobar.vim

- when replacing the whole filetype-plugin by a different version, or
  when installing a new ftplugin for some filetype not yet supported by
  Vim out of the box: use the same paths without the after/ in them. In
  that case you should place near the start of your plugin an "if...
  finish... endif... let" block like the one in the plugins distributed
  with Vim.

All the above paths are given in Vim terminology (which is similar to
Unix terminology, but is understood even by Vim for Windows); they don't
exist by default, so the first time you need them you will have to
create them using mkdir (on any OS including DOS/Windows) or md (on
DOS/Windows only). $VIM and, on DOS/Windows, $HOME, do not necessarily
exist outside Vim. If $HOME has no value (or no valid value) inside Vim,
you can use $VIM instead; but on any but possibly very old versions of
Windows, $HOMEDRIVE and $HOMEPATH are defined by the system, and if
$HOME is undefined at Vim startup, Vim will set it by expanding
$HOMEDRIVE$HOMEPATH before sourcing your vimrc. To know which values Vim
uses, you can type (in a running Vim): >

    :echo $VIM
    :echo $HOME
<

If you placed the file in the after/ftplugin runtime directory, then Vim
will first source the existing filetype plugin file and then will source
the new file.  If you placed the file in the $VIMRTUNTIME/ftplugin runtime
directory, then Vim will first source the new file and then will source the
existing filetype plugin file.

更多详情请阅读:

    |ftplugin-overrule|
    |filetype-plugin|
    |add-filetype-plugin|
    |'runtimepath'|

 								*faq-26.4*
26.4. How do I turn off loading the Vim plugins?

You can reset the 'loadplugins' option to turn off loading the plugins: >

    :set noloadplugins
<
You can also specify the "--noplugin" command line argument to stop loading
the plugins: >

    $ vim --noplugin
<
更多详情请阅读:

    |'loadplugins'|
    |--noplugin|
    |load-plugins|

 								*faq-26.5*
26.5. How do I turn on/off loading the filetype plugins?

By default, Vim will not load the filetype plugins. You can configure Vim
to load filetype plugins using the command: >

    filetype plugin on
<
You can turn off loading the filetype plugins using: >

    filetype plugin off
<
更多详情请阅读:

    |:filetype-plugin-on|
    |:filetype-plugin-off|
    |:filetype|

 								*faq-26.6*
26.6. How do I override settings made in a file type plugin in the global
      ftplugin directory for all the file types?

You can use an autocommand triggered on the FileType event: >

    au Filetype * set formatoptions=xyz
<
This should at least be after "filetype on" in your vimrc. Best is to put
it in your "myfiletypefile" file, so that it's always last.

If you want to override a setting for a particular filetype, then create a
file with the same name as the original filetype plugin in the
~/.vim/after/ftplugin directory For example, to override a setting in the
c.vim filetype plugin, create a c.vim file in the ~/.vim/after/ftplugin
directory and add your preferences in this file.

更多详情请阅读:

    |ftplugin-overrule|
    |ftplugins|
    |myfiletypefile|

 								*faq-26.7*
26.7. How do I disable the Vim directory browser plugin?

To disable the directory browsing Vim plugin, add the following line to
your .vimrc file: >

    let g:loaded_netrw = 1
<
更多详情请阅读:

    |netrw|

 								*faq-26.8*
26.8. How do I set the filetype option for files with names matching a
      particular pattern or depending on the file extension?

You can set the 'filetype' option for files with names matching a
particular pattern using an autocmd. For example, to set the 'filetype'
option to "c" for all files with extension ".x", you can use the following
autocmd: >

    autocmd! BufRead,BufNewFile *.x     setfiletype c
<
A better alternative to the above approach is to create a filetype.vim file
in the ~/.vim directory (or in one of the directories specified in the
'runtimepath' option) and add the following lines: >

    " my filetype file
    if exists("did_load_filetypes")
        finish
    endif
    augroup filetypedetect
        au! BufRead,BufNewFile *.x       setfiletype c
    augroup END
<
更多详情请阅读:

    |new-filetype|
    |43.2|
    |:setfiletype|

=============================================================================
 								*faq-27*
SECTION 27 - EDITING PROGRAM FILES ~

 								*faq-27.1*
27.1. How do I enable automatic indentation for C/C++ files?

You can enable file-type based indentation using: >

    :filetype indent on
<
If you want to only enable automatic C indentation, then use: >

    :set cindent
<
更多详情请阅读:

    |'cindent'|
    |C-indenting|
    |filetype|

 								*faq-27.2*
27.2. How do I configure the indentation used for C/C++ files?

You can configure the Vim C indentation by modifying the value of the
'cinoptions', 'cinkeys' and 'cinwords' options.

更多详情请阅读:

    |'cindent'|
    |'cinoptions'|
    |'cinkeys'|
    |'cinwords'|
    |C-indenting|
    |cinoptions-values|
    |'smartindent'|

 								*faq-27.3*
27.3. How do I turn off the automatic indentation feature?

By default, the automatic indentation is not turned on. You must have
configured Vim to do automatic indentation in either .vimrc or .gvimrc
files. You can disable automatic indentation using either, >

    :filetype indent off
<
or >

    :set nocindent
<
Also, check the setting for the following options: >

    :set autoindent?
    :set smartindent?
    :set indentexpr?
<
更多详情请阅读:

    |'cindent'|
    |:filetype-indent-off|
    |'autoindent'|
    |'smartindent'|
    |'indentexpr'|

 								*faq-27.4*
27.4. How do I change the number of space characters used for the automatic
      indentation?

You can modify the 'shiftwidth' option to change the number of space
characters used for the automatic indentation: >

    :set shiftwidth=4
<
更多详情请阅读:

    |'shiftwidth'|

 								*faq-27.5*
27.5. I am editing a C program using Vim. How do I display the definition
      of a macro or a variable?

You can use the "[d" command to display the definition of a macro, "[i"
command to display the definition of a variable, "gd" to goto the local
declaration of a variable and "gD" to go to the global Declaration.

更多详情请阅读:

    |[d|
    |[i|
    |gd|
    |gD|
    |include-search|
    |29.4|
    |29.5|

 								*faq-27.6*
27.6. I am editing a C program using Vim. How do I jump to the beginning or
      end of a code block from within the block?

You can use "[{" command to jump to the beginning of the code block and "]}"
to jump to the end of the code block from inside the block.

更多详情请阅读:

    |[{|
    |]}|
    |various-motions|

 								*faq-27.7*
27.7. When editing C++ files and when inserting new lines above or below a
      comment (//) line, Vim automatically inserts the C++ comment
      character (//) at the beginning of the line. How do I disable this?

This automatic insertion of the comment leader (//) when new lines
are added is controlled by three flags in the 'formatoptions'
option:  "c", "r" and "o".  "c" enables auto-wrapping of comment
lines when typing extends beyond the right margin.  "r" enables the
automatic insertion of the comment leader when <Enter> is pressed
while editing a comment line.  "o" enables the automatic insertion
of the comment leader when a new line is opened above or below an
existing comment line by typing O or o in Normal mode.

You can stop Vim from automatically inserting the comment leader
when typing <Enter> within a comment or when opening a new line by
removing the "r" and "o" flags from 'formatoptions'.

   :set formatoptions-=r
   :set formatoptions-=o

The default filetype plugin for C and C++ files
($VIMRUNTIME/ftplugin/c.vim) adds the "r" and "o" flags to the
'formatoptions' option.  If you want to override this for C++ files,
then you can add the above lines to the
~/.vim/after/ftplugin/cpp.vim file.

更多详情请阅读:

    |formatoptions|
    |30.6|
    |format-comments|
    |filetype-plugins|
    |ftplugin-overrule|

 								*faq-27.8*
27.8. How do I add the comment character "#" to a set of lines at the
      beginning of each line?

First, select the first character in all the lines using visual block mode
(CTRL-V). Press "I" to start inserting characters at the beginning of the
line. Enter the comment character and then stop the insert mode by pressing
<Esc>. Vim will automatically insert the entered characters at the
beginning of all the selected lines.

更多详情请阅读:

    |visual-block|
    |blockwise-operators|
    |v_b_I|

 								*faq-27.9*
27.9. How do I edit a header file with the same name as the corresponding C
      source file?

You can use the following command to edit a header file with the same name
as the corresponding C source file: >

    :e %:t:r.h
<
You can use the following command to edit the file in a new split window: >

    :sp %:t:r.h
<
In the above commands, the percent sign expands to the name of the current
file.  The `:t` modifier extracts the tail (last component) of the
filename. The `:r` modifier extracts the root of the filename.  The .h is
appended to the resulting name to get the header filename.

Another approach is to use the following command: >

    :sfind %:t:r.h
<
This command will search for the header file in the directories specified
in the 'path' option.

更多详情请阅读:

    |cmdline-special|
    |filename-modifiers|
    |:sfind|
    |'path'|

 								*faq-27.10*
27.10. How do I automatically insert comment leaders while typing comments?

To automatically insert comment leaders while typing comments, add the "r"
and "o" flags to the 'formatoptions' option. >

    :set formatoptions+=ro
<
You may also want to add the "c" flag to auto-wrap comments using the
'textwidth' option setting and the "q" flag to format comments with the
"gq" command: >

    :set formatoptions=croq
<
更多详情请阅读:

    |30.6|
    |format-comments|
    |'comments'|
    |fo-table|

=============================================================================
 								*faq-28*
SECTION 28 - QUICKFIX ~

 								*faq-28.1*
28.1. How do I build programs from Vim?

You can use the `:make` command to build programs from Vim. The `:make`
command runs the program specified by the 'makeprg' option.

更多详情请阅读:

    |30.1|
    |:make_makeprg|
    |'makeprg'|
    |'makeef'|
    |:make|
    |quickfix|

 								*faq-28.2*
28.2. When I run the make command in Vim I get the errors listed as the
      compiler compiles the program. When it finishes this list disappears
      and I have to use the `:clist` command to see the error message again.
      Is there any other way to see these error messages?

You can use the `:copen` or `:cwindow` command to open the quickfix window
that contains the compiler output. You can select different error lines
from this window and jump to the corresponding line in the source code.

更多详情请阅读:

    |:copen|
    |:cwindow|
    |quickfix|

 								*faq-28.3*
28.3. How can I perform a command for each item in the quickfix/location
      list?

Starting from Vim 7.4.858 Vim provides the new commands `:cfdo`, `:cdo`,
`:lfdo` and `:ldo.` They work by iterating over all items in the quickfix
list and performing a command on each. The difference is, that the `:lfdo`
and `:ldo` commands iterate over the location list entries, while the
`:cfdo` and `:cdo` commands operate on the items in the quickfix list. Also,
the `:cfdo` and `:lfdo` operate on all different files, while the `:cdo` and
`:ldo` commands operate on each item in the quickfix/location list.

For example you could vimgrep all C files in the current directory for a
search string "Foobar": >

    :vimgrep /Foobar/ *.c
<
and as this populates your quickfix list, you could simply replace all
occurences by using: >

    :cdo :%s/Foobar/Foobaz | upd
<
更多详情请阅读:

    |:cfdo|
    |:cdo|

=============================================================================
 								*faq-29*
SECTION 29 - FOLDING ~

 								*faq-29.1*
29.1. How do I extend the Vim folding support?

You can use the 'foldexpr' option to fold using a user specified function.
For example, to fold subroutines of the following form into a single line: >

    sub foo {
      my $barf;
      $barf = 3;
      return $barf;
    }
<
You can use the following commands: >

    set foldmethod=expr
    set foldexpr=MyFoldExpr(v:lnum)
    fun! MyFoldExpr(line)
        let str = getline(a:line)
        if str =~ '^sub\>'
            return '1'
        elseif str =~ '^}'
            return '<1'
        else
            return foldlevel(a:line - 1)
        endif
    endfun
<
更多详情请阅读:

    |'foldexpr'|
    |fold-expr|

 								*faq-29.2*
29.2. When I enable folding by setting the 'foldmethod' option, all the
      folds are closed. How do I prevent this?

You can set the 'foldlevelstart' option to a particular value to close only
folds above the specified value. >

    :set foldlevelstart=99
<
更多详情请阅读:

    |'foldlevelstart'|
    |'foldlevel'|
    |fold-foldlevel|

 								*faq-29.3*
29.3. How do I control how many folds will be opened when I start editing a
      file?

You can modify the 'foldlevelstart' option to control the number of folds
that will be opened when you start editing a file. To start editing with
all the folds closed: >

    :set foldlevelstart=0
<
To start editing with all the folds opened, you can use >

    :set foldlevelstart=999
<
更多详情请阅读:

    |'foldlevelstart'|

 								*faq-29.4*
29.4. How do I open and close folds using the mouse?

You can click on the + and - characters displayed at the leftmost column to
open and close fold. For this to work, you have to set the 'foldcolumn'
to a value greater than zero: >

    :set foldcolumn=2
<
更多详情请阅读:

    |'foldcolumn'|

 								*faq-29.5*
29.5. How do I change the text displayed for a closed fold?

You can use the 'foldtext' option to change the text displayed for a closed
fold.

更多详情请阅读:

    |'foldtext'|
    |fold-foldtext|
    |'fillchars'|

 								*faq-29.6*
29.6. How do I store and restore manually created folds across different
      Vim invocations?

You can use the `:mkview` command to store manually created folds. Later,
you can use the `:loadview` command to restore the folds. For this to work,
the 'viewoptions' must contain "folds".

更多详情请阅读:

    |28.4|
    |:mkview|
    |:loadview|
    |'viewoptions'|
    |'viewdir'|
    |:mksession|
    |'sessionoptions'|

 								*faq-29.7*
29.7. I have enabled syntax based folding. Why is Vim so slow?

Syntax based folding is currently rather slow in Vim and will possibly
slow down Vim considerably. There is an issue in the todo list to fix
this, but the todo list is rather long and it may take a while until
this will be fixed.

You can find the issue in the todo list, if you read

    |todo.txt|

followed by a search for "folding with 'foldmethod'"

A workaround is to temporarily set the foldmethod to manual while in
insert mode. This is described in the wiki at:

    http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text

=============================================================================
 								*faq-30*
SECTION 30 - VIM WITH EXTERNAL APPLICATIONS ~

 								*faq-30.1*
30.1. Can I run a shell inside a Vim window?

Since Version 8.1 Vim comes with a terminal window included. It allows
to run a shell inside an ordinary Vim window (e.g. split) asynchronously
and interact with the shell using the normal Vim commands.

When the focus is in the terminal window, typed keys will be sent to
the job and is called terminal mode. You can click outside of the
terminal window to move keyboard focus elsewhere, alternatively one can
use CTRL-W to novigate between different Vim windows. To feed CTRL-W into the
terminal, one needs to use CTRL-W .

To map keys specifically for terminal mode, use the new `:tmap`
command. After typing CTRL-W the terminal window will switch to
Terminal-Normal mode (this can be used to move the cursor around, scroll
the window, etc. Just like normal mode).

To interact between the terminal and Vim, Vim implements several
interfaces using term_sendkeys(), terminal-api and the client-server
mechanism.

更多详情请阅读:

    |terminal|
    |mapmode-t|
    |Terminal-Normal|
    |terminal-communication|

 								*faq-30.2*
30.2. How do I pass the word under the cursor to an external command?

You can use the special keyword <cword> to pass the word under the cursor
to an external command. For example: >

    :!dict <cword>
<
更多详情请阅读:

    |:<cword>|

 								*faq-30.3*
30.3. How do I get the output of a shell command into a Vim buffer?

You can use the `:r !` command to get the output of a shell command into a
Vim buffer. For example, to insert the output of the "ls" shell command,
you can use the following command: >

    :r !ls
<
To insert the output of the shell command above the first line use the
following command: >

    :0r !ls
<
更多详情请阅读:

    |:r!|

 								*faq-30.4*
30.4. How do I pipe the contents of the current buffer to an external
      command and replace the contents of the buffer with the output from
      the command?

You can use the :! command to pipe the contents of the current buffer to an
external command and replace the contents of the buffer with the output
from the command. For example, to sort the contents of the current buffer,
using the Unix sort command, you can use the following command: >

    :%!sort
<
To sort only lines 10-20, you can use the following command >

    :10,20!sort
<
Also, if you want to pipe a buffer to an external command but not put the
results back in the buffer, you can use >

    :w !sort
<
The above command will pipe the entire buffer to the sort command.  Note,
that the space between the "w" and the "!" is critical.  To pipe only a
range of lines, you can use >

    :10,20w !sort
<
The above command will pipe the lines 10-20 to the sort command.

更多详情请阅读:

    |:range!|
    |10.9|
    |:w_c|

 								*faq-30.5*
30.5. How do I sort a section of my file?

You use the `:sort` command like this:

   :5,100sort

Using the `:sort` command provides many options, you can sort numerical on
the first found decimal number using:

   :%sort n

Or you can specify to sort on the text, starting at virtual column 8:

   :%sort /.*\%8v/

Alternatively can pipe a section of the file to the Unix "sort" utility to
sort the file. For example: >

    :5,100!sort
<
You can also use a visual block, and use the "!sort" command on the
selected block.

See also:
    |:sort|
    |filter|

 								*faq-30.6*
30.6. How do I use Vim as a pager?

You can use Vim as a pager using the $VIMRUNTIME/macros/less.sh shell
script, supplied as part of the standard Vim distribution. This shell
script uses the $VIMRUNTIME/macros/less.vim Vim script to provide less like
key bindings.

更多详情请阅读:

    |less|

 								*faq-30.7*
30.7. How do I view Unix man pages from inside Vim?

You can view Unix man pages, inside Vim, using the man.vim plugin supplied
as part of the standard Vim distribution. To use this plugin, add the
following line to your startup vimrc file: >

    runtime ftplugin/man.vim
<
You can also press the K key to run the program specified by the
'keywordprg' option with the keyword under the cursor. By default,
'keywordprg' is set to run man on the keyword under the cursor.

更多详情请阅读:

    |ft-man-plugin|
    |K|
    |'keywordprg'|

 								*faq-30.8*
30.8. How do I change the diff command used by the Vim diff support?

By default, the Vim diff support uses the 'diff' command. You can change
this by changing the 'diffexpr' option.

更多详情请阅读:

    |diff-diffexpr|
    |'diffexpr'|

 								*faq-30.9*
30.9. How do I use the Vim diff mode without folding?

You can use the following command-line to start Vim with two filenames
and use the diff mode without folding: >

    $ vim -o file1 file2 "+windo set diff scrollbind scrollopt+=hor nowrap"
<
If you like vertically split windows, then replace "-o" with "-O".

更多详情请阅读:

    |vimdiff|

=============================================================================
 								*faq-31*
SECTION 31 - GUI VIM ~

 								*faq-31.1*
31.1. How do I create buffer specific menus?

Adding support for buffer specific menus is in the Vim TODO list. In the
mean time, you can try Michael Geddes's plugin, buffermenu.vim:

    https://www.vim.org/scripts/script.php?script_id=246

 								*faq-31.2*
31.2. How do I change the font used by GUI Vim?

You can change the 'guifont' option to change the font used by GUI Vim.  To
display the current value of this option, you can use >

    :set guifont?
<
You can add the displayed font name to the .vimrc file to use the font
across Vim sessions. For example, add the following line to the .vimrc file
to use Andale Mono font. >

    set guifont=Andale_Mono:h10:cANSI
<
For Win32, GTK and Photon version of Vim, you can use the following command
to bringup a dialog which will help you in changing the guifont: >

    :set guifont=*
<
You can also use the -font Vim command line option to specify the font used
for normal text.

更多详情请阅读:

    |'guifont'|
    |'guifontset'|
    |'guifontwide'|
    |font-sizes|
    |-font|
    |-boldfont|
    |-italicfont|
    |-menufont|
    |-menufontset|

 								*faq-31.3*
31.3. When starting GUI Vim, how do I specify the location of the GVIM
      window?

You can use the "-geometry" command line argument to specify the location
of the GUI Vim window. For example: >

    $ gvim -geometry 80x25+100+300
<
更多详情请阅读:

    |31.4|
    |-geom|

 								*faq-31.4*
31.4. How do I add a horizontal scrollbar in GVim?

You can enable the horizontal scrollbar by modifying the 'guioptions'
option: >

    :set guioptions+=b
<
更多详情请阅读:

    |'guioptions'|
    |gui-horiz-scroll|

 								*faq-31.5*
31.5. How do I make the scrollbar appear in the left side by default?

You can add the "l" flag to the 'guioptions' option to make the scrollbar
appear in the left side. >

    :set guioptions+=l
    :set guioptions-=r
<
更多详情请阅读:

    |'guioptions'|
    |gui-scrollbars|

 								*faq-31.6*
31.6. How do I remove the Vim menubar?

You can remove the Vim menubar by removing the "m" flag from the
'guioptions' option: >

    :set guioptions-=m
<
更多详情请阅读:

    |'guioptions'|

 								*faq-31.7*
31.7. I am using GUI Vim. When I press the <Alt> key and a letter, the menu
      starting with that letter is selected. I don't want this behavior as
      I want to map the <Alt>-<key> combination. How do I do this?

You can use the 'winaltkeys' option to disable the use of the <Alt> key to
select a menu item: >

    :set winaltkeys=no
<
更多详情请阅读:

    |'winaltkeys'|
    |:simalt|

 								*faq-31.8*
31.8. Is it possible to scroll the text by dragging the scrollbar so that
      the cursor stays in the original location?

The way Vim is designed, the cursor position has to be in a visible spot in
normal, visual, select and insert mode. This cannot be changed without
modifying Vim. When the scrollbar is used, the cursor will be moved so that
it is always visible. Another approach to solving this problem is to use
the Vim marks. You can mark the current cursor position using ma. Then
scroll to a different part of the text and jump back to the old position
using `a. You can also try the following suggestion from the Vim Online
website:

    http://vim.wikia.com/wiki/VimTip320

更多详情请阅读:

    |mark-motions|

 								*faq-31.9*
31.9. How do I get gvim to start browsing files in a particular directory
      when using the `:browse` command?

You can set the 'browsedir' option to the default directory to use for the
`:browse` command. >

    :set browsedir='<your_dir>'
<
更多详情请阅读:

    |'browsedir'|

 								*faq-31.10*
31.10. For some questions, like when a file is changed outside of Vim, Vim
       displays a GUI dialog box. How do I replace this GUI dialog box with
       a console dialog box?

You can set the "c" flag in the 'guioptions' option to configure Vim to use
console dialogs instead of GUI dialogs: >

    :set guioptions+=c
<
更多详情请阅读:

    |'guioptions'|

 								*faq-31.11*
31.11. I am trying to use GUI Vim as the editor for my xxx application.
       When the xxx application launches GUI Vim to edit a file, the
       control immediately returns to the xxx application. How do I start
       GUI Vim, so that the control returns to the xxx application only
       after I quit Vim?

You have to start GUI Vim with the "-f" (foreground) command line option: >

    $ gvim -f
<
By default, GUI Vim will disconnect from the program that started Vim. With
the '-f' option, GUI Vim will not disconnect from the program that started
it.

更多详情请阅读:

    |gui-fork|
    |-f|

 								*faq-31.12*
31.12. Why does the "Select Font" dialog doesn't show all the fonts
       installed in my system?

Vim supports only fixed width (mono-spaced) fonts. Proportional fonts are
not supported.  In the "Select Font" dialog, only fixed width fonts will be
displayed.

更多详情请阅读:

    |font-sizes|
    |'guifont'|

 								*faq-31.13*
31.13. How do I use the mouse in Vim command-line mode?

You can set the "c" flag in the 'mouse' option to use mouse in the Vim
command-line mode: >

    :set mouse+=c
<
更多详情请阅读:

    |mouse-using|
    |gui-mouse|
    |09.2|

 								*faq-31.14*
31.14. When I use the middle mouse button to scroll text, it pastes the
       last copied text. How do I disable this behavior?

You can map the middle mouse button to <Nop> to disable the middle mouse
button: >

    :map  <MiddleMouse> <Nop>
    :map! <MiddleMouse> <Nop>
<
更多详情请阅读:

    |gui-mouse-mapping|
    |<Nop>|

 								*faq-31.15*
31.15. How do I change the location and size of a GUI Vim window?

You can use the `:winpos` command to change the Vim window position. To
change the size of the window, you can modify the 'lines' and 'columns'
options.

For example, the following commands will position the GUI Vim window at the
X,Y co-ordinates 50,50 and set the number of lines to 50 and the number of
columns to 80. >

    :winpos 50 50
    :set lines=50
    :set columns=80
<
The arguments to the `:winpos` command specify the pixel co-ordinates of the
Vim window. The 'lines' and 'columns' options specify the number of lines
and characters to use for the height and the width of the window
respectively.

更多详情请阅读:

    |31.4|
    |:winpos|
    |'lines'|
    |'columns'|
    |GUIEnter|

 								*faq-31.16*
31.16. When splitting the Vim window vertically, Vim changes the position.

This is a known problem. When you are splitting the Vim window, Vim will
try to draw a scrollbar. Since this changes the gui window, Vim tries to
resize its main window to keep the same position and this will cause Vim
to move its position. This happens on Windows with a multi-window setup or
a window that was "snapped" to a certain position.

A workaournd to this problem is, to remove gui scrollbars, e.g. >

    :set guioptions-=L
<

=============================================================================
 								*faq-32*
SECTION 32 - VIM ON UNIX ~

 								*faq-32.1*
32.1. I am running Vim in a xterm. When I press the CTRL-S key, Vim
      freezes. What should I do now?

Many terminal emulators and real terminal drivers use the CTRL-S key to
stop the data from arriving so that you can stop a fast scrolling display
to look at it (also allowed older terminals to slow down the computer so
that it did not get buffer overflows).  You can start the output again by
pressing the CTRL-Q key.

When you press the CTRL-S key, the terminal driver will stop sending the
output data. As a result of this, it will look like Vim is hung. If you
press the CTRL-Q key, then everything will be back to normal.

You can turn off the terminal driver flow control using the "stty" command: >

    $ stty -ixon -ixoff
<
or, you can change the keys used for the terminal flow control, using the
following commands: >

    $ stty stop <char>
    $ stty start <char>
<
 								*faq-32.2*
32.2. I am seeing weird screen update problems in Vim. What can I do to
      solve this screen/display update problems?

You have to use a proper terminal emulator like xterm with correct TERM
settings (TERM=xterm) and a correct terminfo/termcap file.
更多详情请阅读:

    |'term'|

 								*faq-32.3*
32.3. I am using the terminal/console version of Vim. In insertmode, When I
      press the backspace key, the character before the cursor is not
      erased. How do I configure Vim to do this?

You have to make sure that Vim gets the correct keycode for the backpspace
key. You can try using the command: >

    :fixdel
<
Make sure the TERM environment variable is set to the correct terminal
name. You can try using the "stty" command: >

    $ stty erase ^H
<
where, you have to enter the ^H character by pressing the CTRL-V key and
then the CTRL-H key. Also check the value of your 'backspace' setting.

更多详情请阅读:

    |:fixdel|
    |Linux-backspace|
    |NetBSD-backspace|
    |'backspace'|

 								*faq-32.4*
32.4. I am using Vim in a xterm. When I quit Vim, the screen contents are
      restored back to the original contents. How do I disable this?

The xterm has a capability called "alternate screen".  If this capability
is present, vim switches to that alternate screen upon startup and back on
exit, thus restoring the original screen contents.  To disable this
feature, add the following line to your .vimrc file: >

    :set t_ti= t_te=
<
更多详情请阅读:

    |'restorescreen'|
    |xterm-screens|

 								*faq-32.5*
32.5. When I start Vim, it takes quite a few seconds to start. How do I
      minimize the startup time?

This may be related to Vim opening the X display for setting the xterm
title and using the X clipboard. Make sure the DISPLAY variable is set to
point to the correct host. Try using the command line: >

    $ vim -X
<
This will prevent Vim from opening the X display. With this command-line
option, the X clipboard cannot be used and also Vim will not be able to
change the xterm title.

You can also set the 'clipboard' option to >

    :set clipboard=exclude:.*
<
This has the same effect as using the -X command-line argument.

更多详情请阅读:

    |-X|
    |'clipboard'|

If the clipboard is not the cause of the slow startup, it might be a
plugin that slows down Vim. In that case, you can use the --startuptime
argument to debug this further. You can do: >

    $ vim --startuptime vim_startup.log
<
and the timing will be written to the file vim_startup.log. For even
more advanced profiling, you can use the profiling feature, that is
available in huge builds of Vim. To do so, call Vim like this: >

    $ vim --cmd 'profile start profile.log' \
      --cmd 'profile func *' \
      --cmd 'profile file *' \
      -c 'profdel func *' \
      -c 'profdel file *' \
      -c 'qa!'
<
After running this, you will have a file profile.log in your current
directory. To further analyse this, open the file profile.log and run: >

    " Open profile.log file in vim first
    :let timings=[]
    :g/^SCRIPT/call add(timings, [getline('.')[len('SCRIPT  '):], matchstr(getline(line('.')+1), '^Sourced \zs\d\+')]+map(getline(line('.')+2, line('.')+3), 'matchstr(v:val, ''\d\+\.\d\+$'')'))
    :enew
    :call setline('.', ['count total (s)   self (s)  script']+map(copy(timings), 'printf("%5u %9s   %8s  %s", v:val[1], v:val[2], v:val[3], v:val[0])'))
<
更多详情请阅读:

    |--startuptime|
    |profiling|

 								*faq-32.6*
32.6. How can I make the cursor in gvim in unix stop blinking?

You can modify the 'guicursor' option, to stop the cursor from blinking.
For example: >

    :set guicursor=a:blinkon0
<
更多详情请阅读:

    |'guicursor'|

 								*faq-32.7*
32.7. How do I change the menu font on GTK Vim?

You can modify the ~/.gtkrc file to change the menu font on GTK Vim. For
example: >

    style "default"
    { font ="smooth09" }
    class "*" style "default"
<
The last line changes the font of all widgets.

更多详情请阅读:

    |gui-gtk|

 								*faq-32.8*
32.8. How do I prevent CTRL-Z from suspending Vim?

You can map CTRL-Z to prevent the suspending. Here are some suggestions:

- Make CTRL-Z do nothing: >

    :map <C-Z> <Nop>
<
- Make CTRL-Z start a shell: >

    :map <C-Z> :shell<CR>
<
- Make CTRL-Z give an error message: >

    :map <C-Z> :"suspending disabled<CR>
<
For the last example, the double quote is necessary in order to keep the
message on the status line.

 								*faq-32.9*
32.9. When I kill the xterm running Vim, the Vim process continues to run
      and takes up a lot of CPU (99%) time. Why is this happening?

When Vim is built with support for Python interface, you will have this
problem. This is a known problem with the python thread library and Vim.  To
solve this problem, use a Vim binary built without the Python interface.

更多详情请阅读:

    |+python|
    |python|

 								*faq-32.10*
32.10. How do I get the Vim syntax highlighting to work in a Unix terminal?

The easiest and simplest way to get Vim syntax highlighting is to use the
GUI version of Vim (GVIM). To get syntax highlighting to work in the
console/terminal version of Vim, you have to run a terminal emulator (like
Xfree86 xterm or rxvt or dtterm) that supports color. Note that if a
terminal emulator supports changing the background and foreground colors,
that does not mean that it also supports ANSI escape sequences for changing
the color. You can download the latest version of Xfree86 xterm from
https://invisible-island.net/xterm/xterm.html
You can download the latest version of rxvt from https://rxvt.org
You have to install the terminfo/termcap file that supports colors for the
terminal emulator. Also, set the TERM environment variable to the correct
name of the term that supports colors.

You can use the colortest.vim script supplied with the Vim runtime
package to test the color setup. To use this script, follow these steps: >

    :e $VIMRUNTIME/syntax/colortest.vim
    :source %
<
更多详情请阅读:

    |06.2|
    |terminal-colors|
    |termcap-colors|
    |startup-terminal|
    |xterm-color|
    |colortest.vim|

=============================================================================
 								*faq-33*
SECTION 33 - VIM ON MS-WINDOWS ~

 								*faq-33.1*
33.1. In MS-Windows, CTRL-V doesn't start the blockwise visual mode. What
      happened?

The mswin.vim script provides key mappings and options to make Vim behave
like a MS-Windows application. One of the keys mapped is CTRL-V which is
used for pasting text in MS-Windows applications. This will disable the use
of CTRL-V to start the blockwise visual mode. The mswin.vim script maps
CTRL-Q for staring the blockwise visual mode. So you can use CTRL-Q instead
of CTRL-V.

更多详情请阅读:

    |CTRL-V|
    |CTRL-V-alternative|
    |CTRL-Q|
    |10.5|

 								*faq-33.2*
33.2. When I press the CTRL-Y key, it acts like the CTRL-R key. How do I
      configure Vim to treat CTRL-Y as CTRL-Y?

The mapping of the CTRL-Y key to the CTRL-R key is done by the mswin.vim
script. The mswin.vim script maps CTRL-Y to make Vim behave like a standard
MS-Windows application. This is explained in `:help CTRL-Y`. You can either
comment out the line in mswin.vim that maps the CTRL-Y key or you can
remove the line in your .vimrc file that sources the mswin.vim script.

 								*faq-33.3*
33.3. How do I start GUI Vim in a maximized window always?

You can use the `:simalt` command to maximize the Vim window. You can use
the GUIEnter autocmd to maximize the Vim window on startup: >

    autocmd GUIEnter * simalt ~x
<
更多详情请阅读:

    |:simalt|
    |GUIEnter|
    |gui-win32-maximized|

 								*faq-33.4*
33.4. After doing some editing operations, Vim freezes. The cursor becomes
      an empty rectangle. I am not able enter any characters. What is
      happening?

Most probably, you used the mouse wheel to scroll the text in Vim. There is
a known problem in using intellimouse mouse wheel with Vim. To avoid this
problem, disable Universal scrolling support for Vim.

更多详情请阅读:

    |intellimouse-wheel-problems|

 								*faq-33.5*
33.5. I am using Windows XP, the display speed of maximized GVim is very
      slow. What can I do to speed the display updates?

This may be due to the fact that you have enabled 'Smooth edges of screen
fonts' in the display properties. Try turning off font smoothing or try
changing the smoothing method to "Standard".

 								*faq-33.6*
33.6. What are the recommended settings for using Vim with cygwin?

You may want to set the following shell related Vim settings: >

    :set shellcmdflag=-c
    :set shellquote=
    :set shellslash          " Use the forward slash for expansion.
    :set shellxquote=\"
    :set shell=d:\cygwin\bin\bash.exe " Use the bash shell
    :set shellpipe=2>&1| tee
    :set shellredir=>%s 2>&1
<
 								*faq-33.7*
33.7. I am trying to use GNU diff with Vim diff mode. When I run the diff
      from command line, it works. When I try to use the diff with Vim it
      doesn't work. What should I do now?

There is a problem with using GNU diff with Vim. You can try using the
GNU diff.exe built by Ron Aaron from the following link:

    http://www.mossbayeng.com/~ron/vim/builds.html
(This page no longer exists.)

 								*faq-33.8*
33.8. Is it possible to use Vim as an external editor for MS-Windows
      Outlook email client?

You can use the "cubiclevim" COM Add-In to use Vim as an external editor
for MS-Windows Outlook email client. Visit the following URL for more
information:

    https://sourceforge.net/projects/cubiclevim/

Note, that currently this works only with MS-Office 2000 and XP.

Also the plugin OutlookVim might be worth a look:

    https://www.vim.org/scripts/script.php?script_id=3087

 								*faq-33.9*
33.9. I am using Vim to edit HTML files. How do I start internet explorer
      with the current file to preview the HTML file?

You can use the following command: >

    :!start c:\progra~1\intern~1\iexplore.exe file://%:p<CR>
<
 								*faq-33.10*
33.10. I would like to use Vim with Microsoft Visual Studio. How do I do
       this?

You have to download and use the OLE version of Vim (for example:
gvim61ole.zip). This file also contains instructions on how to use Vim with
Visual Studio.

更多详情请阅读:

    |MSVisualStudio|

 								*faq-33.11*
33.11. Where do I place the _vimrc and _gvimrc files?

You can place the _vimrc and _gvimrc files under the directory pointed to
by the VIM environment variable. If you are sharing this system with other
users, then you can place the files in a directory and set the HOME
environment variable to this directory.

更多详情请阅读:

    |$HOME-use|
    |_vimrc|

 								*faq-33.12*
33.12. Every time I save a file, Vim warns about the file being changed
       outside of Vim. Why?

If you get the following warning message, every time you save a file: >

    WARNING: The file has been changed since reading it!!!
    Do you really want to write to it (y/n)?
<
then this problem could be related to a bug in MS-Windows on the day
daylight saving time starts.  Vim remembers the timestamp of the file after
it was written.  Just before the next write the timestamp is obtained again
to check if the file was changed outside of Vim.  This works correctly,
except on the day daylight saving time starts.

This problem will go away the next day after the day the daylight saving
time starts.

更多详情请阅读:

    |W11|

=============================================================================
 								*faq-34*
SECTION 34 - PRINTING ~

 								*faq-34.1*
34.1. How do I print a file along with line numbers for all the lines?

You can set the 'printoptions' option and use the `:hardcopy` command to
print your file: >

    :set printoptions=number:y
    :hardcopy
<
更多详情请阅读:

    |'printoptions'|
    |:hardcopy|

 								*faq-34.2*
34.2. How do I print a file with the Vim syntax highlighting colors?

You can use the `:hardcopy` command to print a file with the Vim syntax
highlighting colors. You can also convert your file to a HTML file using
the 2html.vim script and print the HTML file.

更多详情请阅读:

    |syntax-printing|
    |2html.vim|
    |:hardcopy|
    |printing|

=============================================================================
 								*faq-35*
SECTION 35 - BUILDING VIM FROM SOURCE ~

 								*faq-35.1*
35.1. How do I build Vim from the sources on a Unix system?

For a Unix system, follow these steps to build Vim from the sources:

- Download the source and run-time files archive (vim-##.tar.bz2) from the
  ftp://ftp.vim.org/pub/vim/unix directory.
- Extract the archive using the bzip2 and tar utilities using the command: >

        $ bunzip2 -c <filename> | tar -xf -
<
- Alternatively, download the source from the git repository:
  https://github.com/vim/vim/releases/
- Alternatively, download the source from the mercurial repository:
  https://bitbucket.org/vim-mirror/vim/downloads/
- Run the "make" command to configure and build Vim with the default
  configuration.
- Run "make install" command to install Vim in the default directory.

To enable/disable various Vim features, before running the "make" command
you can run the "configure" command with different flags to include/exclude
the various Vim features. To list all the available options for the
"configure" command, use: >

    $ configure --help
<
更多详情请阅读:

    |install|

 								*faq-35.2*
35.2. How do I install Vim in my home directory or a directory other
      than the default installation directory in Unix?

To install Vim in a directory other than the default installation
directory, you have to specify the directory using the --prefix option
while running the configure script. >

    $ ./configure --prefix=/users/xyz
<
You can enable/disable various Vim feature by supplying different arguments
to the configure script. For more information about all these options, run: >

    $ ./configure --help
<
更多详情请阅读:

    |install-home|
    |install|

 								*faq-35.3*
35.3. How do I build Vim from the sources on a MS-Windows system?

For a MS-Windows system, Vim can be built using either the Visual C++
compiler or the Borland C++ compiler or the Ming GCC compiler or the cygwin
gcc compiler. Follow these steps to build Vim from the sources for
MS-Windows:
    - Download the source (vim##src.zip), runtime (vim##rt.zip) and the
      extra (vim-##-extra.tar.gz) archives from the
      ftp://ftp.vim.org/pub/vim/pc directory.
    - Extract the archives into a directory (for example, c:\vimsrc)
    - Alternatively, download the source from the git repository:
      https://github.com/vim/vim/releases/
    - Alternatively, download the source from the mercurial repository:
      https://bitbucket.org/vim-mirror/vim/downloads/
    - Depending on the installed compiler, you can use the corresponding
      makefile to build the Vim sources. For Visual C++ use the
      Make_mvc.mak makefile, for borland C++ use the Make_bc5.mak makefile,
      for ming GCC use the Make_ming.mak makefile, for cygwin gcc use the
      Make_cyg.mak makefile.

Depending on whether you want to build the GUI version of Vim or the
console version of Vim, you have to pass different arguments to the
makefiles. After successfully building the sources, you can copy the
vim.exe or gvim.exe file to the desired directory along with the files from
the runtime archive.

更多详情请阅读:

    |install|

 								*faq-35.4*
35.4. The Vim help, syntax, indent files are missing from my Vim
      installation. How do I install these files?

The Vim help, syntax, indent and other runtime files are part of the Vim
runtime package. You need to download and install the Vim runtime package.
For example, for MS-Windows, the name of the Vim 6.1 runtime package is
vim61rt.zip.

更多详情请阅读:

    |install|

 								*faq-35.5*
35.5. I have built Vim from the source and installed the Vim package using
      "make install". Do I need to keep the Vim source directory?

No. Once you have built and installed Vim in some directory other than the
original source directory (for example, /usr/bin or /usr/local/bin), then
you can remove the source directory.

 								*faq-35.6*
35.6. How do I determine the Vim features which are enabled at compile
      time?

You can use the `:version` command to determine the Vim features that are
enabled at compile time. The features that are enabled will be prefixed
with a "+". The features that are not enabled will be prefixed with a "-".

If you want to test for a feature in a script, you can use the has()
function: >

    if has("menu")
        " Set up some menus
    endif
<
更多详情请阅读:

    |:version|
    |+feature-list|
    |has()|

 								*faq-35.7*
35.7. Can I build Vim without the GUI support?

Yes. You can build Vim by optionally enabling/disabling many of the
features including GUI.

更多详情请阅读:

    |install|

 								*faq-35.8*
35.8. When building Vim on a Unix system, I am getting "undefined reference
      to term_set_winsize" error. How do I resolve this error?

You will get this error when the build process is not able to locate the
termlib, termcap or ncurses library. You have to install the ncurses-dev
package to resolve this error.

 								*faq-35.9*
35.9. Vim configure keeps complaining about the lack of gtk-config while
      trying to use GTK 2.03. This is correct, since in GTK 2 they moved to
      using the generic pkg-config. I can get pkg-config to list the
      various includes and libs for gtk, but for some reason the configure
      script still isn't picking this up.

Use the following shell script named gtk-config: >

    #!/bin/sh
    pkg-config gtk+-2.0 $1 $2
<
 								*faq-35.10*
35.10. I did successfully download the sources and compiled Vim on
        Unix. But feature ... still does not work. What is wrong and
        how can I fix it?

You should first check, that you are actually running your self compiled
Vim and not the system's provided version. So first check your $PATH
setting.

Depending on your compile options, some features might not be included in
your build of Vim. You can use the `:version` command to determine the Vim
features that are enabled at compile time. The features that are enabled
will be prefixed with a "+". The features that are not enabled will be
prefixed with a "-".

The easiest way to include all features is to build the huge version. To do
this, you have to specify the --with-features option while running the
configure script: >

    $ ./configure --with-features=huge
<
Nevertheless, a feature could still be disabled at compile time, if the
configure script can't find the required libraries for those features (e.g.
for clipboard integration, your Vim needs to be linked against the X11
development libraries).

There are several ways to install the required libraries:

1) On a Debian based distribution, you can use the package manager "apt"
   to install all required dependencies. As superuser, run the command:

   $ apt-get build-dep vim-gtk

   This makes sure all required libraries needed to compile the vim-gtk
   package will be installed. (This requires, that your sources list
   contains deb-src entries. See your distribution manual on how to
   enable this, if the above command did not work.)

2) In openSUSE you can use the package manager "zypper" to install all
   required libraries. This requires, that there is a source version of
   the package installable from a configured repository (which by
   default is not the case). Use:

   $ zypper search -t srcpackage vim

   to find out, whether or not there exists a source version in the
   repository. If there is none, you'll need to add a source repository.
   For openSUSE 11.2 you could use, e.g.

   $ zypper ar
   http://download.opensuse.org/source/distribution/11.2/repo/oss/src-11.2

   (one line)

   Once you have a source version available in your repositories, use
   this command to install all needed requirements:

   $ zypper source-install --build-deps-only vim

3) On a Fedora/RedHat based system, you can use

   $ yum-builddep vim-enhanced

4) Run configure with your options and watch for missing libraries:

   $ ./configure --with-features=huge 2>&1 |tee logfile

   This will run configure and record the output into the file "logfile".
   You need to check the logfile for missing dependencies. Consider this
   output: >

    checking --disable-gtktest argument... gtk test enabled
    checking for pkg-config... /usr/bin/pkg-config
    checking for GTK - version >= 2.2.0... no
<
    Here you can see, that the gtk libraries are missing and therefore
    no GTK gui version can't be build. So you need to install the GTK
    library in your system, with your package manager or by compiling it
    yourself. Then run the configure script again and check, that it
    finds the library.

In theory, those provided dependencies by your distribution might still
lack some libraries, that are needed for features, that simply are not
enabled in your distribution and therefore those commands in 1-3 won't
install it. At the very least, this provides a jumping point and you need
to track down the required missing packages using method 4 from above. But
usually, this works good enough for most people and you won't have to
bother with the fourth method.

更多详情请阅读:

    |:version|
    |+feature-list|

=============================================================================
 								*faq-36*
SECTION 36 - VARIOUS ~

 								*faq-36.1*
36.1. How do I edit binary files with Vim?

You can set the following options to edit binary files in Vim: >

    :set binary
    :set display=uhex
<
You can also use the "-b" command-line option to edit a binary file: >

    $ vim -b <binary_file_name>
<
You can also use the xxd utility (part of the Vim distribution) to edit
binary files.

更多详情请阅读:

    |23.4|
    |edit-binary|
    |hex-editing|
    |-b|
    |'binary'|
    |'endofline'|
    |'display'|

 								*faq-36.2*
36.2. How do I disable the visual error flash and the error beep?

You can disable both the visual error flash and the error beep using the
following command: >

    :set visualbell t_vb=
<
更多详情请阅读:

    |'visualbell'|
    |'errorbells'|
    |t_vb|

 								*faq-36.3*
36.3. How do I display the ascii value of a character displayed in a
      buffer?

You can use the "ga" command to display the ascii value of a displayed
character.

更多详情请阅读:

    |ga|
    |:ascii|

 								*faq-36.4*
36.4. Can I use zero as a count for a Vim command?

You cannot use zero as a count for a Vim command, as "0" is a command on
its own, moving to the first column of the line.

更多详情请阅读:

    |0|
    |count|

 								*faq-36.5*
36.5. How do I disable the Vim welcome screen?

You can disable the Vim welcome screen, by adding the "I" flag to the
'shortmess' option: >

    :set shortmess+=I
<
更多详情请阅读:

    |:intro|
    |'shortmess'|

 								*faq-36.6*
36.6. How do I avoid the "hit enter to continue" prompt?

Vim will prompt you with the "hit enter to continue" prompt, if there are
some messages on the screen for you to read and the screen is about to be
redrawn.  You can add the "T" flag to the 'shortmess' option to truncate
all messages. This will help in avoiding the hit-enter prompt: >

    :set shortmess+=T
<
You can also increase the command height by setting the 'cmdheight' option: >

    :set cmdheight=2
<
更多详情请阅读:

    |hit-enter|
    |avoid-hit-enter|
    |'shortmess'|
    |'cmdheight'|

 								*faq-36.7*
36.7. How do I invoke Vim from command line to run a group of commands on a
      group of files?

There are several ways to invoke Vim from command line to run a group of
commands on a group of files. You can use a set of  "-c" command line
options to specify a group of commands: >

    $ vim -c "<ex_command_1>" -c "<ex_command_2>" *.txt
<
Each of the ex-command specified with the "-c" command line option is
executed one by one sequentially. You can also use a single "-c" command
line option and the "|" character to separate the ex commands: >

    $ vim -c "<ex_command_1> | <ex_command_2>" *.txt
<
In the above command, if an ex command fails, then all the remaining ex
commands will not be executed.

For example, to replace "ABC" with "DEF" in a file from the command-line,
you can use the following command: >

    $ vim -c "%s/ABC/DEF/ge | update" myfile.txt
<
To replace "ABC" with "DEF" in multiple files from the command-line,
you can use the following command: >

    $ vim -c "argdo %s/ABC/DEF/ge | update" *.txt
<
You can store the group of commands into a file and use the "-s" command
line option to run the commands on a set of files. For example, if the
group of commands are stored in the file mycmds.txt, then you can use the
following command: >

    $ vim -s mycmds.txt *.pl
<
更多详情请阅读:

    |-c|
    |-s|

 								*faq-36.8*
36.8. How do I use a normal mode command from insert mode without leaving
      the insert mode?

You can use a normal command from insert mode, without leaving the insert
mode, by first pressing the CTRL-O key and then follow that with a single
normal mode command.

To execute more than one normal mode command, press the CTRL-L key,
followed by any number of normal mode commands and then press <Esc> to get
back to the insert mode. (This only works, when the 'insertmode' option
is set).

更多详情请阅读:

    |i_CTRL-O|
    |i_CTRL-L|

 								*faq-36.9*
36.9. How do I start Vim in insert mode?

You can start Vim in insert mode using the `:startinsert` ex command. >

    $ vim +startinsert myfile.txt
<
The above command will open the file "myfile.txt" and start insert mode
with the cursor in front of the first character on the first line.  To open
the file and start appending after the last character on the last line,
you can use the following command: >

    $ vim + +startinsert! myfile.txt
<
更多详情请阅读:

    |:startinsert|

 								*faq-36.10*
36.10. How do I use Copy and Paste with Vim?

You should first check the output of the `:version` command and make
sure that +xterm-clipboard is present.

When running Vim in an xterm, you can either let Vim control the mouse
or let xterm control the mouse. This is configured by the 'mouse' option.

If the 'mouse' option is not set (or set to the default value), then Vim will
not control the mouse. You cannot move the Vim text cursor using the
mouse. When you select some text using the mouse, xterm will copy
it to the X11 cut buffer. When you press both the mouse buttons,
xterm will paste the text from the cut buffer.

If the 'mouse' option is set to "a" or some other value, then Vim controls
the mouse. The mode (normal or insert or visual, etc) in which Vim
controls the mouse is configured by the 'mouse' option. You can move
the Vim text cursor using the mouse. When you select some text,
the 'clipboard' option setting is used to determine whether to transfer
the selected text to the clipboard or not. The default setting is to
transfer the selected text to the clipboard. If you want to use the
xterm selection mechanism in this mode, then you can press the
<Shift> key. If you press <Shift> key when selecting text using the
mouse, then Vim doesn't control the mouse and xterm controls the
mouse.

In the GUI mode, Copy and Paste should just work, depending on the 'mouse'
setting. 更多详情请阅读:

    |'clipboard'|
    |x11-selection|
    |clipboard|
    |'go-a'|
    |'mouse'|
    |xterm-copy-paste|
    |09.3|

 								*faq-36.11*
36.11. Why shouldn't I modify the files in the system runtime directory?

Just be careful about modifying files under $VIMRUNTIME, which usually
is /usr/share/vim/vimXX (Unix) or C:\Program Files\vim\vimXX
(Windows) and XX being the version for which it applies, e.g. 73 for Vim
7.3.

One should generally avoid modifying those files because they may be
replaced during an upgrade of your Vim installation and your changes
will be lost.  Also, if you upgrade to a new major or minor revision of
Vim (e.g., from 7.3 to 7.4), the new version of Vim will use a different
$VIMRUNTIME directory and while your changes won't be lost, they will be
ignored.

Consequently, take a look at

    |filetypes|

for an explanation of several ways to modify Vim's response to
different filetypes and where to put those modifications so that
they will not be overwritten.

=============================================================================
 								*faq-37*
SECTION 37 - UNICODE ~
Author: Tony Mechelynck <antoine.mechelynck AT belgacom.net>

 								*faq-37.1*
37.1. Is it possible to create Unicode files using Vim?

Yes. It may be more or less complicated depending on the keyboard and fonts
available to you, but it is always possible to encode any possible Unicode
codepoint (and some illegal ones) into a file. To create a Unicode file
using Vim, you should have compiled Vim with the "+multi_byte" compile-time
option.  You can get more information about Unicode from the following
sites:

    http://www.unicode.org
    https://www.cl.cam.ac.uk/~mgk25/unicode.html

更多详情请阅读:

    |multibyte|
    |usr_45.txt|

 								*faq-37.2*
37.2. Which Vim settings are particularly important for editing Unicode
      files?

The most important are the various "encoding" options, i.e., 'encoding',
'fileencoding', 'fileencodings' and 'termencoding'. The boolean option
'bomb' is also significant.

更多详情请阅读:

    |'encoding'|
    |'fileencoding'|
    |'fileencodings'|
    |'termencoding'|
    |'bomb'|

 								*faq-37.3*
37.3. What is the 'encoding' option?

Basically, the 'encoding' option defines how Vim will represent your data
internally.  However, all Unicode encodings are represented internally as
utf-8 and converted (if necessary) when reading and writing.

更多详情请阅读:

    |'encoding'|

 								*faq-37.4*
37.4. How does Vim name the various Unicode encodings?

Utf-8 is called utf-8 or utf8; utf-16 is called ucs-2 or ucs2; utf-32 is
called ucs-4 or ucs4. Also, you may specify endianness (except for utf-8
which does not vary for endianness) by appending le for little-endian or be
for big-endian. If you create a file with an encoding of ucs-2 or ucs-4
without specifying endianness, Vim will use what is typical of your
machine.

更多详情请阅读:

    |encoding-names|
    |encoding-values|
    |encoding-table|

 								*faq-37.5*
37.5. How does Vim specify the presence or absence of a byte-order mark?

When reading a file, if the 'fileencodings' option includes "ucs-bom", Vim
will check for a byte-order mark. When writing a file, if the 'bomb' option
is set, Vim will write a byte-order mark on files whose encoding warrants
it.

更多详情请阅读:

    |'fileencodings'|
    |'bomb'|

 								*faq-37.6*
37.6. What is the 'fileencoding' option?

The 'fileencoding' option defines the particular encoding which Vim will
use to write a file. If empty, then the value of the 'encoding' option is
the default.

更多详情请阅读:

    |'fileencoding'|

 								*faq-37.7*
37.7. What is the 'fileencodings' option?

The 'fileencodings' option defines the heuristics used by Vim when opening
an existing file. It is a comma separated list of encodings. A special
name, "ucs-bom" is used to indicate that Vim should check for the presence
of a byte-order mark; however, it will not be recognised if it comes after
"utf-8".  Normally, "ucs-bom" (if present) should be first in the list.

When Vim opens a file, it checks it against the encodings listed in
'fileencodings'. The first one that matches is used. If there is no match,
then Vim sets 'fileencoding' to the null string, i.e., the value of
'encoding' will be used.

更多详情请阅读:

    |'fileencodings'|
    |'encoding'|

 								*faq-37.8*
37.8. What is the 'termencoding' option?

The 'termencoding' option defines how your keyboard encodes the data you
type.  If empty, Vim assumes that it has the same value as 'encoding'.
Usually it should be set to something that matches your locale.

更多详情请阅读:

    |'termencoding'|
    |locale|

 								*faq-37.9*
37.9. What is the 'bomb' option?

When reading a file with "ucs-bom" present in the 'fileencodings' option,
Vim will set the 'bomb' option on or off depending on the presence or
absence of a byte-order mark at the start of the file. When writing, Vim
will write a byte-order mark if the 'bomb' option is set. You may set or
unset it manually do make Vim write, or not write, the b.o.m.

更多详情请阅读:

    |'bomb'|

 								*faq-37.10*
37.10. Where can I find an example of a typical use of all these options?

There is a "tip", with explains them in different words with an example, at

    http://vim.wikia.com/wiki/VimTip246

 								*faq-37.11*
37.11. How can I insert Unicode characters into a file using Vim?

Several methods are available:

- Characters present on your keyboard can be typed in the usual way, even
  those which require a "dead-key" prefix, like (for instance) the
  circumflex on French keyboards.
- Characters for which a digraph is defined can be typed as two characters
  prefixed by CTRL-K.
- If you have set the 'digraph' option, you can enter the characters for
  which a digraph is defined as <char1><BS><char2>.
- Any character can be entered by using a CTRL-V prefix (or CTRL-Q if
  CTRL-V is remapped to paste from the clipboard).

更多详情请阅读:

    |digraphs|
    |'digraph'|
    |i_CTRL-V_digit|

 								*faq-37.12*
37.12. How can I know which digraphs are defined and for which characters?

First set the 'encoding' option properly (for instance, to utf-8), then use
the `:digraphs` command to list the currently defined digraphs.

Alternatively, the help file contains the complete set of all digraphs.
So you can easily search that list there.

更多详情请阅读:

    |:digraphs|
    |'encoding'|
    |digraph-table|


 vim:tw=78:ts=8:ft=help:norl:
